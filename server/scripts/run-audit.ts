
import { auditService } from '../services/auditService';
import { AuditHelpers } from '../utils/auditHelpers';
import { promises as fs } from 'fs';
import * as path from 'path';

async function runAudit() {
  console.log('๐ ุจุฏุก ุงููุญุต ุงูุดุงูู ููุชุทุจูู...\n');

  try {
    // ุชุดุบูู ุงููุญุต ุงูุดุงูู
    const auditReport = await auditService.runCompleteAudit();

    // ุฅูุดุงุก ูุฌูุฏ ุงููุชุงุฆุฌ
    const outputDir = path.join(process.cwd(), 'audit-results');
    await fs.mkdir(outputDir, { recursive: true });

    // ุฅูุดุงุก ุงูุชูุงุฑูุฑ
    const timestamp = new Date().toISOString().split('T')[0];
    
    // ุชูุฑูุฑ JSON
    const jsonReport = JSON.stringify(auditReport, null, 2);
    await fs.writeFile(path.join(outputDir, `audit-report-${timestamp}.json`), jsonReport);

    // ุชูุฑูุฑ Markdown
    const markdownReport = await AuditHelpers.generateMarkdownReport(auditReport);
    await fs.writeFile(path.join(outputDir, `audit-report-${timestamp}.md`), markdownReport);

    // ุชูุฑูุฑ CSV (ููุฎุต ุงููุดุงูู)
    let csvContent = 'ID,Title,Severity,Category,Description,Affected Files,Status\n';
    auditReport.issues.forEach(issue => {
      csvContent += `"${issue.id}","${issue.title}","${issue.severity}","${issue.category}","${issue.description}","${issue.affectedFiles.join(';')}","${issue.status}"\n`;
    });
    await fs.writeFile(path.join(outputDir, `audit-issues-${timestamp}.csv`), csvContent);

    // ุทุจุงุนุฉ ุงูููุฎุต
    console.log('๐ ููุฎุต ุงููุญุต:');
    console.log(`   โข ูุดุงูู ุญุฑุฌุฉ: ${auditReport.summary.critical}`);
    console.log(`   โข ูุดุงูู ูููุฉ: ${auditReport.summary.high}`);
    console.log(`   โข ูุดุงูู ูุชูุณุทุฉ: ${auditReport.summary.medium}`);
    console.log(`   โข ูุดุงูู ููุฎูุถุฉ: ${auditReport.summary.low}`);
    console.log(`   โข ุงููุฌููุน: ${auditReport.summary.total}\n`);

    console.log(`๐ ุญุงูุฉ ุงููุดุฑ: ${auditReport.readyForDeployment ? 'โ ุฌุงูุฒ' : 'โ ุบูุฑ ุฌุงูุฒ'}\n`);

    console.log('๐ ุชู ุญูุธ ุงูุชูุงุฑูุฑ ูู:');
    console.log(`   โข ${path.join(outputDir, `audit-report-${timestamp}.json`)}`);
    console.log(`   โข ${path.join(outputDir, `audit-report-${timestamp}.md`)}`);
    console.log(`   โข ${path.join(outputDir, `audit-issues-${timestamp}.csv`)}\n`);

    // ุทุจุงุนุฉ ูุงุฆูุฉ ูุญุต ุงููุดุฑ
    console.log('๐ ูุงุฆูุฉ ูุญุต ุงููุดุฑ:');
    Object.entries(auditReport.checklist).forEach(([item, status]) => {
      const icon = status === 'PASS' ? 'โ' : 'โ';
      console.log(`   ${icon} ${item}`);
    });

    // ุงูุชูุตูุงุช ุงูุนุงุฌูุฉ
    const criticalIssues = auditReport.issues.filter(i => i.severity === 'Critical');
    if (criticalIssues.length > 0) {
      console.log('\n๐จ ูุดุงูู ุญุฑุฌุฉ ุชุญุชุงุฌ ุฅุตูุงุญ ููุฑู:');
      criticalIssues.forEach((issue, index) => {
        console.log(`   ${index + 1}. ${issue.title}`);
        console.log(`      ุงูุญู: ${issue.suggestedFix}`);
      });
    }

    // ุฅููุงุก ุงูุนูููุฉ ุจุงูุญุงูุฉ ุงูููุงุณุจุฉ
    const exitCode = auditReport.summary.critical > 0 ? 1 : 0;
    process.exit(exitCode);

  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุชุดุบูู ุงููุญุต ุงูุดุงูู:', error);
    process.exit(1);
  }
}

// ุชุดุบูู ุงููุญุต ุฅุฐุง ุชู ุงุณุชุฏุนุงุก ุงูููู ูุจุงุดุฑุฉ
if (require.main === module) {
  runAudit();
}

export { runAudit };
