📊 تقرير تفصيلي للتحليل
📂 المشروع: /home/administrator/Panel
📑 عدد الملفات المفحوصة: 127

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/auth.ts
🏷️ الدالة: hashPassword
🔢 الأسطر: 21-25
⚡ Async: نعم
🔑 الوسائط:
   • password: string
📞 الاستدعاءات:
   • randomBytes(16).toString("hex") (سطر 22)
   • randomBytes(16) (سطر 22)
   • scryptAsync(password, salt, 64) (سطر 23)
   • buf.toString("hex") (سطر 24)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/auth.ts
🏷️ الدالة: comparePasswords
🔢 الأسطر: 27-32
⚡ Async: نعم
🔑 الوسائط:
   • supplied: string
   • stored: string
📞 الاستدعاءات:
   • stored.split(".") (سطر 28)
   • Buffer.from(hashed, "hex") (سطر 29)
   • scryptAsync(supplied, salt, 64) (سطر 30)
   • timingSafeEqual(hashedBuf, suppliedBuf) (سطر 31)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/auth.ts
🏷️ الدالة: getSession
🔢 الأسطر: 42-96
⚡ Async: لا
📞 الاستدعاءات:
   • connectPg(session) (سطر 50)
   • console.log('Using PostgreSQL session store') (سطر 57)
   • console.warn('Failed to initialize PostgreSQL session store, falling back to MemoryStore:', error instanceof Error ? error.message : 'Unknown error') (سطر 62)
   • MemoryStore(session) (سطر 64)
   • console.log('Using MemoryStore for sessions') (سطر 68)
   • session({
    secret: process.env.SESSION_SECRET || 'default-secret-change-in-production',
    store: sessionStore,
    resave: true, // تغيير إلى true لحل مشاكل الجلسة
    saveUninitialized: true, // تغيير إلى true لضمان حفظ الجلسة
    name: 'connect.sid',
    cookie: cookieSettings,
    rolling: true, // تجديد الجلسة مع كل طلب
  }) (سطر 87)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/auth.ts
🏷️ الدالة: setupAuth
🔢 الأسطر: 98-228
⚡ Async: لا
🔑 الوسائط:
   • app: import("/home/administrator/Panel/node_modules/@types/express/index").Express
📞 الاستدعاءات:
   • app.use(getSession()) (سطر 100)
   • getSession() (سطر 100)
   • app.use(passport.initialize()) (سطر 103)
   • passport.initialize() (سطر 103)
   • app.use(passport.session()) (سطر 104)
   • passport.session() (سطر 104)
   • passport.use(
    new LocalStrategy(async (username, password, done) => {
      try {
        const user = await storage.getUserByUsername(username);
        if (!user || !(await comparePasswords(password, user.password))) {
          return done(null, false);
        } else {
          // تحديث آخر تسجيل دخول
          await storage.updateUser(user.id, { lastLogin: new Date() });
          return done(null, user);
        }
      } catch (error) {
        return done(error);
      }
    }),
  ) (سطر 106)
   • storage.getUserByUsername(username) (سطر 109)
   • comparePasswords(password, user.password) (سطر 110)
   • done(null, false) (سطر 111)
   • storage.updateUser(user.id, { lastLogin: new Date() }) (سطر 114)
   • done(null, user) (سطر 115)
   • done(error) (سطر 118)
   • passport.serializeUser((user, done) => done(null, user.id)) (سطر 123)
   • done(null, user.id) (سطر 123)
   • passport.deserializeUser(async (id: string, done) => {
    try {
      const user = await storage.getUser(id);
      done(null, user);
    } catch (error) {
      done(error);
    }
  }) (سطر 124)
   • storage.getUser(id) (سطر 126)
   • done(null, user) (سطر 127)
   • done(error) (سطر 129)
   • app.post("/api/register", async (req, res, next) => {
    try {
      const validatedData = insertUserSchema.parse(req.body);

      const existingUser = await storage.getUserByUsername(validatedData.username!);
      if (existingUser) {
        return res.status(400).json({ error: "اسم المستخدم موجود بالفعل" });
      }

      const existingEmail = await storage.getUserByEmail(validatedData.email!);
      if (existingEmail) {
        return res.status(400).json({ error: "البريد الإلكتروني موجود بالفعل" });
      }

      const user = await storage.createUser({
        ...validatedData,
        password: await hashPassword(validatedData.password),
      });

      req.login(user, (err) => {
        if (err) return next(err);
        res.status(201).json(user);
      });
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ error: "بيانات غير صحيحة", details: error.errors });
      }
      next(error);
    }
  }) (سطر 134)
   • insertUserSchema.parse(req.body) (سطر 136)
   • storage.getUserByUsername(validatedData.username!) (سطر 138)
   • res.status(400).json({ error: "اسم المستخدم موجود بالفعل" }) (سطر 140)
   • res.status(400) (سطر 140)
   • storage.getUserByEmail(validatedData.email!) (سطر 143)
   • res.status(400).json({ error: "البريد الإلكتروني موجود بالفعل" }) (سطر 145)
   • res.status(400) (سطر 145)
   • storage.createUser({
        ...validatedData,
        password: await hashPassword(validatedData.password),
      }) (سطر 148)
   • hashPassword(validatedData.password) (سطر 150)
   • req.login(user, (err) => {
        if (err) return next(err);
        res.status(201).json(user);
      }) (سطر 153)
   • next(err) (سطر 154)
   • res.status(201).json(user) (سطر 155)
   • res.status(201) (سطر 155)
   • res.status(400).json({ error: "بيانات غير صحيحة", details: error.errors }) (سطر 159)
   • res.status(400) (سطر 159)
   • next(error) (سطر 161)
   • app.post("/api/login", (req, res, next) => {
    console.log('Login attempt for user:', req.body.username);
    console.log('Request headers:', {
      'user-agent': req.headers['user-agent'],
      'origin': req.headers.origin,
      'referer': req.headers.referer
    });

    passport.authenticate("local", (err: any, user: any, info: any) => {
      if (err) {
        console.error('Login error:', err);
        return res.status(500).json({ error: "خطأ في الخادم" });
      }

      if (!user) {
        console.log('Login failed for user:', req.body.username, 'Info:', info);
        return res.status(401).json({ error: "اسم المستخدم أو كلمة المرور غير صحيحة" });
      }

      req.logIn(user, { session: true }, (err: any) => {
        if (err) {
          console.error('Session creation error:', err);
          return res.status(500).json({ error: "فشل في إنشاء الجلسة" });
        }

        // التأكد من حفظ الجلسة قبل الاستجابة
        req.session.save((saveErr: any) => {
          if (saveErr) {
            console.error('Session save error:', saveErr);
            return res.status(500).json({ error: "فشل في حفظ الجلسة" });
          }

          console.log('Login successful for user:', user.username, 'Session ID:', req.sessionID);
          console.log('Session saved successfully');

          // إرجاع بيانات المستخدم بدون كلمة المرور
          const { password, ...userWithoutPassword } = user;

          // إضافة headers إضافية للتوافق
          res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
          res.setHeader('Pragma', 'no-cache');
          res.setHeader('Expires', '0');

          res.status(200).json(userWithoutPassword);
        });
      });
    })(req, res, next);
  }) (سطر 166)
   • console.log('Login attempt for user:', req.body.username) (سطر 167)
   • console.log('Request headers:', {
      'user-agent': req.headers['user-agent'],
      'origin': req.headers.origin,
      'referer': req.headers.referer
    }) (سطر 168)
   • passport.authenticate("local", (err: any, user: any, info: any) => {
      if (err) {
        console.error('Login error:', err);
        return res.status(500).json({ error: "خطأ في الخادم" });
      }

      if (!user) {
        console.log('Login failed for user:', req.body.username, 'Info:', info);
        return res.status(401).json({ error: "اسم المستخدم أو كلمة المرور غير صحيحة" });
      }

      req.logIn(user, { session: true }, (err: any) => {
        if (err) {
          console.error('Session creation error:', err);
          return res.status(500).json({ error: "فشل في إنشاء الجلسة" });
        }

        // التأكد من حفظ الجلسة قبل الاستجابة
        req.session.save((saveErr: any) => {
          if (saveErr) {
            console.error('Session save error:', saveErr);
            return res.status(500).json({ error: "فشل في حفظ الجلسة" });
          }

          console.log('Login successful for user:', user.username, 'Session ID:', req.sessionID);
          console.log('Session saved successfully');

          // إرجاع بيانات المستخدم بدون كلمة المرور
          const { password, ...userWithoutPassword } = user;

          // إضافة headers إضافية للتوافق
          res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
          res.setHeader('Pragma', 'no-cache');
          res.setHeader('Expires', '0');

          res.status(200).json(userWithoutPassword);
        });
      });
    })(req, res, next) (سطر 174)
   • passport.authenticate("local", (err: any, user: any, info: any) => {
      if (err) {
        console.error('Login error:', err);
        return res.status(500).json({ error: "خطأ في الخادم" });
      }

      if (!user) {
        console.log('Login failed for user:', req.body.username, 'Info:', info);
        return res.status(401).json({ error: "اسم المستخدم أو كلمة المرور غير صحيحة" });
      }

      req.logIn(user, { session: true }, (err: any) => {
        if (err) {
          console.error('Session creation error:', err);
          return res.status(500).json({ error: "فشل في إنشاء الجلسة" });
        }

        // التأكد من حفظ الجلسة قبل الاستجابة
        req.session.save((saveErr: any) => {
          if (saveErr) {
            console.error('Session save error:', saveErr);
            return res.status(500).json({ error: "فشل في حفظ الجلسة" });
          }

          console.log('Login successful for user:', user.username, 'Session ID:', req.sessionID);
          console.log('Session saved successfully');

          // إرجاع بيانات المستخدم بدون كلمة المرور
          const { password, ...userWithoutPassword } = user;

          // إضافة headers إضافية للتوافق
          res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
          res.setHeader('Pragma', 'no-cache');
          res.setHeader('Expires', '0');

          res.status(200).json(userWithoutPassword);
        });
      });
    }) (سطر 174)
   • console.error('Login error:', err) (سطر 176)
   • res.status(500).json({ error: "خطأ في الخادم" }) (سطر 177)
   • res.status(500) (سطر 177)
   • console.log('Login failed for user:', req.body.username, 'Info:', info) (سطر 181)
   • res.status(401).json({ error: "اسم المستخدم أو كلمة المرور غير صحيحة" }) (سطر 182)
   • res.status(401) (سطر 182)
   • req.logIn(user, { session: true }, (err: any) => {
        if (err) {
          console.error('Session creation error:', err);
          return res.status(500).json({ error: "فشل في إنشاء الجلسة" });
        }

        // التأكد من حفظ الجلسة قبل الاستجابة
        req.session.save((saveErr: any) => {
          if (saveErr) {
            console.error('Session save error:', saveErr);
            return res.status(500).json({ error: "فشل في حفظ الجلسة" });
          }

          console.log('Login successful for user:', user.username, 'Session ID:', req.sessionID);
          console.log('Session saved successfully');

          // إرجاع بيانات المستخدم بدون كلمة المرور
          const { password, ...userWithoutPassword } = user;

          // إضافة headers إضافية للتوافق
          res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
          res.setHeader('Pragma', 'no-cache');
          res.setHeader('Expires', '0');

          res.status(200).json(userWithoutPassword);
        });
      }) (سطر 185)
   • console.error('Session creation error:', err) (سطر 187)
   • res.status(500).json({ error: "فشل في إنشاء الجلسة" }) (سطر 188)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/auth.ts
🏷️ الدالة: isAuthenticated
🔢 الأسطر: 231-236
⚡ Async: لا
🔑 الوسائط:
   • req: any
   • res: any
   • next: any
📞 الاستدعاءات:
   • req.isAuthenticated() (سطر 232)
   • next() (سطر 233)
   • res.sendStatus(401) (سطر 235)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/auth.ts
🏷️ الدالة: requireRole
🔢 الأسطر: 238-258
⚡ Async: لا
🔑 الوسائط:
   • role: "admin" | "moderator" | "user" | "viewer"
📞 الاستدعاءات:
   • req.isAuthenticated() (سطر 240)
   • res.sendStatus(401) (سطر 241)
   • next() (سطر 253)
   • res.sendStatus(403) (سطر 256)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/db.ts
🏷️ الدالة: createDatabaseUrl
🔢 الأسطر: 16-30
⚡ Async: لا
📞 الاستدعاءات:
   • envLoader.get('DATABASE_URL') (سطر 17)
   • console.log('✅ تم العثور على DATABASE_URL') (سطر 20)
   • console.log('🔧 Connection string:', databaseUrl.replace(/\/\/[^:]+:[^@]+@/, '//***:***@')) (سطر 21)
   • databaseUrl.replace(/\/\/[^:]+:[^@]+@/, '//***:***@') (سطر 21)
   • console.error('❌ DATABASE_URL غير موجود في أي من المصادر:') (سطر 25)
   • console.error('   - ملف .env') (سطر 26)
   • console.error('   - ecosystem.config.json') (سطر 27)
   • console.error('   - متغيرات بيئة النظام') (سطر 28)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/db.ts
🏷️ الدالة: setupSSLConfig
🔢 الأسطر: 33-96
⚡ Async: لا
📞 الاستدعاءات:
   • createDatabaseUrl() (سطر 34)
   • connectionString.includes('localhost') (سطر 37)
   • connectionString.includes('127.0.0.1') (سطر 38)
   • connectionString.includes('@localhost/') (سطر 39)
   • console.log('🔓 اتصال محلي - تعطيل SSL') (سطر 42)
   • console.log('🔐 اتصال خارجي - إعداد SSL آمن ومرن') (سطر 46)
   • envLoader.get('PGSSLROOTCERT') (سطر 59)
   • console.log('📜 [SSL] استخدام شهادة SSL من متغيرات البيئة') (سطر 62)
   • console.log('✅ [SSL] تم تحميل الشهادة - تفعيل التحقق الكامل') (سطر 64)
   • fs.existsSync(certPath) (سطر 68)
   • console.log('📜 [SSL] استخدام شهادة SSL من الملف') (سطر 69)
   • fs.readFileSync(certPath) (سطر 70)
   • console.log('✅ [SSL] تم تحميل الشهادة من الملف - تفعيل التحقق الكامل') (سطر 71)
   • console.log('🔒 [SSL] تفعيل SSL مع التحقق الصارم للاتصالات الخارجية') (سطر 74)
   • console.log('💡 [SSL] يُنصح بإضافة شهادة SSL للحصول على أمان أفضل') (سطر 75)
   • envLoader.get('PGSSL_SKIP_VERIFICATION') (سطر 78)
   • console.log('⚠️ [SSL] تم تعطيل التحقق من الشهادات بناءً على PGSSL_SKIP_VERIFICATION') (سطر 81)
   • console.log('🔒 [SSL] التحقق من الشهادات مفعل للأمان الكامل') (سطر 84)
   • console.log('💡 [SSL] لتعطيل التحقق في البيئة التطويرية، أضف PGSSL_SKIP_VERIFICATION=true') (سطر 86)
   • console.error('❌ [SSL] خطأ في إعداد SSL:', error) (سطر 91)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/db.ts
🏷️ الدالة: getSmartDB
🔢 الأسطر: 145-151
⚡ Async: لا
🔑 الوسائط:
   • operationType: "read" | "write" | "backup" | "sync"
📞 الاستدعاءات:
   • smartConnectionManager.getSmartConnection(operationType) (سطر 146)
   • console.log(`🎯 [Smart DB] توجيه ${operationType} إلى: ${connection.source || 'لا يوجد اتصال'}`) (سطر 148)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/db.ts
🏷️ الدالة: getSmartPool
🔢 الأسطر: 153-159
⚡ Async: لا
🔑 الوسائط:
   • operationType: "read" | "write" | "backup" | "sync"
📞 الاستدعاءات:
   • smartConnectionManager.getSmartConnection(operationType) (سطر 154)
   • console.log(`🎯 [Smart Pool] توجيه ${operationType} إلى: ${connection.source || 'لا يوجد اتصال'}`) (سطر 156)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/routes.ts
🏷️ الدالة: setupCORS
🔢 الأسطر: 46-98
⚡ Async: لا
🔑 الوسائط:
   • app: import("/home/administrator/Panel/node_modules/@types/express/index").Express
📞 الاستدعاءات:
   • app.use(
    cors({
      origin: (origin, callback) => {
        // السماح بالطلبات بدون origin (مثل تطبيقات الموبايل)
        if (!origin) return callback(null, true);

        const allowedOrigins = ENV_CONFIG.cors.origin;

        // التحقق من النطاقات المسموحة مع دعم Regex محسن
        const isAllowed = allowedOrigins.some(allowedOrigin => {
          if (typeof allowedOrigin === 'string') {
            // مطابقة مباشرة
            return allowedOrigin === origin;
          } else if (allowedOrigin instanceof RegExp) {
            // اختبار Regex
            return allowedOrigin.test(origin);
          }
          return false;
        });

        if (isAllowed) {
          callback(null, true);
        } else {
          console.log(`CORS: Blocked request from origin: ${origin}`);
          console.log(`CORS: Allowed origins:`, allowedOrigins);
          callback(new Error('Not allowed by CORS'));
        }
      },
      credentials: ENV_CONFIG.cors.credentials,
      methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'],
      allowedHeaders: [
        'Content-Type', 
        'Authorization', 
        'X-Requested-With',
        'Accept',
        'Origin',
        'Cache-Control',
        'Cookie'
      ],
      exposedHeaders: ['Set-Cookie'],
      optionsSuccessStatus: 200, // لدعم المتصفحات القديمة
      preflightContinue: false
    })
  ) (سطر 47)
   • cors({
      origin: (origin, callback) => {
        // السماح بالطلبات بدون origin (مثل تطبيقات الموبايل)
        if (!origin) return callback(null, true);

        const allowedOrigins = ENV_CONFIG.cors.origin;

        // التحقق من النطاقات المسموحة مع دعم Regex محسن
        const isAllowed = allowedOrigins.some(allowedOrigin => {
          if (typeof allowedOrigin === 'string') {
            // مطابقة مباشرة
            return allowedOrigin === origin;
          } else if (allowedOrigin instanceof RegExp) {
            // اختبار Regex
            return allowedOrigin.test(origin);
          }
          return false;
        });

        if (isAllowed) {
          callback(null, true);
        } else {
          console.log(`CORS: Blocked request from origin: ${origin}`);
          console.log(`CORS: Allowed origins:`, allowedOrigins);
          callback(new Error('Not allowed by CORS'));
        }
      },
      credentials: ENV_CONFIG.cors.credentials,
      methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'],
      allowedHeaders: [
        'Content-Type', 
        'Authorization', 
        'X-Requested-With',
        'Accept',
        'Origin',
        'Cache-Control',
        'Cookie'
      ],
      exposedHeaders: ['Set-Cookie'],
      optionsSuccessStatus: 200, // لدعم المتصفحات القديمة
      preflightContinue: false
    }) (سطر 48)
   • callback(null, true) (سطر 51)
   • allowedOrigins.some(allowedOrigin => {
          if (typeof allowedOrigin === 'string') {
            // مطابقة مباشرة
            return allowedOrigin === origin;
          } else if (allowedOrigin instanceof RegExp) {
            // اختبار Regex
            return allowedOrigin.test(origin);
          }
          return false;
        }) (سطر 56)
   • allowedOrigin.test(origin) (سطر 62)
   • callback(null, true) (سطر 68)
   • console.log(`CORS: Blocked request from origin: ${origin}`) (سطر 70)
   • console.log(`CORS: Allowed origins:`, allowedOrigins) (سطر 71)
   • callback(new Error('Not allowed by CORS')) (سطر 72)
   • app.options('*', (req, res) => {
    res.header('Access-Control-Allow-Credentials', 'true');
    res.header('Vary', 'Origin');
    res.sendStatus(200);
  }) (سطر 93)
   • res.header('Access-Control-Allow-Credentials', 'true') (سطر 94)
   • res.header('Vary', 'Origin') (سطر 95)
   • res.sendStatus(200) (سطر 96)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/routes.ts
🏷️ الدالة: broadcast
🔢 الأسطر: 114-121
⚡ Async: لا
🔑 الوسائط:
   • message: any
📞 الاستدعاءات:
   • JSON.stringify(message) (سطر 115)
   • wsClients.forEach(client => {
    if (client.readyState === WebSocket.OPEN) {
      client.send(data);
    }
  }) (سطر 116)
   • client.send(data) (سطر 118)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/routes.ts
🏷️ الدالة: registerRoutes
🔢 الأسطر: 123-2772
⚡ Async: نعم
🔑 الوسائط:
   • app: import("/home/administrator/Panel/node_modules/@types/express/index").Express
📞 الاستدعاءات:
   • createServer(app) (سطر 124)
   • setupCORS(app) (سطر 127)
   • setupAuth(app) (سطر 130)
   • app.get('/api/admin/users', isAuthenticated, requireRole('admin'), async (req: any, res) => {
    try {
      const users = await storage.getUsersByRole('user');
      res.json(users);
    } catch (error) {
      console.error('Error fetching users:', error);
      res.status(500).json({ message: 'Internal server error' });
    }
  }) (سطر 135)
   • requireRole('admin') (سطر 135)
   • storage.getUsersByRole('user') (سطر 137)
   • res.json(users) (سطر 138)
   • console.error('Error fetching users:', error) (سطر 140)
   • res.status(500).json({ message: 'Internal server error' }) (سطر 141)
   • res.status(500) (سطر 141)
   • app.patch('/api/admin/users/:id/role', isAuthenticated, requireRole('admin'), async (req: any, res) => {
    try {
      const { id } = req.params;
      const { role } = req.body;

      if (!['admin', 'user', 'moderator', 'viewer'].includes(role)) {
        return res.status(400).json({ message: 'Invalid role' });
      }

      const user = await storage.updateUserRole(id, role);
      res.json(user);
    } catch (error) {
      console.error('Error updating user role:', error);
      res.status(500).json({ message: 'Internal server error' });
    }
  }) (سطر 145)
   • requireRole('admin') (سطر 145)
   • ['admin', 'user', 'moderator', 'viewer'].includes(role) (سطر 150)
   • res.status(400).json({ message: 'Invalid role' }) (سطر 151)
   • res.status(400) (سطر 151)
   • storage.updateUserRole(id, role) (سطر 154)
   • res.json(user) (سطر 155)
   • console.error('Error updating user role:', error) (سطر 157)
   • res.status(500).json({ message: 'Internal server error' }) (سطر 158)
   • res.status(500) (سطر 158)
   • app.get('/api/admin/paths', isAuthenticated, requireRole('admin'), async (req: AuthenticatedRequest, res) => {
    try {
      const { type } = req.query;

      const allowedPaths = await storage.getAllowedPaths(type as 'allowed' | 'blocked' | undefined);

      res.json(allowedPaths);
    } catch (error) {
      console.error("Error fetching admin paths:", error);
      res.status(500).json({ message: "Failed to fetch admin paths" });
    }
  }) (سطر 163)
   • requireRole('admin') (سطر 163)
   • storage.getAllowedPaths(type as 'allowed' | 'blocked' | undefined) (سطر 167)
   • res.json(allowedPaths) (سطر 169)
   • console.error("Error fetching admin paths:", error) (سطر 171)
   • res.status(500).json({ message: "Failed to fetch admin paths" }) (سطر 172)
   • res.status(500) (سطر 172)
   • app.post('/api/admin/paths', isAuthenticated, requireRole('admin'), async (req: AuthenticatedRequest, res) => {
    try {
      const userId = getUserId(req)!;
      const pathData = insertAllowedPathSchema.parse({
        ...req.body,
        addedBy: userId
      });

      const allowedPath = await storage.createAllowedPath(pathData);

      res.status(201).json(allowedPath);
    } catch (error) {
      console.error("Error creating admin path:", error);
      res.status(500).json({ message: "Failed to create admin path" });
    }
  }) (سطر 176)
   • requireRole('admin') (سطر 176)
   • getUserId(req) (سطر 178)
   • insertAllowedPathSchema.parse({
        ...req.body,
        addedBy: userId
      }) (سطر 179)
   • storage.createAllowedPath(pathData) (سطر 184)
   • res.status(201).json(allowedPath) (سطر 186)
   • res.status(201) (سطر 186)
   • console.error("Error creating admin path:", error) (سطر 188)
   • res.status(500).json({ message: "Failed to create admin path" }) (سطر 189)
   • res.status(500) (سطر 189)
   • app.put('/api/admin/paths/:id', isAuthenticated, requireRole('admin'), async (req: AuthenticatedRequest, res) => {
    try {
      const { id } = req.params;
      const updates = req.body;

      // Remove addedBy from updates to prevent manipulation
      delete updates.addedBy;

      const allowedPath = await storage.updateAllowedPath(id, updates);

      res.json(allowedPath);
    } catch (error) {
      console.error("Error updating admin path:", error);
      res.status(500).json({ message: "Failed to update admin path" });
    }
  }) (سطر 193)
   • requireRole('admin') (سطر 193)
   • storage.updateAllowedPath(id, updates) (سطر 201)
   • res.json(allowedPath) (سطر 203)
   • console.error("Error updating admin path:", error) (سطر 205)
   • res.status(500).json({ message: "Failed to update admin path" }) (سطر 206)
   • res.status(500) (سطر 206)
   • app.delete('/api/admin/paths/:id', isAuthenticated, requireRole('admin'), async (req: AuthenticatedRequest, res) => {
    try {
      const { id } = req.params;

      await storage.deleteAllowedPath(id);

      res.json({ message: 'Admin path deleted successfully' });
    } catch (error) {
      console.error("Error deleting admin path:", error);
      res.status(500).json({ message: "Failed to delete admin path" });
    }
  }) (سطر 210)
   • requireRole('admin') (سطر 210)
   • storage.deleteAllowedPath(id) (سطر 214)
   • res.json({ message: 'Admin path deleted successfully' }) (سطر 216)
   • console.error("Error deleting admin path:", error) (سطر 218)
   • res.status(500).json({ message: "Failed to delete admin path" }) (سطر 219)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/routes.ts
🏷️ الدالة: getUserId
🔢 الأسطر: 109-111
⚡ Async: لا
🔑 الوسائط:
   • req: AuthenticatedRequest
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.checkUserFileAccess
🔢 الأسطر: 245-286
⚡ Async: نعم
🔑 الوسائط:
   • fileId: string
   • userId: string
   • requiredPermission: "admin" | "read" | "write" | "delete"
📞 الاستدعاءات:
   • db
      .select()
      .from(files)
      .where(and(eq(files.id, fileId), eq(files.ownerId, userId))) (سطر 247)
   • db
      .select()
      .from(files) (سطر 247)
   • db
      .select() (سطر 247)
   • and(eq(files.id, fileId), eq(files.ownerId, userId)) (سطر 250)
   • eq(files.id, fileId) (سطر 250)
   • eq(files.ownerId, userId) (سطر 250)
   • db
      .select()
      .from(users)
      .where(eq(users.id, userId)) (سطر 257)
   • db
      .select()
      .from(users) (سطر 257)
   • db
      .select() (سطر 257)
   • eq(users.id, userId) (سطر 260)
   • db
      .select()
      .from(filePermissions)
      .where(
        and(
          eq(filePermissions.fileId, fileId),
          eq(filePermissions.userId, userId),
          or(
            eq(filePermissions.permission, requiredPermission),
            eq(filePermissions.permission, 'admin')
          ),
          or(
            isNull(filePermissions.expiresAt),
            gte(filePermissions.expiresAt, new Date())
          )
        )
      ) (سطر 267)
   • db
      .select()
      .from(filePermissions) (سطر 267)
   • db
      .select() (سطر 267)
   • and(
          eq(filePermissions.fileId, fileId),
          eq(filePermissions.userId, userId),
          or(
            eq(filePermissions.permission, requiredPermission),
            eq(filePermissions.permission, 'admin')
          ),
          or(
            isNull(filePermissions.expiresAt),
            gte(filePermissions.expiresAt, new Date())
          )
        ) (سطر 271)
   • eq(filePermissions.fileId, fileId) (سطر 272)
   • eq(filePermissions.userId, userId) (سطر 273)
   • or(
            eq(filePermissions.permission, requiredPermission),
            eq(filePermissions.permission, 'admin')
          ) (سطر 274)
   • eq(filePermissions.permission, requiredPermission) (سطر 275)
   • eq(filePermissions.permission, 'admin') (سطر 276)
   • or(
            isNull(filePermissions.expiresAt),
            gte(filePermissions.expiresAt, new Date())
          ) (سطر 278)
   • isNull(filePermissions.expiresAt) (سطر 279)
   • gte(filePermissions.expiresAt, new Date()) (سطر 280)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.getNextVersionNumber
🔢 الأسطر: 289-296
⚡ Async: نعم
🔑 الوسائط:
   • fileId: string
📞 الاستدعاءات:
   • db
      .select({ maxVersion: max(fileBackups.version) })
      .from(fileBackups)
      .where(eq(fileBackups.fileId, fileId)) (سطر 290)
   • db
      .select({ maxVersion: max(fileBackups.version) })
      .from(fileBackups) (سطر 290)
   • db
      .select({ maxVersion: max(fileBackups.version) }) (سطر 290)
   • max(fileBackups.version) (سطر 291)
   • eq(fileBackups.fileId, fileId) (سطر 293)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.cleanExpiredLocks
🔢 الأسطر: 299-309
⚡ Async: نعم
🔑 الوسائط:
   • fileId: string
📞 الاستدعاءات:
   • db
      .delete(fileLocks)
      .where(
        and(
          eq(fileLocks.fileId, fileId),
          isNotNull(fileLocks.expiresAt),
          lt(fileLocks.expiresAt, new Date())
        )
      ) (سطر 300)
   • db
      .delete(fileLocks) (سطر 300)
   • and(
          eq(fileLocks.fileId, fileId),
          isNotNull(fileLocks.expiresAt),
          lt(fileLocks.expiresAt, new Date())
        ) (سطر 303)
   • eq(fileLocks.fileId, fileId) (سطر 304)
   • isNotNull(fileLocks.expiresAt) (سطر 305)
   • lt(fileLocks.expiresAt, new Date()) (سطر 306)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.getUser
🔢 الأسطر: 311-314
⚡ Async: نعم
🔑 الوسائط:
   • id: string
📞 الاستدعاءات:
   • db.select().from(users).where(eq(users.id, id)) (سطر 312)
   • db.select().from(users) (سطر 312)
   • db.select() (سطر 312)
   • eq(users.id, id) (سطر 312)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.upsertUser
🔢 الأسطر: 316-405
⚡ Async: نعم
🔑 الوسائط:
   • userData: { password: string; id?: string | undefined; username?: string | null | undefined; email?: string | null | undefined; firstName?: string | null | undefined; lastName?: string | null | undefined; profileImageUrl?: string | null | undefined; role?: "admin" | "moderator" | "user" | "viewer" | null | undefined; isActive?: boolean | null | undefined; permissions?: string[] | null | undefined; lastLogin?: Date | null | undefined; createdAt?: Date | null | undefined; updatedAt?: Date | null | undefined; }
📞 الاستدعاءات:
   • this.getUser(userData.id) (سطر 327)
   • console.warn('🚨 SECURITY AUDIT: Auto-assigned admin role to new user', {
        userId: userData.id,
        email: userData.email,
        timestamp: new Date().toISOString(),
        reason: 'FORCE_ADMIN_FOR_NEW_USERS environment variable enabled',
        environment: 'development'
      }) (سطر 343)
   • new Date().toISOString() (سطر 346)
   • this.createSystemLog({
          source: 'auth',
          level: 'warn',
          message: `Auto-assigned admin role to new user ${userData.email || userData.id}`,
          metadata: {
            userId: userData.id,
            email: userData.email,
            autoAssignReason: 'FORCE_ADMIN_FOR_NEW_USERS',
            timestamp: new Date().toISOString()
          }
        }) (سطر 353)
   • new Date().toISOString() (سطر 361)
   • console.error('Failed to create audit log for admin role assignment:', error) (سطر 366)
   • db
        .insert(users)
        .values(userDataToInsert)
        .onConflictDoNothing()
        .returning() (سطر 372)
   • db
        .insert(users)
        .values(userDataToInsert)
        .onConflictDoNothing() (سطر 372)
   • db
        .insert(users)
        .values(userDataToInsert) (سطر 372)
   • db
        .insert(users) (سطر 372)
   • db
          .select()
          .from(users)
          .where(eq(users.id, userData.id!)) (سطر 380)
   • db
          .select()
          .from(users) (سطر 380)
   • db
          .select() (سطر 380)
   • eq(users.id, userData.id!) (سطر 383)
   • db
        .update(users)
        .set({
          email: userData.email,
          firstName: userData.firstName,
          lastName: userData.lastName,
          profileImageUrl: userData.profileImageUrl,
          updatedAt: new Date(),
          lastLogin: new Date(),
          // Note: role is intentionally NOT updated for existing users
        })
        .where(eq(users.id, userData.id!))
        .returning() (سطر 390)
   • db
        .update(users)
        .set({
          email: userData.email,
          firstName: userData.firstName,
          lastName: userData.lastName,
          profileImageUrl: userData.profileImageUrl,
          updatedAt: new Date(),
          lastLogin: new Date(),
          // Note: role is intentionally NOT updated for existing users
        })
        .where(eq(users.id, userData.id!)) (سطر 390)
   • db
        .update(users)
        .set({
          email: userData.email,
          firstName: userData.firstName,
          lastName: userData.lastName,
          profileImageUrl: userData.profileImageUrl,
          updatedAt: new Date(),
          lastLogin: new Date(),
          // Note: role is intentionally NOT updated for existing users
        }) (سطر 390)
   • db
        .update(users) (سطر 390)
   • eq(users.id, userData.id!) (سطر 401)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.updateUserRole
🔢 الأسطر: 407-414
⚡ Async: نعم
🔑 الوسائط:
   • id: string
   • role: string
📞 الاستدعاءات:
   • db
      .update(users)
      .set({ role: role as any, updatedAt: new Date() })
      .where(eq(users.id, id))
      .returning() (سطر 408)
   • db
      .update(users)
      .set({ role: role as any, updatedAt: new Date() })
      .where(eq(users.id, id)) (سطر 408)
   • db
      .update(users)
      .set({ role: role as any, updatedAt: new Date() }) (سطر 408)
   • db
      .update(users) (سطر 408)
   • eq(users.id, id) (سطر 411)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.updateUserPermissions
🔢 الأسطر: 416-423
⚡ Async: نعم
🔑 الوسائط:
   • id: string
   • permissions: string[]
📞 الاستدعاءات:
   • db
      .update(users)
      .set({ permissions, updatedAt: new Date() })
      .where(eq(users.id, id))
      .returning() (سطر 417)
   • db
      .update(users)
      .set({ permissions, updatedAt: new Date() })
      .where(eq(users.id, id)) (سطر 417)
   • db
      .update(users)
      .set({ permissions, updatedAt: new Date() }) (سطر 417)
   • db
      .update(users) (سطر 417)
   • eq(users.id, id) (سطر 420)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.getUsersByRole
🔢 الأسطر: 425-431
⚡ Async: نعم
🔑 الوسائط:
   • role: string
📞 الاستدعاءات:
   • db
      .select()
      .from(users)
      .where(eq(users.role, role as any))
      .orderBy(desc(users.createdAt)) (سطر 426)
   • db
      .select()
      .from(users)
      .where(eq(users.role, role as any)) (سطر 426)
   • db
      .select()
      .from(users) (سطر 426)
   • db
      .select() (سطر 426)
   • eq(users.role, role as any) (سطر 429)
   • desc(users.createdAt) (سطر 430)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.getUserByUsername
🔢 الأسطر: 433-439
⚡ Async: نعم
🔑 الوسائط:
   • username: string
📞 الاستدعاءات:
   • db
      .select()
      .from(users)
      .where(eq(users.username, username)) (سطر 434)
   • db
      .select()
      .from(users) (سطر 434)
   • db
      .select() (سطر 434)
   • eq(users.username, username) (سطر 437)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.getUserByEmail
🔢 الأسطر: 441-447
⚡ Async: نعم
🔑 الوسائط:
   • email: string
📞 الاستدعاءات:
   • db
      .select()
      .from(users)
      .where(eq(users.email, email)) (سطر 442)
   • db
      .select()
      .from(users) (سطر 442)
   • db
      .select() (سطر 442)
   • eq(users.email, email) (سطر 445)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.createUser
🔢 الأسطر: 449-455
⚡ Async: نعم
🔑 الوسائط:
   • userData: { password: string; id?: string | undefined; username?: string | null | undefined; email?: string | null | undefined; firstName?: string | null | undefined; lastName?: string | null | undefined; profileImageUrl?: string | null | undefined; role?: "admin" | "moderator" | "user" | "viewer" | null | undefined; isActive?: boolean | null | undefined; permissions?: string[] | null | undefined; lastLogin?: Date | null | undefined; createdAt?: Date | null | undefined; updatedAt?: Date | null | undefined; }
📞 الاستدعاءات:
   • db
      .insert(users)
      .values(userData)
      .returning() (سطر 450)
   • db
      .insert(users)
      .values(userData) (سطر 450)
   • db
      .insert(users) (سطر 450)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.updateUser
🔢 الأسطر: 457-464
⚡ Async: نعم
🔑 الوسائط:
   • id: string
   • updates: Partial<{ password: string; id?: string | undefined; username?: string | null | undefined; email?: string | null | undefined; firstName?: string | null | undefined; lastName?: string | null | undefined; profileImageUrl?: string | null | undefined; role?: "admin" | "moderator" | "user" | "viewer" | null | undefined; isActive?: boolean | null | undefined; permissions?: string[] | null | undefined; lastLogin?: Date | null | undefined; createdAt?: Date | null | undefined; updatedAt?: Date | null | undefined; }>
📞 الاستدعاءات:
   • db
      .update(users)
      .set({ ...updates, updatedAt: new Date() })
      .where(eq(users.id, id))
      .returning() (سطر 458)
   • db
      .update(users)
      .set({ ...updates, updatedAt: new Date() })
      .where(eq(users.id, id)) (سطر 458)
   • db
      .update(users)
      .set({ ...updates, updatedAt: new Date() }) (سطر 458)
   • db
      .update(users) (سطر 458)
   • eq(users.id, id) (سطر 461)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.getApplications
🔢 الأسطر: 467-473
⚡ Async: نعم
🔑 الوسائط:
   • userId: string
📞 الاستدعاءات:
   • db
      .select()
      .from(applications)
      .where(eq(applications.userId, userId))
      .orderBy(desc(applications.createdAt)) (سطر 468)
   • db
      .select()
      .from(applications)
      .where(eq(applications.userId, userId)) (سطر 468)
   • db
      .select()
      .from(applications) (سطر 468)
   • db
      .select() (سطر 468)
   • eq(applications.userId, userId) (سطر 471)
   • desc(applications.createdAt) (سطر 472)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.getApplication
🔢 الأسطر: 475-478
⚡ Async: نعم
🔑 الوسائط:
   • id: string
📞 الاستدعاءات:
   • db.select().from(applications).where(eq(applications.id, id)) (سطر 476)
   • db.select().from(applications) (سطر 476)
   • db.select() (سطر 476)
   • eq(applications.id, id) (سطر 476)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.createApplication
🔢 الأسطر: 480-483
⚡ Async: نعم
🔑 الوسائط:
   • app: { name: string; path: string; port: number; command: string; id?: string | undefined; createdAt?: Date | null | undefined; updatedAt?: Date | null | undefined; description?: string | null | undefined; usePm2?: boolean | null | undefined; status?: "running" | "stopped" | "error" | "starting" | null | undefined; envVars?: unknown; userId?: string | null | undefined; }
📞 الاستدعاءات:
   • db.insert(applications).values(app).returning() (سطر 481)
   • db.insert(applications).values(app) (سطر 481)
   • db.insert(applications) (سطر 481)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.updateApplication
🔢 الأسطر: 485-492
⚡ Async: نعم
🔑 الوسائط:
   • id: string
   • updates: Partial<{ name: string; path: string; port: number; command: string; id?: string | undefined; createdAt?: Date | null | undefined; updatedAt?: Date | null | undefined; description?: string | null | undefined; usePm2?: boolean | null | undefined; status?: "running" | "stopped" | "error" | "starting" | null | undefined; envVars?: unknown; userId?: string | null | undefined; }>
📞 الاستدعاءات:
   • db
      .update(applications)
      .set({ ...updates, updatedAt: new Date() })
      .where(eq(applications.id, id))
      .returning() (سطر 486)
   • db
      .update(applications)
      .set({ ...updates, updatedAt: new Date() })
      .where(eq(applications.id, id)) (سطر 486)
   • db
      .update(applications)
      .set({ ...updates, updatedAt: new Date() }) (سطر 486)
   • db
      .update(applications) (سطر 486)
   • eq(applications.id, id) (سطر 489)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.deleteApplication
🔢 الأسطر: 494-509
⚡ Async: نعم
🔑 الوسائط:
   • id: string
📞 الاستدعاءات:
   • db.delete(notifications).where(eq(notifications.applicationId, id)) (سطر 496)
   • db.delete(notifications) (سطر 496)
   • eq(notifications.applicationId, id) (سطر 496)
   • db.delete(domains).where(eq(domains.applicationId, id)) (سطر 499)
   • db.delete(domains) (سطر 499)
   • eq(domains.applicationId, id) (سطر 499)
   • db.delete(nginxConfigs).where(eq(nginxConfigs.applicationId, id)) (سطر 502)
   • db.delete(nginxConfigs) (سطر 502)
   • eq(nginxConfigs.applicationId, id) (سطر 502)
   • db.delete(systemLogs).where(eq(systemLogs.applicationId, id)) (سطر 505)
   • db.delete(systemLogs) (سطر 505)
   • eq(systemLogs.applicationId, id) (سطر 505)
   • db.delete(applications).where(eq(applications.id, id)) (سطر 508)
   • db.delete(applications) (سطر 508)
   • eq(applications.id, id) (سطر 508)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.getDomains
🔢 الأسطر: 512-514
⚡ Async: نعم
📞 الاستدعاءات:
   • db.select().from(domains).orderBy(desc(domains.createdAt)) (سطر 513)
   • db.select().from(domains) (سطر 513)
   • db.select() (سطر 513)
   • desc(domains.createdAt) (سطر 513)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.getDomainsByApplication
🔢 الأسطر: 516-521
⚡ Async: نعم
🔑 الوسائط:
   • applicationId: string
📞 الاستدعاءات:
   • db
      .select()
      .from(domains)
      .where(eq(domains.applicationId, applicationId)) (سطر 517)
   • db
      .select()
      .from(domains) (سطر 517)
   • db
      .select() (سطر 517)
   • eq(domains.applicationId, applicationId) (سطر 520)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.createDomain
🔢 الأسطر: 523-526
⚡ Async: نعم
🔑 الوسائط:
   • domain: { domain: string; id?: string | undefined; createdAt?: Date | null | undefined; updatedAt?: Date | null | undefined; applicationId?: string | null | undefined; dnsStatus?: string | null | undefined; sslStatus?: string | null | undefined; }
📞 الاستدعاءات:
   • db.insert(domains).values(domain).returning() (سطر 524)
   • db.insert(domains).values(domain) (سطر 524)
   • db.insert(domains) (سطر 524)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.updateDomain
🔢 الأسطر: 528-535
⚡ Async: نعم
🔑 الوسائط:
   • id: string
   • updates: Partial<{ domain: string; id?: string | undefined; createdAt?: Date | null | undefined; updatedAt?: Date | null | undefined; applicationId?: string | null | undefined; dnsStatus?: string | null | undefined; sslStatus?: string | null | undefined; }>
📞 الاستدعاءات:
   • db
      .update(domains)
      .set({ ...updates, updatedAt: new Date() })
      .where(eq(domains.id, id))
      .returning() (سطر 529)
   • db
      .update(domains)
      .set({ ...updates, updatedAt: new Date() })
      .where(eq(domains.id, id)) (سطر 529)
   • db
      .update(domains)
      .set({ ...updates, updatedAt: new Date() }) (سطر 529)
   • db
      .update(domains) (سطر 529)
   • eq(domains.id, id) (سطر 532)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.deleteDomain
🔢 الأسطر: 537-539
⚡ Async: نعم
🔑 الوسائط:
   • id: string
📞 الاستدعاءات:
   • db.delete(domains).where(eq(domains.id, id)) (سطر 538)
   • db.delete(domains) (سطر 538)
   • eq(domains.id, id) (سطر 538)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.getSslCertificates
🔢 الأسطر: 542-544
⚡ Async: نعم
📞 الاستدعاءات:
   • db.select().from(sslCertificates).orderBy(desc(sslCertificates.createdAt)) (سطر 543)
   • db.select().from(sslCertificates) (سطر 543)
   • db.select() (سطر 543)
   • desc(sslCertificates.createdAt) (سطر 543)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.getSslCertificate
🔢 الأسطر: 546-552
⚡ Async: نعم
🔑 الوسائط:
   • domainId: string
📞 الاستدعاءات:
   • db
      .select()
      .from(sslCertificates)
      .where(eq(sslCertificates.domainId, domainId)) (سطر 547)
   • db
      .select()
      .from(sslCertificates) (سطر 547)
   • db
      .select() (سطر 547)
   • eq(sslCertificates.domainId, domainId) (سطر 550)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.createSslCertificate
🔢 الأسطر: 554-557
⚡ Async: نعم
🔑 الوسائط:
   • cert: { id?: string | undefined; createdAt?: Date | null | undefined; updatedAt?: Date | null | undefined; status?: string | null | undefined; domainId?: string | null | undefined; issuer?: string | null | undefined; issuedAt?: Date | null | undefined; expiresAt?: Date | null | undefined; certPath?: string | null | undefined; keyPath?: string | null | undefined; }
📞 الاستدعاءات:
   • db.insert(sslCertificates).values(cert).returning() (سطر 555)
   • db.insert(sslCertificates).values(cert) (سطر 555)
   • db.insert(sslCertificates) (سطر 555)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.updateSslCertificate
🔢 الأسطر: 559-566
⚡ Async: نعم
🔑 الوسائط:
   • id: string
   • updates: Partial<{ id?: string | undefined; createdAt?: Date | null | undefined; updatedAt?: Date | null | undefined; status?: string | null | undefined; domainId?: string | null | undefined; issuer?: string | null | undefined; issuedAt?: Date | null | undefined; expiresAt?: Date | null | undefined; certPath?: string | null | undefined; keyPath?: string | null | undefined; }>
📞 الاستدعاءات:
   • db
      .update(sslCertificates)
      .set({ ...updates, updatedAt: new Date() })
      .where(eq(sslCertificates.id, id))
      .returning() (سطر 560)
   • db
      .update(sslCertificates)
      .set({ ...updates, updatedAt: new Date() })
      .where(eq(sslCertificates.id, id)) (سطر 560)
   • db
      .update(sslCertificates)
      .set({ ...updates, updatedAt: new Date() }) (سطر 560)
   • db
      .update(sslCertificates) (سطر 560)
   • eq(sslCertificates.id, id) (سطر 563)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.getNginxConfigs
🔢 الأسطر: 569-571
⚡ Async: نعم
📞 الاستدعاءات:
   • db.select().from(nginxConfigs).orderBy(desc(nginxConfigs.createdAt)) (سطر 570)
   • db.select().from(nginxConfigs) (سطر 570)
   • db.select() (سطر 570)
   • desc(nginxConfigs.createdAt) (سطر 570)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.getNginxConfig
🔢 الأسطر: 573-579
⚡ Async: نعم
🔑 الوسائط:
   • applicationId: string
📞 الاستدعاءات:
   • db
      .select()
      .from(nginxConfigs)
      .where(eq(nginxConfigs.applicationId, applicationId)) (سطر 574)
   • db
      .select()
      .from(nginxConfigs) (سطر 574)
   • db
      .select() (سطر 574)
   • eq(nginxConfigs.applicationId, applicationId) (سطر 577)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.createNginxConfig
🔢 الأسطر: 581-584
⚡ Async: نعم
🔑 الوسائط:
   • config: { configPath: string; content: string; id?: string | undefined; createdAt?: Date | null | undefined; updatedAt?: Date | null | undefined; applicationId?: string | null | undefined; enabled?: boolean | null | undefined; lastTest?: Date | null | undefined; testResult?: string | null | undefined; }
📞 الاستدعاءات:
   • db.insert(nginxConfigs).values(config).returning() (سطر 582)
   • db.insert(nginxConfigs).values(config) (سطر 582)
   • db.insert(nginxConfigs) (سطر 582)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.updateNginxConfig
🔢 الأسطر: 586-593
⚡ Async: نعم
🔑 الوسائط:
   • id: string
   • updates: Partial<{ configPath: string; content: string; id?: string | undefined; createdAt?: Date | null | undefined; updatedAt?: Date | null | undefined; applicationId?: string | null | undefined; enabled?: boolean | null | undefined; lastTest?: Date | null | undefined; testResult?: string | null | undefined; }>
📞 الاستدعاءات:
   • db
      .update(nginxConfigs)
      .set({ ...updates, updatedAt: new Date() })
      .where(eq(nginxConfigs.id, id))
      .returning() (سطر 587)
   • db
      .update(nginxConfigs)
      .set({ ...updates, updatedAt: new Date() })
      .where(eq(nginxConfigs.id, id)) (سطر 587)
   • db
      .update(nginxConfigs)
      .set({ ...updates, updatedAt: new Date() }) (سطر 587)
   • db
      .update(nginxConfigs) (سطر 587)
   • eq(nginxConfigs.id, id) (سطر 590)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.getNotifications
🔢 الأسطر: 596-603
⚡ Async: نعم
🔑 الوسائط:
   • userId: string
   • limit: number
📞 الاستدعاءات:
   • db
      .select()
      .from(notifications)
      .where(eq(notifications.userId, userId))
      .orderBy(desc(notifications.createdAt))
      .limit(limit) (سطر 597)
   • db
      .select()
      .from(notifications)
      .where(eq(notifications.userId, userId))
      .orderBy(desc(notifications.createdAt)) (سطر 597)
   • db
      .select()
      .from(notifications)
      .where(eq(notifications.userId, userId)) (سطر 597)
   • db
      .select()
      .from(notifications) (سطر 597)
   • db
      .select() (سطر 597)
   • eq(notifications.userId, userId) (سطر 600)
   • desc(notifications.createdAt) (سطر 601)
🩺 التشخيص:
   ⚠️ الوسيط 'limit' بدون نوع صريح (implicit any)

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.createNotification
🔢 الأسطر: 605-608
⚡ Async: نعم
🔑 الوسائط:
   • notification: { type: string; level: string; title: string; message: string; id?: string | undefined; createdAt?: Date | null | undefined; updatedAt?: Date | null | undefined; userId?: string | null | undefined; applicationId?: string | null | undefined; source?: string | null | undefined; acknowledged?: boolean | null | undefined; resolved?: boolean | null | undefined; }
📞 الاستدعاءات:
   • db.insert(notifications).values(notification).returning() (سطر 606)
   • db.insert(notifications).values(notification) (سطر 606)
   • db.insert(notifications) (سطر 606)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.acknowledgeNotification
🔢 الأسطر: 610-615
⚡ Async: نعم
🔑 الوسائط:
   • id: string
📞 الاستدعاءات:
   • db
      .update(notifications)
      .set({ acknowledged: true, updatedAt: new Date() })
      .where(eq(notifications.id, id)) (سطر 611)
   • db
      .update(notifications)
      .set({ acknowledged: true, updatedAt: new Date() }) (سطر 611)
   • db
      .update(notifications) (سطر 611)
   • eq(notifications.id, id) (سطر 614)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.resolveNotification
🔢 الأسطر: 617-622
⚡ Async: نعم
🔑 الوسائط:
   • id: string
📞 الاستدعاءات:
   • db
      .update(notifications)
      .set({ resolved: true, updatedAt: new Date() })
      .where(eq(notifications.id, id)) (سطر 618)
   • db
      .update(notifications)
      .set({ resolved: true, updatedAt: new Date() }) (سطر 618)
   • db
      .update(notifications) (سطر 618)
   • eq(notifications.id, id) (سطر 621)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.getUnreadNotificationCount
🔢 الأسطر: 624-635
⚡ Async: نعم
🔑 الوسائط:
   • userId: string
📞 الاستدعاءات:
   • db
      .select({ count: count() })
      .from(notifications)
      .where(
        and(
          eq(notifications.userId, userId),
          eq(notifications.acknowledged, false)
        )
      ) (سطر 625)
   • db
      .select({ count: count() })
      .from(notifications) (سطر 625)
   • db
      .select({ count: count() }) (سطر 625)
   • count() (سطر 626)
   • and(
          eq(notifications.userId, userId),
          eq(notifications.acknowledged, false)
        ) (سطر 629)
   • eq(notifications.userId, userId) (سطر 630)
   • eq(notifications.acknowledged, false) (سطر 631)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.getSystemLogs
🔢 الأسطر: 638-669
⚡ Async: نعم
🔑 الوسائط:
   • filters: { source?: string | undefined; level?: string | undefined; applicationId?: string | undefined; limit?: number | undefined; } | undefined
📞 الاستدعاءات:
   • conditions.push(eq(systemLogs.source, filters.source)) (سطر 646)
   • eq(systemLogs.source, filters.source) (سطر 646)
   • conditions.push(eq(systemLogs.level, filters.level)) (سطر 649)
   • eq(systemLogs.level, filters.level) (سطر 649)
   • conditions.push(eq(systemLogs.applicationId, filters.applicationId)) (سطر 652)
   • eq(systemLogs.applicationId, filters.applicationId) (سطر 652)
   • db
        .select()
        .from(systemLogs)
        .where(and(...conditions))
        .orderBy(desc(systemLogs.timestamp))
        .limit(filters?.limit || 100) (سطر 656)
   • db
        .select()
        .from(systemLogs)
        .where(and(...conditions))
        .orderBy(desc(systemLogs.timestamp)) (سطر 656)
   • db
        .select()
        .from(systemLogs)
        .where(and(...conditions)) (سطر 656)
   • db
        .select()
        .from(systemLogs) (سطر 656)
   • db
        .select() (سطر 656)
   • and(...conditions) (سطر 659)
   • desc(systemLogs.timestamp) (سطر 660)
   • db
      .select()
      .from(systemLogs)
      .orderBy(desc(systemLogs.timestamp))
      .limit(filters?.limit || 100) (سطر 664)
   • db
      .select()
      .from(systemLogs)
      .orderBy(desc(systemLogs.timestamp)) (سطر 664)
   • db
      .select()
      .from(systemLogs) (سطر 664)
   • db
      .select() (سطر 664)
   • desc(systemLogs.timestamp) (سطر 667)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.createSystemLog
🔢 الأسطر: 671-674
⚡ Async: نعم
🔑 الوسائط:
   • log: { level: string; message: string; source: string; id?: string | undefined; applicationId?: string | null | undefined; timestamp?: Date | null | undefined; metadata?: unknown; }
📞 الاستدعاءات:
   • db.insert(systemLogs).values(log).returning() (سطر 672)
   • db.insert(systemLogs).values(log) (سطر 672)
   • db.insert(systemLogs) (سطر 672)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.createFrontendError
🔢 الأسطر: 677-680
⚡ Async: نعم
🔑 الوسائط:
   • error: { type: "javascript" | "react" | "network" | "navigation" | "user_action" | "component"; message: string; url: string; severity: "low" | "medium" | "high" | "critical"; id?: string | undefined; createdAt?: Date | null | undefined; updatedAt?: Date | null | undefined; userId?: string | null | undefined; resolved?: boolean | null | undefined; timestamp?: Date | null | undefined; component?: string | null | undefined; action?: string | null | undefined; sessionId?: string | null | undefined; userAgent?: string | null | undefined; stack?: string | null | undefined; browserInfo?: unknown; appState?: unknown; errorBoundary?: boolean | null | undefined; resolvedBy?: string | null | undefined; resolvedAt?: Date | null | undefined; occurrenceCount?: number | null | undefined; lastOccurrence?: Date | null | undefined; }
📞 الاستدعاءات:
   • db.insert(frontendErrors).values(error).returning() (سطر 678)
   • db.insert(frontendErrors).values(error) (سطر 678)
   • db.insert(frontendErrors) (سطر 678)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.getFrontendErrors
🔢 الأسطر: 682-752
⚡ Async: نعم
🔑 الوسائط:
   • options: { page?: number | undefined; limit?: number | undefined; filters?: { type?: string | undefined; severity?: string | undefined; resolved?: boolean | undefined; userId?: string | undefined; startDate?: string | undefined; endDate?: string | undefined; } | undefined; } | undefined
📞 الاستدعاءات:
   • conditions.push(eq(frontendErrors.type, filters.type as any)) (سطر 707)
   • eq(frontendErrors.type, filters.type as any) (سطر 707)
   • conditions.push(eq(frontendErrors.severity, filters.severity as any)) (سطر 710)
   • eq(frontendErrors.severity, filters.severity as any) (سطر 710)
   • conditions.push(eq(frontendErrors.resolved, filters.resolved)) (سطر 713)
   • eq(frontendErrors.resolved, filters.resolved) (سطر 713)
   • conditions.push(eq(frontendErrors.userId, filters.userId)) (سطر 716)
   • eq(frontendErrors.userId, filters.userId) (سطر 716)
   • conditions.push(gte(frontendErrors.timestamp, new Date(filters.startDate))) (سطر 719)
   • gte(frontendErrors.timestamp, new Date(filters.startDate)) (سطر 719)
   • conditions.push(lt(frontendErrors.timestamp, new Date(filters.endDate))) (سطر 722)
   • lt(frontendErrors.timestamp, new Date(filters.endDate)) (سطر 722)
   • and(...conditions) (سطر 725)
   • Promise.all([
      whereCondition 
        ? db.select().from(frontendErrors)
            .where(whereCondition)
            .orderBy(desc(frontendErrors.timestamp))
            .limit(limit)
            .offset(offset)
        : db.select().from(frontendErrors)
            .orderBy(desc(frontendErrors.timestamp))
            .limit(limit)
            .offset(offset),
      whereCondition
        ? db.select({ count: count() }).from(frontendErrors).where(whereCondition)
        : db.select({ count: count() }).from(frontendErrors)
    ]) (سطر 727)
   • db.select().from(frontendErrors)
            .where(whereCondition)
            .orderBy(desc(frontendErrors.timestamp))
            .limit(limit)
            .offset(offset) (سطر 729)
   • db.select().from(frontendErrors)
            .where(whereCondition)
            .orderBy(desc(frontendErrors.timestamp))
            .limit(limit) (سطر 729)
   • db.select().from(frontendErrors)
            .where(whereCondition)
            .orderBy(desc(frontendErrors.timestamp)) (سطر 729)
   • db.select().from(frontendErrors)
            .where(whereCondition) (سطر 729)
   • db.select().from(frontendErrors) (سطر 729)
   • db.select() (سطر 729)
   • desc(frontendErrors.timestamp) (سطر 731)
   • db.select().from(frontendErrors)
            .orderBy(desc(frontendErrors.timestamp))
            .limit(limit)
            .offset(offset) (سطر 734)
   • db.select().from(frontendErrors)
            .orderBy(desc(frontendErrors.timestamp))
            .limit(limit) (سطر 734)
   • db.select().from(frontendErrors)
            .orderBy(desc(frontendErrors.timestamp)) (سطر 734)
   • db.select().from(frontendErrors) (سطر 734)
   • db.select() (سطر 734)
   • desc(frontendErrors.timestamp) (سطر 735)
   • db.select({ count: count() }).from(frontendErrors).where(whereCondition) (سطر 739)
   • db.select({ count: count() }).from(frontendErrors) (سطر 739)
   • db.select({ count: count() }) (سطر 739)
   • count() (سطر 739)
   • db.select({ count: count() }).from(frontendErrors) (سطر 740)
   • db.select({ count: count() }) (سطر 740)
   • count() (سطر 740)
   • Math.ceil(total / limit) (سطر 744)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.updateFrontendError
🔢 الأسطر: 754-761
⚡ Async: نعم
🔑 الوسائط:
   • id: string
   • updates: Partial<{ id: string; createdAt: Date | null; updatedAt: Date | null; userId: string | null; type: "javascript" | "react" | "network" | "navigation" | "user_action" | "component"; message: string; resolved: boolean | null; timestamp: Date | null; component: string | null; url: string; action: string | null; severity: "low" | "medium" | "high" | "critical"; sessionId: string | null; userAgent: string | null; stack: string | null; browserInfo: unknown; appState: unknown; errorBoundary: boolean | null; resolvedBy: string | null; resolvedAt: Date | null; occurrenceCount: number | null; lastOccurrence: Date | null; }>
📞 الاستدعاءات:
   • db
      .update(frontendErrors)
      .set(updates)
      .where(eq(frontendErrors.id, id))
      .returning() (سطر 755)
   • db
      .update(frontendErrors)
      .set(updates)
      .where(eq(frontendErrors.id, id)) (سطر 755)
   • db
      .update(frontendErrors)
      .set(updates) (سطر 755)
   • db
      .update(frontendErrors) (سطر 755)
   • eq(frontendErrors.id, id) (سطر 758)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.getFrontendErrorStats
🔢 الأسطر: 763-803
⚡ Async: نعم
📞 الاستدعاءات:
   • Date.now() (سطر 771)
   • Promise.all([
      db.select({ count: count() }).from(frontendErrors),
      db.select({
        type: frontendErrors.type,
        count: count()
      }).from(frontendErrors).groupBy(frontendErrors.type),
      db.select({
        severity: frontendErrors.severity,
        count: count()
      }).from(frontendErrors).groupBy(frontendErrors.severity),
      db.select({ count: count() }).from(frontendErrors).where(eq(frontendErrors.resolved, true)),
      db.select({ count: count() }).from(frontendErrors).where(eq(frontendErrors.resolved, false)),
      db.select({ count: count() }).from(frontendErrors).where(gte(frontendErrors.timestamp, oneDayAgo))
    ]) (سطر 780)
   • db.select({ count: count() }).from(frontendErrors) (سطر 781)
   • db.select({ count: count() }) (سطر 781)
   • count() (سطر 781)
   • db.select({
        type: frontendErrors.type,
        count: count()
      }).from(frontendErrors).groupBy(frontendErrors.type) (سطر 782)
   • db.select({
        type: frontendErrors.type,
        count: count()
      }).from(frontendErrors) (سطر 782)
   • db.select({
        type: frontendErrors.type,
        count: count()
      }) (سطر 782)
   • count() (سطر 784)
   • db.select({
        severity: frontendErrors.severity,
        count: count()
      }).from(frontendErrors).groupBy(frontendErrors.severity) (سطر 786)
   • db.select({
        severity: frontendErrors.severity,
        count: count()
      }).from(frontendErrors) (سطر 786)
   • db.select({
        severity: frontendErrors.severity,
        count: count()
      }) (سطر 786)
   • count() (سطر 788)
   • db.select({ count: count() }).from(frontendErrors).where(eq(frontendErrors.resolved, true)) (سطر 790)
   • db.select({ count: count() }).from(frontendErrors) (سطر 790)
   • db.select({ count: count() }) (سطر 790)
   • count() (سطر 790)
   • eq(frontendErrors.resolved, true) (سطر 790)
   • db.select({ count: count() }).from(frontendErrors).where(eq(frontendErrors.resolved, false)) (سطر 791)
   • db.select({ count: count() }).from(frontendErrors) (سطر 791)
   • db.select({ count: count() }) (سطر 791)
   • count() (سطر 791)
   • eq(frontendErrors.resolved, false) (سطر 791)
   • db.select({ count: count() }).from(frontendErrors).where(gte(frontendErrors.timestamp, oneDayAgo)) (سطر 792)
   • db.select({ count: count() }).from(frontendErrors) (سطر 792)
   • db.select({ count: count() }) (سطر 792)
   • count() (سطر 792)
   • gte(frontendErrors.timestamp, oneDayAgo) (سطر 792)
   • typeStats.map(stat => ({ type: stat.type, count: stat.count })) (سطر 797)
   • severityStats.map(stat => ({ severity: stat.severity, count: stat.count })) (سطر 798)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.createUserActivity
🔢 الأسطر: 806-809
⚡ Async: نعم
🔑 الوسائط:
   • activity: { sessionId: string; userAgent: string; browserInfo: unknown; activityType: "search" | "navigation" | "click" | "form_input" | "form_submit" | "filter" | "scroll" | "hover" | "focus" | "blur" | "key_press" | "page_view" | "session_start" | "session_end" | "file_upload" | "file_download" | "copy" | "paste" | "drag" | "drop"; page: string; id?: string | undefined; userId?: string | null | undefined; timestamp?: Date | null | undefined; metadata?: unknown; targetElement?: string | null | undefined; targetText?: string | null | undefined; targetType?: string | null | undefined; sourceElement?: string | null | undefined; interactionMode?: "mouse" | "keyboard" | "touch" | "voice" | "other" | null | undefined; value?: string | null | undefined; viewport?: unknown; coordinates?: unknown; duration?: number | null | undefined; pageDuration?: number | null | undefined; scrollPosition?: number | null | undefined; ipAddress?: string | null | undefined; referrer?: string | null | undefined; batchId?: string | null | undefined; }
📞 الاستدعاءات:
   • db.insert(userActivities).values(activity).returning() (سطر 807)
   • db.insert(userActivities).values(activity) (سطر 807)
   • db.insert(userActivities) (سطر 807)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.createUserActivitiesBatch
🔢 الأسطر: 811-818
⚡ Async: نعم
🔑 الوسائط:
   • activities: { sessionId: string; userAgent: string; browserInfo: unknown; activityType: "search" | "navigation" | "click" | "form_input" | "form_submit" | "filter" | "scroll" | "hover" | "focus" | "blur" | "key_press" | "page_view" | "session_start" | "session_end" | "file_upload" | "file_download" | "copy" | "paste" | "drag" | "drop"; page: string; id?: string | undefined; userId?: string | null | undefined; timestamp?: Date | null | undefined; metadata?: unknown; targetElement?: string | null | undefined; targetText?: string | null | undefined; targetType?: string | null | undefined; sourceElement?: string | null | undefined; interactionMode?: "mouse" | "keyboard" | "touch" | "voice" | "other" | null | undefined; value?: string | null | undefined; viewport?: unknown; coordinates?: unknown; duration?: number | null | undefined; pageDuration?: number | null | undefined; scrollPosition?: number | null | undefined; ipAddress?: string | null | undefined; referrer?: string | null | undefined; batchId?: string | null | undefined; }[]
📞 الاستدعاءات:
   • db.insert(userActivities).values(activities).returning() (سطر 816)
   • db.insert(userActivities).values(activities) (سطر 816)
   • db.insert(userActivities) (سطر 816)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.getUserActivities
🔢 الأسطر: 820-890
⚡ Async: نعم
🔑 الوسائط:
   • options: { userId?: string | undefined; sessionId?: string | undefined; page?: number | undefined; limit?: number | undefined; filters?: { activityType?: string | undefined; pageUrl?: string | undefined; startDate?: string | undefined; endDate?: string | undefined; } | undefined; } | undefined
📞 الاستدعاءات:
   • conditions.push(eq(userActivities.userId, options.userId)) (سطر 845)
   • eq(userActivities.userId, options.userId) (سطر 845)
   • conditions.push(eq(userActivities.sessionId, options.sessionId)) (سطر 848)
   • eq(userActivities.sessionId, options.sessionId) (سطر 848)
   • conditions.push(eq(userActivities.activityType, filters.activityType as any)) (سطر 851)
   • eq(userActivities.activityType, filters.activityType as any) (سطر 851)
   • conditions.push(like(userActivities.page, `%${filters.pageUrl}%`)) (سطر 854)
   • like(userActivities.page, `%${filters.pageUrl}%`) (سطر 854)
   • conditions.push(gte(userActivities.timestamp, new Date(filters.startDate))) (سطر 857)
   • gte(userActivities.timestamp, new Date(filters.startDate)) (سطر 857)
   • conditions.push(lt(userActivities.timestamp, new Date(filters.endDate))) (سطر 860)
   • lt(userActivities.timestamp, new Date(filters.endDate)) (سطر 860)
   • and(...conditions) (سطر 863)
   • Promise.all([
      whereCondition 
        ? db.select().from(userActivities)
            .where(whereCondition)
            .orderBy(desc(userActivities.timestamp))
            .limit(limit)
            .offset(offset)
        : db.select().from(userActivities)
            .orderBy(desc(userActivities.timestamp))
            .limit(limit)
            .offset(offset),
      whereCondition
        ? db.select({ count: count() }).from(userActivities).where(whereCondition)
        : db.select({ count: count() }).from(userActivities)
    ]) (سطر 865)
   • db.select().from(userActivities)
            .where(whereCondition)
            .orderBy(desc(userActivities.timestamp))
            .limit(limit)
            .offset(offset) (سطر 867)
   • db.select().from(userActivities)
            .where(whereCondition)
            .orderBy(desc(userActivities.timestamp))
            .limit(limit) (سطر 867)
   • db.select().from(userActivities)
            .where(whereCondition)
            .orderBy(desc(userActivities.timestamp)) (سطر 867)
   • db.select().from(userActivities)
            .where(whereCondition) (سطر 867)
   • db.select().from(userActivities) (سطر 867)
   • db.select() (سطر 867)
   • desc(userActivities.timestamp) (سطر 869)
   • db.select().from(userActivities)
            .orderBy(desc(userActivities.timestamp))
            .limit(limit)
            .offset(offset) (سطر 872)
   • db.select().from(userActivities)
            .orderBy(desc(userActivities.timestamp))
            .limit(limit) (سطر 872)
   • db.select().from(userActivities)
            .orderBy(desc(userActivities.timestamp)) (سطر 872)
   • db.select().from(userActivities) (سطر 872)
   • db.select() (سطر 872)
   • desc(userActivities.timestamp) (سطر 873)
   • db.select({ count: count() }).from(userActivities).where(whereCondition) (سطر 877)
   • db.select({ count: count() }).from(userActivities) (سطر 877)
   • db.select({ count: count() }) (سطر 877)
   • count() (سطر 877)
   • db.select({ count: count() }).from(userActivities) (سطر 878)
   • db.select({ count: count() }) (سطر 878)
   • count() (سطر 878)
   • Math.ceil(total / limit) (سطر 882)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.getUserActivityStats
🔢 الأسطر: 892-977
⚡ Async: نعم
🔑 الوسائط:
   • options: { userId?: string | undefined; sessionId?: string | undefined; timeframe?: "24h" | "7d" | "30d" | undefined; } | undefined
📞 الاستدعاءات:
   • gte(userActivities.timestamp, new Date(now.getTime() - 24 * 60 * 60 * 1000)) (سطر 909)
   • now.getTime() (سطر 909)
   • gte(userActivities.timestamp, new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000)) (سطر 912)
   • now.getTime() (سطر 912)
   • gte(userActivities.timestamp, new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000)) (سطر 915)
   • now.getTime() (سطر 915)
   • gte(userActivities.timestamp, new Date(now.getTime() - 24 * 60 * 60 * 1000)) (سطر 918)
   • now.getTime() (سطر 918)
   • baseConditions.push(eq(userActivities.userId, options.userId)) (سطر 923)
   • eq(userActivities.userId, options.userId) (سطر 923)
   • baseConditions.push(eq(userActivities.sessionId, options.sessionId)) (سطر 926)
   • eq(userActivities.sessionId, options.sessionId) (سطر 926)
   • baseConditions.push(timeCondition) (سطر 928)
   • and(...baseConditions) (سطر 930)
   • Promise.all([
      db.select({ count: count() }).from(userActivities).where(whereCondition),
      db.select({
        type: userActivities.activityType,
        count: count()
      }).from(userActivities).where(whereCondition).groupBy(userActivities.activityType),
      db.select({
        page: userActivities.page,
        count: count(),
        avgDuration: sql<number>`AVG(${userActivities.pageDuration})`
      }).from(userActivities).where(whereCondition).groupBy(userActivities.page),
      db.select({
        sessions: sql<number>`COUNT(DISTINCT ${userActivities.sessionId})`,
        avgSessionDuration: sql<number>`AVG(${userActivities.duration})`
      }).from(userActivities).where(whereCondition),
      db.select({
        element: userActivities.targetElement,
        count: count()
      }).from(userActivities)
        .where(and(whereCondition, isNotNull(userActivities.targetElement)))
        .groupBy(userActivities.targetElement)
        .orderBy(desc(count()))
        .limit(10)
    ]) (سطر 938)
   • db.select({ count: count() }).from(userActivities).where(whereCondition) (سطر 939)
   • db.select({ count: count() }).from(userActivities) (سطر 939)
   • db.select({ count: count() }) (سطر 939)
   • count() (سطر 939)
   • db.select({
        type: userActivities.activityType,
        count: count()
      }).from(userActivities).where(whereCondition).groupBy(userActivities.activityType) (سطر 940)
   • db.select({
        type: userActivities.activityType,
        count: count()
      }).from(userActivities).where(whereCondition) (سطر 940)
   • db.select({
        type: userActivities.activityType,
        count: count()
      }).from(userActivities) (سطر 940)
   • db.select({
        type: userActivities.activityType,
        count: count()
      }) (سطر 940)
   • count() (سطر 942)
   • db.select({
        page: userActivities.page,
        count: count(),
        avgDuration: sql<number>`AVG(${userActivities.pageDuration})`
      }).from(userActivities).where(whereCondition).groupBy(userActivities.page) (سطر 944)
   • db.select({
        page: userActivities.page,
        count: count(),
        avgDuration: sql<number>`AVG(${userActivities.pageDuration})`
      }).from(userActivities).where(whereCondition) (سطر 944)
   • db.select({
        page: userActivities.page,
        count: count(),
        avgDuration: sql<number>`AVG(${userActivities.pageDuration})`
      }).from(userActivities) (سطر 944)
   • db.select({
        page: userActivities.page,
        count: count(),
        avgDuration: sql<number>`AVG(${userActivities.pageDuration})`
      }) (سطر 944)
   • count() (سطر 946)
   • db.select({
        sessions: sql<number>`COUNT(DISTINCT ${userActivities.sessionId})`,
        avgSessionDuration: sql<number>`AVG(${userActivities.duration})`
      }).from(userActivities).where(whereCondition) (سطر 949)
   • db.select({
        sessions: sql<number>`COUNT(DISTINCT ${userActivities.sessionId})`,
        avgSessionDuration: sql<number>`AVG(${userActivities.duration})`
      }).from(userActivities) (سطر 949)
   • db.select({
        sessions: sql<number>`COUNT(DISTINCT ${userActivities.sessionId})`,
        avgSessionDuration: sql<number>`AVG(${userActivities.duration})`
      }) (سطر 949)
   • db.select({
        element: userActivities.targetElement,
        count: count()
      }).from(userActivities)
        .where(and(whereCondition, isNotNull(userActivities.targetElement)))
        .groupBy(userActivities.targetElement)
        .orderBy(desc(count()))
        .limit(10) (سطر 953)
   • db.select({
        element: userActivities.targetElement,
        count: count()
      }).from(userActivities)
        .where(and(whereCondition, isNotNull(userActivities.targetElement)))
        .groupBy(userActivities.targetElement)
        .orderBy(desc(count())) (سطر 953)
   • db.select({
        element: userActivities.targetElement,
        count: count()
      }).from(userActivities)
        .where(and(whereCondition, isNotNull(userActivities.targetElement)))
        .groupBy(userActivities.targetElement) (سطر 953)
   • db.select({
        element: userActivities.targetElement,
        count: count()
      }).from(userActivities)
        .where(and(whereCondition, isNotNull(userActivities.targetElement))) (سطر 953)
   • db.select({
        element: userActivities.targetElement,
        count: count()
      }).from(userActivities) (سطر 953)
   • db.select({
        element: userActivities.targetElement,
        count: count()
      }) (سطر 953)
   • count() (سطر 955)
   • and(whereCondition, isNotNull(userActivities.targetElement)) (سطر 957)
   • isNotNull(userActivities.targetElement) (سطر 957)
   • desc(count()) (سطر 959)
   • count() (سطر 959)
   • typeStats.map(stat => ({ type: stat.type, count: stat.count })) (سطر 965)
   • pageStats.map(stat => ({ 
        page: stat.page, 
        count: stat.count, 
        avgDuration: stat.avgDuration || 0 
      })) (سطر 966)
   • interactionStats
        .filter(stat => stat.element)
        .map(stat => ({ element: stat.element!, count: stat.count })) (سطر 973)
   • interactionStats
        .filter(stat => stat.element) (سطر 973)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.getSessionActivities
🔢 الأسطر: 979-985
⚡ Async: نعم
🔑 الوسائط:
   • sessionId: string
📞 الاستدعاءات:
   • db
      .select()
      .from(userActivities)
      .where(eq(userActivities.sessionId, sessionId))
      .orderBy(userActivities.timestamp) (سطر 980)
   • db
      .select()
      .from(userActivities)
      .where(eq(userActivities.sessionId, sessionId)) (سطر 980)
   • db
      .select()
      .from(userActivities) (سطر 980)
   • db
      .select() (سطر 980)
   • eq(userActivities.sessionId, sessionId) (سطر 983)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.getUserPageDurations
🔢 الأسطر: 987-1021
⚡ Async: نعم
🔑 الوسائط:
   • userId: string
   • timeframe: string | undefined
📞 الاستدعاءات:
   • gte(userActivities.timestamp, new Date(now.getTime() - timeOffset)) (سطر 997)
   • now.getTime() (سطر 997)
   • eq(userActivities.userId, userId) (سطر 1000)
   • conditions.push(timeCondition) (سطر 1002)
   • db
      .select({
        page: userActivities.page,
        totalDuration: sql<number>`SUM(${userActivities.pageDuration})`,
        visits: count()
      })
      .from(userActivities)
      .where(and(...conditions))
      .groupBy(userActivities.page)
      .orderBy(desc(sql<number>`SUM(${userActivities.pageDuration})`)) (سطر 1005)
   • db
      .select({
        page: userActivities.page,
        totalDuration: sql<number>`SUM(${userActivities.pageDuration})`,
        visits: count()
      })
      .from(userActivities)
      .where(and(...conditions))
      .groupBy(userActivities.page) (سطر 1005)
   • db
      .select({
        page: userActivities.page,
        totalDuration: sql<number>`SUM(${userActivities.pageDuration})`,
        visits: count()
      })
      .from(userActivities)
      .where(and(...conditions)) (سطر 1005)
   • db
      .select({
        page: userActivities.page,
        totalDuration: sql<number>`SUM(${userActivities.pageDuration})`,
        visits: count()
      })
      .from(userActivities) (سطر 1005)
   • db
      .select({
        page: userActivities.page,
        totalDuration: sql<number>`SUM(${userActivities.pageDuration})`,
        visits: count()
      }) (سطر 1005)
   • count() (سطر 1009)
   • and(...conditions) (سطر 1012)
   • desc(sql<number>`SUM(${userActivities.pageDuration})`) (سطر 1014)
   • result.map(row => ({
      page: row.page,
      totalDuration: row.totalDuration || 0,
      visits: row.visits
    })) (سطر 1016)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.getApplicationStats
🔢 الأسطر: 1024-1041
⚡ Async: نعم
🔑 الوسائط:
   • userId: string
📞 الاستدعاءات:
   • db
      .select()
      .from(applications)
      .where(eq(applications.userId, userId)) (سطر 1030)
   • db
      .select()
      .from(applications) (سطر 1030)
   • db
      .select() (سطر 1030)
   • eq(applications.userId, userId) (سطر 1033)
   • apps.filter(app => app.status === 'running') (سطر 1037)
   • apps.filter(app => app.status === 'stopped') (سطر 1038)
   • apps.filter(app => app.status === 'error') (سطر 1039)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.getSslStats
🔢 الأسطر: 1043-1065
⚡ Async: نعم
📞 الاستدعاءات:
   • db.select().from(sslCertificates) (سطر 1049)
   • db.select() (سطر 1049)
   • now.getTime() (سطر 1051)
   • certs.filter(cert => cert.status === 'valid' && cert.expiresAt && cert.expiresAt > now) (سطر 1055)
   • certs.filter(
        cert =>
          cert.status === 'valid' &&
          cert.expiresAt &&
          cert.expiresAt <= thirtyDaysFromNow &&
          cert.expiresAt > now
      ) (سطر 1056)
   • certs.filter(cert => cert.expiresAt && cert.expiresAt <= now) (سطر 1063)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.testConnection
🔢 الأسطر: 1068-1075
⚡ Async: نعم
📞 الاستدعاءات:
   • db.select().from(users).limit(1) (سطر 1071)
   • db.select().from(users) (سطر 1071)
   • db.select() (سطر 1071)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.getFile
🔢 الأسطر: 1078-1084
⚡ Async: نعم
🔑 الوسائط:
   • id: string
   • userId: string
📞 الاستدعاءات:
   • db
      .select()
      .from(files)
      .where(and(eq(files.id, id), eq(files.ownerId, userId))) (سطر 1079)
   • db
      .select()
      .from(files) (سطر 1079)
   • db
      .select() (سطر 1079)
   • and(eq(files.id, id), eq(files.ownerId, userId)) (سطر 1082)
   • eq(files.id, id) (سطر 1082)
   • eq(files.ownerId, userId) (سطر 1082)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.getFiles
🔢 الأسطر: 1086-1099
⚡ Async: نعم
🔑 الوسائط:
   • parentId: string | null
   • userId: string
📞 الاستدعاءات:
   • eq(files.ownerId, userId) (سطر 1087)
   • conditions.push(isNull(files.parentId)) (سطر 1089)
   • isNull(files.parentId) (سطر 1089)
   • conditions.push(eq(files.parentId, parentId)) (سطر 1091)
   • eq(files.parentId, parentId) (سطر 1091)
   • db
      .select()
      .from(files)
      .where(and(...conditions))
      .orderBy(desc(files.createdAt)) (سطر 1094)
   • db
      .select()
      .from(files)
      .where(and(...conditions)) (سطر 1094)
   • db
      .select()
      .from(files) (سطر 1094)
   • db
      .select() (سطر 1094)
   • and(...conditions) (سطر 1097)
   • desc(files.createdAt) (سطر 1098)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.createFile
🔢 الأسطر: 1101-1104
⚡ Async: نعم
🔑 الوسائط:
   • file: { name: string; path: string; type: "file" | "folder"; ownerId: string; id?: string | undefined; size?: number | null | undefined; createdAt?: Date | null | undefined; updatedAt?: Date | null | undefined; content?: string | null | undefined; metadata?: unknown; parentId?: string | null | undefined; filePath?: string | null | undefined; mimeType?: string | null | undefined; checksum?: string | null | undefined; isPublic?: boolean | null | undefined; tags?: string[] | null | undefined; }
📞 الاستدعاءات:
   • db.insert(files).values(file).returning() (سطر 1102)
   • db.insert(files).values(file) (سطر 1102)
   • db.insert(files) (سطر 1102)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.updateFile
🔢 الأسطر: 1106-1124
⚡ Async: نعم
🔑 الوسائط:
   • id: string
   • updates: Partial<{ name: string; path: string; type: "file" | "folder"; ownerId: string; id?: string | undefined; size?: number | null | undefined; createdAt?: Date | null | undefined; updatedAt?: Date | null | undefined; content?: string | null | undefined; metadata?: unknown; parentId?: string | null | undefined; filePath?: string | null | undefined; mimeType?: string | null | undefined; checksum?: string | null | undefined; isPublic?: boolean | null | undefined; tags?: string[] | null | undefined; }>
   • userId: string
📞 الاستدعاءات:
   • this.checkUserFileAccess(id, userId, 'write') (سطر 1108)
   • db
      .update(files)
      .set({ ...updates, updatedAt: new Date() })
      .where(eq(files.id, id))
      .returning() (سطر 1113)
   • db
      .update(files)
      .set({ ...updates, updatedAt: new Date() })
      .where(eq(files.id, id)) (سطر 1113)
   • db
      .update(files)
      .set({ ...updates, updatedAt: new Date() }) (سطر 1113)
   • db
      .update(files) (سطر 1113)
   • eq(files.id, id) (سطر 1116)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.deleteFile
🔢 الأسطر: 1126-1148
⚡ Async: نعم
🔑 الوسائط:
   • id: string
   • userId: string
📞 الاستدعاءات:
   • this.checkUserFileAccess(id, userId, 'delete') (سطر 1128)
   • db.transaction(async (tx) => {
      // Delete related records first to avoid foreign key constraints
      await tx.delete(filePermissions).where(eq(filePermissions.fileId, id));
      await tx.delete(fileLocks).where(eq(fileLocks.fileId, id));
      await tx.delete(fileBackups).where(eq(fileBackups.fileId, id));
      await tx.delete(fileAuditLogs).where(eq(fileAuditLogs.fileId, id));

      // Finally delete the file
      const result = await tx.delete(files).where(eq(files.id, id));

      if (result.rowCount === 0) {
        throw new Error('File not found or could not be deleted');
      }
    }) (سطر 1134)
   • tx.delete(filePermissions).where(eq(filePermissions.fileId, id)) (سطر 1136)
   • tx.delete(filePermissions) (سطر 1136)
   • eq(filePermissions.fileId, id) (سطر 1136)
   • tx.delete(fileLocks).where(eq(fileLocks.fileId, id)) (سطر 1137)
   • tx.delete(fileLocks) (سطر 1137)
   • eq(fileLocks.fileId, id) (سطر 1137)
   • tx.delete(fileBackups).where(eq(fileBackups.fileId, id)) (سطر 1138)
   • tx.delete(fileBackups) (سطر 1138)
   • eq(fileBackups.fileId, id) (سطر 1138)
   • tx.delete(fileAuditLogs).where(eq(fileAuditLogs.fileId, id)) (سطر 1139)
   • tx.delete(fileAuditLogs) (سطر 1139)
   • eq(fileAuditLogs.fileId, id) (سطر 1139)
   • tx.delete(files).where(eq(files.id, id)) (سطر 1142)
   • tx.delete(files) (سطر 1142)
   • eq(files.id, id) (سطر 1142)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.getUserFiles
🔢 الأسطر: 1150-1161
⚡ Async: نعم
🔑 الوسائط:
   • userId: string
   • type: "file" | "folder" | undefined
📞 الاستدعاءات:
   • eq(files.ownerId, userId) (سطر 1151)
   • conditions.push(eq(files.type, type)) (سطر 1153)
   • eq(files.type, type) (سطر 1153)
   • db
      .select()
      .from(files)
      .where(and(...conditions))
      .orderBy(desc(files.createdAt)) (سطر 1156)
   • db
      .select()
      .from(files)
      .where(and(...conditions)) (سطر 1156)
   • db
      .select()
      .from(files) (سطر 1156)
   • db
      .select() (سطر 1156)
   • and(...conditions) (سطر 1159)
   • desc(files.createdAt) (سطر 1160)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.searchFiles
🔢 الأسطر: 1164-1198
⚡ Async: نعم
🔑 الوسائط:
   • userId: string
   • query: string
   • filters: { type?: "file" | "folder" | undefined; tags?: string[] | undefined; } | undefined
📞 الاستدعاءات:
   • eq(files.ownerId, userId) (سطر 1165)
   • query.trim() (سطر 1168)
   • conditions.push(
        or(
          ilike(files.name, `%${query}%`),
          ilike(files.path, `%${query}%`)
        )!
      ) (سطر 1169)
   • or(
          ilike(files.name, `%${query}%`),
          ilike(files.path, `%${query}%`)
        ) (سطر 1170)
   • ilike(files.name, `%${query}%`) (سطر 1171)
   • ilike(files.path, `%${query}%`) (سطر 1172)
   • conditions.push(eq(files.type, filters.type)) (سطر 1179)
   • eq(files.type, filters.type) (سطر 1179)
   • filters.tags.map(
        tag => sql`${tag} = ANY(${files.tags})`
      ) (سطر 1185)
   • conditions.push(or(...tagConditions)!) (سطر 1189)
   • or(...tagConditions) (سطر 1189)
   • db
      .select()
      .from(files)
      .where(and(...conditions))
      .orderBy(desc(files.createdAt)) (سطر 1193)
   • db
      .select()
      .from(files)
      .where(and(...conditions)) (سطر 1193)
   • db
      .select()
      .from(files) (سطر 1193)
   • db
      .select() (سطر 1193)
   • and(...conditions) (سطر 1196)
   • desc(files.createdAt) (سطر 1197)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.getFileByPath
🔢 الأسطر: 1200-1206
⚡ Async: نعم
🔑 الوسائط:
   • path: string
   • userId: string
📞 الاستدعاءات:
   • db
      .select()
      .from(files)
      .where(and(eq(files.path, path), eq(files.ownerId, userId))) (سطر 1201)
   • db
      .select()
      .from(files) (سطر 1201)
   • db
      .select() (سطر 1201)
   • and(eq(files.path, path), eq(files.ownerId, userId)) (سطر 1204)
   • eq(files.path, path) (سطر 1204)
   • eq(files.ownerId, userId) (سطر 1204)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.getTrashFiles
🔢 الأسطر: 1209-1215
⚡ Async: نعم
🔑 الوسائط:
   • userId: string
📞 الاستدعاءات:
   • db
      .select()
      .from(fileTrash)
      .where(eq(fileTrash.ownerId, userId))
      .orderBy(desc(fileTrash.deletedAt)) (سطر 1210)
   • db
      .select()
      .from(fileTrash)
      .where(eq(fileTrash.ownerId, userId)) (سطر 1210)
   • db
      .select()
      .from(fileTrash) (سطر 1210)
   • db
      .select() (سطر 1210)
   • eq(fileTrash.ownerId, userId) (سطر 1213)
   • desc(fileTrash.deletedAt) (سطر 1214)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.moveToTrash
🔢 الأسطر: 1217-1266
⚡ Async: نعم
🔑 الوسائط:
   • fileId: string
   • userId: string
📞 الاستدعاءات:
   • this.checkUserFileAccess(fileId, userId, 'delete') (سطر 1219)
   • db
      .select()
      .from(files)
      .where(eq(files.id, fileId)) (سطر 1225)
   • db
      .select()
      .from(files) (سطر 1225)
   • db
      .select() (سطر 1225)
   • eq(files.id, fileId) (سطر 1228)
   • db.transaction(async (tx) => {
      // Create trash entry
      const [trashEntry] = await tx
        .insert(fileTrash)
        .values({
          originalFileId: file.id,
          originalPath: file.path,
          name: file.name,
          type: file.type,
          filePath: file.filePath,
          size: file.size,
          mimeType: file.mimeType,
          content: file.content,
          checksum: file.checksum,
          ownerId: file.ownerId,
          deletedBy: userId,
          metadata: file.metadata,
        })
        .returning();

      // Delete related records first to avoid foreign key constraints
      await tx.delete(filePermissions).where(eq(filePermissions.fileId, fileId));
      await tx.delete(fileLocks).where(eq(fileLocks.fileId, fileId));
      await tx.delete(fileBackups).where(eq(fileBackups.fileId, fileId));
      await tx.delete(fileAuditLogs).where(eq(fileAuditLogs.fileId, fileId));

      // Finally delete the file
      await tx.delete(files).where(eq(files.id, fileId));

      return trashEntry;
    }) (سطر 1235)
   • tx
        .insert(fileTrash)
        .values({
          originalFileId: file.id,
          originalPath: file.path,
          name: file.name,
          type: file.type,
          filePath: file.filePath,
          size: file.size,
          mimeType: file.mimeType,
          content: file.content,
          checksum: file.checksum,
          ownerId: file.ownerId,
          deletedBy: userId,
          metadata: file.metadata,
        })
        .returning() (سطر 1237)
   • tx
        .insert(fileTrash)
        .values({
          originalFileId: file.id,
          originalPath: file.path,
          name: file.name,
          type: file.type,
          filePath: file.filePath,
          size: file.size,
          mimeType: file.mimeType,
          content: file.content,
          checksum: file.checksum,
          ownerId: file.ownerId,
          deletedBy: userId,
          metadata: file.metadata,
        }) (سطر 1237)
   • tx
        .insert(fileTrash) (سطر 1237)
   • tx.delete(filePermissions).where(eq(filePermissions.fileId, fileId)) (سطر 1256)
   • tx.delete(filePermissions) (سطر 1256)
   • eq(filePermissions.fileId, fileId) (سطر 1256)
   • tx.delete(fileLocks).where(eq(fileLocks.fileId, fileId)) (سطر 1257)
   • tx.delete(fileLocks) (سطر 1257)
   • eq(fileLocks.fileId, fileId) (سطر 1257)
   • tx.delete(fileBackups).where(eq(fileBackups.fileId, fileId)) (سطر 1258)
   • tx.delete(fileBackups) (سطر 1258)
   • eq(fileBackups.fileId, fileId) (سطر 1258)
   • tx.delete(fileAuditLogs).where(eq(fileAuditLogs.fileId, fileId)) (سطر 1259)
   • tx.delete(fileAuditLogs) (سطر 1259)
   • eq(fileAuditLogs.fileId, fileId) (سطر 1259)
   • tx.delete(files).where(eq(files.id, fileId)) (سطر 1262)
   • tx.delete(files) (سطر 1262)
   • eq(files.id, fileId) (سطر 1262)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.restoreFromTrash
🔢 الأسطر: 1268-1323
⚡ Async: نعم
🔑 الوسائط:
   • trashId: string
   • userId: string
📞 الاستدعاءات:
   • db
      .select()
      .from(fileTrash)
      .where(
        and(
          eq(fileTrash.id, trashId),
          eq(fileTrash.ownerId, userId)
        )
      ) (سطر 1270)
   • db
      .select()
      .from(fileTrash) (سطر 1270)
   • db
      .select() (سطر 1270)
   • and(
          eq(fileTrash.id, trashId),
          eq(fileTrash.ownerId, userId)
        ) (سطر 1274)
   • eq(fileTrash.id, trashId) (سطر 1275)
   • eq(fileTrash.ownerId, userId) (سطر 1276)
   • db.transaction(async (tx) => {
      // Check if a file with the same path already exists
      const [existingFile] = await tx
        .select()
        .from(files)
        .where(
          and(
            eq(files.path, trashEntry.originalPath),
            eq(files.ownerId, userId)
          )
        );

      if (existingFile) {
        throw new Error('A file with the same path already exists. Please remove or rename it first.');
      }

      // Restore the file
      const [restoredFile] = await tx
        .insert(files)
        .values({
          name: trashEntry.name,
          type: trashEntry.type,
          path: trashEntry.originalPath,
          filePath: trashEntry.filePath,
          size: trashEntry.size,
          mimeType: trashEntry.mimeType,
          content: trashEntry.content,
          checksum: trashEntry.checksum,
          ownerId: trashEntry.ownerId,
          metadata: trashEntry.metadata,
        })
        .returning();

      // Remove from trash
      await tx.delete(fileTrash).where(eq(fileTrash.id, trashId));

      return restoredFile;
    }) (سطر 1285)
   • tx
        .select()
        .from(files)
        .where(
          and(
            eq(files.path, trashEntry.originalPath),
            eq(files.ownerId, userId)
          )
        ) (سطر 1287)
   • tx
        .select()
        .from(files) (سطر 1287)
   • tx
        .select() (سطر 1287)
   • and(
            eq(files.path, trashEntry.originalPath),
            eq(files.ownerId, userId)
          ) (سطر 1291)
   • eq(files.path, trashEntry.originalPath) (سطر 1292)
   • eq(files.ownerId, userId) (سطر 1293)
   • tx
        .insert(files)
        .values({
          name: trashEntry.name,
          type: trashEntry.type,
          path: trashEntry.originalPath,
          filePath: trashEntry.filePath,
          size: trashEntry.size,
          mimeType: trashEntry.mimeType,
          content: trashEntry.content,
          checksum: trashEntry.checksum,
          ownerId: trashEntry.ownerId,
          metadata: trashEntry.metadata,
        })
        .returning() (سطر 1302)
   • tx
        .insert(files)
        .values({
          name: trashEntry.name,
          type: trashEntry.type,
          path: trashEntry.originalPath,
          filePath: trashEntry.filePath,
          size: trashEntry.size,
          mimeType: trashEntry.mimeType,
          content: trashEntry.content,
          checksum: trashEntry.checksum,
          ownerId: trashEntry.ownerId,
          metadata: trashEntry.metadata,
        }) (سطر 1302)
   • tx
        .insert(files) (سطر 1302)
   • tx.delete(fileTrash).where(eq(fileTrash.id, trashId)) (سطر 1319)
   • tx.delete(fileTrash) (سطر 1319)
   • eq(fileTrash.id, trashId) (سطر 1319)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.permanentDelete
🔢 الأسطر: 1325-1345
⚡ Async: نعم
🔑 الوسائط:
   • trashId: string
   • userId: string
📞 الاستدعاءات:
   • db
      .select()
      .from(fileTrash)
      .where(
        and(
          eq(fileTrash.id, trashId),
          eq(fileTrash.ownerId, userId)
        )
      ) (سطر 1327)
   • db
      .select()
      .from(fileTrash) (سطر 1327)
   • db
      .select() (سطر 1327)
   • and(
          eq(fileTrash.id, trashId),
          eq(fileTrash.ownerId, userId)
        ) (سطر 1331)
   • eq(fileTrash.id, trashId) (سطر 1332)
   • eq(fileTrash.ownerId, userId) (سطر 1333)
   • db.delete(fileTrash).where(eq(fileTrash.id, trashId)) (سطر 1341)
   • db.delete(fileTrash) (سطر 1341)
   • eq(fileTrash.id, trashId) (سطر 1341)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.emptyTrash
🔢 الأسطر: 1347-1349
⚡ Async: نعم
🔑 الوسائط:
   • userId: string
📞 الاستدعاءات:
   • db.delete(fileTrash).where(eq(fileTrash.ownerId, userId)) (سطر 1348)
   • db.delete(fileTrash) (سطر 1348)
   • eq(fileTrash.ownerId, userId) (سطر 1348)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.getFileBackups
🔢 الأسطر: 1352-1368
⚡ Async: نعم
🔑 الوسائط:
   • fileId: string
   • userId: string | undefined
📞 الاستدعاءات:
   • eq(fileBackups.fileId, fileId) (سطر 1353)
   • this.checkUserFileAccess(fileId, userId, 'read') (سطر 1357)
   • db
      .select()
      .from(fileBackups)
      .where(and(...conditions))
      .orderBy(desc(fileBackups.version)) (سطر 1363)
   • db
      .select()
      .from(fileBackups)
      .where(and(...conditions)) (سطر 1363)
   • db
      .select()
      .from(fileBackups) (سطر 1363)
   • db
      .select() (سطر 1363)
   • and(...conditions) (سطر 1366)
   • desc(fileBackups.version) (سطر 1367)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.createBackup
🔢 الأسطر: 1370-1406
⚡ Async: نعم
🔑 الوسائط:
   • fileId: string
   • content: string
   • userId: string
📞 الاستدعاءات:
   • this.checkUserFileAccess(fileId, userId, 'write') (سطر 1372)
   • db
      .select()
      .from(files)
      .where(eq(files.id, fileId)) (سطر 1378)
   • db
      .select()
      .from(files) (سطر 1378)
   • db
      .select() (سطر 1378)
   • eq(files.id, fileId) (سطر 1381)
   • this.getNextVersionNumber(fileId) (سطر 1388)
   • db
      .insert(fileBackups)
      .values({
        fileId,
        version,
        name: file.name,
        content,
        size: content.length,
        mimeType: file.mimeType,
        checksum: file.checksum,
        createdBy: userId,
        metadata: file.metadata,
      })
      .returning() (سطر 1390)
   • db
      .insert(fileBackups)
      .values({
        fileId,
        version,
        name: file.name,
        content,
        size: content.length,
        mimeType: file.mimeType,
        checksum: file.checksum,
        createdBy: userId,
        metadata: file.metadata,
      }) (سطر 1390)
   • db
      .insert(fileBackups) (سطر 1390)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.restoreBackup
🔢 الأسطر: 1408-1442
⚡ Async: نعم
🔑 الوسائط:
   • backupId: string
   • userId: string
📞 الاستدعاءات:
   • db
      .select()
      .from(fileBackups)
      .where(eq(fileBackups.id, backupId)) (سطر 1410)
   • db
      .select()
      .from(fileBackups) (سطر 1410)
   • db
      .select() (سطر 1410)
   • eq(fileBackups.id, backupId) (سطر 1413)
   • this.checkUserFileAccess(backup.fileId, userId, 'write') (سطر 1420)
   • db
      .update(files)
      .set({
        content: backup.content,
        size: backup.size,
        checksum: backup.checksum,
        updatedAt: new Date(),
      })
      .where(eq(files.id, backup.fileId))
      .returning() (سطر 1426)
   • db
      .update(files)
      .set({
        content: backup.content,
        size: backup.size,
        checksum: backup.checksum,
        updatedAt: new Date(),
      })
      .where(eq(files.id, backup.fileId)) (سطر 1426)
   • db
      .update(files)
      .set({
        content: backup.content,
        size: backup.size,
        checksum: backup.checksum,
        updatedAt: new Date(),
      }) (سطر 1426)
   • db
      .update(files) (سطر 1426)
   • eq(files.id, backup.fileId) (سطر 1434)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.getFilePermissions
🔢 الأسطر: 1445-1459
⚡ Async: نعم
🔑 الوسائط:
   • fileId: string
   • userId: string | undefined
📞 الاستدعاءات:
   • this.checkUserFileAccess(fileId, userId, 'admin') (سطر 1448)
   • db
      .select()
      .from(filePermissions)
      .where(eq(filePermissions.fileId, fileId))
      .orderBy(desc(filePermissions.createdAt)) (سطر 1454)
   • db
      .select()
      .from(filePermissions)
      .where(eq(filePermissions.fileId, fileId)) (سطر 1454)
   • db
      .select()
      .from(filePermissions) (سطر 1454)
   • db
      .select() (سطر 1454)
   • eq(filePermissions.fileId, fileId) (سطر 1457)
   • desc(filePermissions.createdAt) (سطر 1458)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.setFilePermission
🔢 الأسطر: 1461-1474
⚡ Async: نعم
🔑 الوسائط:
   • permission: { fileId: string; permission: "admin" | "read" | "write" | "delete"; grantedBy: string; id?: string | undefined; createdAt?: Date | null | undefined; updatedAt?: Date | null | undefined; userId?: string | null | undefined; expiresAt?: Date | null | undefined; userRole?: "admin" | "moderator" | "user" | "viewer" | null | undefined; }
   • userId: string
📞 الاستدعاءات:
   • this.checkUserFileAccess(permission.fileId, userId, 'admin') (سطر 1463)
   • db
      .insert(filePermissions)
      .values(permission)
      .returning() (سطر 1468)
   • db
      .insert(filePermissions)
      .values(permission) (سطر 1468)
   • db
      .insert(filePermissions) (سطر 1468)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.removeFilePermission
🔢 الأسطر: 1476-1497
⚡ Async: نعم
🔑 الوسائط:
   • permissionId: string
   • userId: string
📞 الاستدعاءات:
   • db
      .select()
      .from(filePermissions)
      .where(eq(filePermissions.id, permissionId)) (سطر 1478)
   • db
      .select()
      .from(filePermissions) (سطر 1478)
   • db
      .select() (سطر 1478)
   • eq(filePermissions.id, permissionId) (سطر 1481)
   • this.checkUserFileAccess(permission.fileId, userId, 'admin') (سطر 1488)
   • db.delete(filePermissions).where(eq(filePermissions.id, permissionId)) (سطر 1493)
   • db.delete(filePermissions) (سطر 1493)
   • eq(filePermissions.id, permissionId) (سطر 1493)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.checkFilePermission
🔢 الأسطر: 1499-1529
⚡ Async: نعم
🔑 الوسائط:
   • fileId: string
   • userId: string
   • permission: "read" | "write" | "delete"
📞 الاستدعاءات:
   • this.getFile(fileId, userId) (سطر 1501)
   • db
      .select()
      .from(filePermissions)
      .where(
        and(
          eq(filePermissions.fileId, fileId),
          eq(filePermissions.userId, userId),
          eq(filePermissions.permission, permission),
          or(
            isNull(filePermissions.expiresAt),
            gte(filePermissions.expiresAt, new Date())
          )
        )
      ) (سطر 1507)
   • db
      .select()
      .from(filePermissions) (سطر 1507)
   • db
      .select() (سطر 1507)
   • and(
          eq(filePermissions.fileId, fileId),
          eq(filePermissions.userId, userId),
          eq(filePermissions.permission, permission),
          or(
            isNull(filePermissions.expiresAt),
            gte(filePermissions.expiresAt, new Date())
          )
        ) (سطر 1511)
   • eq(filePermissions.fileId, fileId) (سطر 1512)
   • eq(filePermissions.userId, userId) (سطر 1513)
   • eq(filePermissions.permission, permission) (سطر 1514)
   • or(
            isNull(filePermissions.expiresAt),
            gte(filePermissions.expiresAt, new Date())
          ) (سطر 1515)
   • isNull(filePermissions.expiresAt) (سطر 1516)
   • gte(filePermissions.expiresAt, new Date()) (سطر 1517)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.lockFile
🔢 الأسطر: 1532-1592
⚡ Async: نعم
🔑 الوسائط:
   • fileId: string
   • userId: string
   • lockType: "read" | "write" | "exclusive"
   • ttl: number | undefined
📞 الاستدعاءات:
   • this.checkUserFileAccess(fileId, userId, requiredPermission) (سطر 1535)
   • this.cleanExpiredLocks(fileId) (سطر 1541)
   • this.getFileLocks(fileId) (سطر 1544)
   • existingLocks.filter(
      lock => !lock.expiresAt || lock.expiresAt > new Date()
    ) (سطر 1547)
   • activeLocks.some(lock => {
      // User can't have multiple locks of same type
      if (lock.userId === userId && lock.lockType === lockType) {
        throw new Error(`You already have a ${lockType} lock on this file`);
      }

      // Exclusive locks conflict with everything
      if (lock.lockType === 'exclusive' || lockType === 'exclusive') {
        return true;
      }

      // Write locks conflict with write/read locks
      if (lock.lockType === 'write' && (lockType === 'write' || lockType === 'read')) {
        return true;
      }

      if (lockType === 'write' && (lock.lockType === 'write' || lock.lockType === 'read')) {
        return true;
      }

      return false;
    }) (سطر 1552)
   • Date.now() (سطر 1579)
   • db
      .insert(fileLocks)
      .values({
        fileId,
        lockType,
        userId,
        expiresAt,
      })
      .returning() (سطر 1581)
   • db
      .insert(fileLocks)
      .values({
        fileId,
        lockType,
        userId,
        expiresAt,
      }) (سطر 1581)
   • db
      .insert(fileLocks) (سطر 1581)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.unlockFile
🔢 الأسطر: 1594-1616
⚡ Async: نعم
🔑 الوسائط:
   • fileId: string
   • userId: string
📞 الاستدعاءات:
   • this.checkUserFileAccess(fileId, userId, 'read') (سطر 1596)
   • this.cleanExpiredLocks(fileId) (سطر 1602)
   • db
      .delete(fileLocks)
      .where(
        and(
          eq(fileLocks.fileId, fileId),
          eq(fileLocks.userId, userId)
        )
      ) (سطر 1604)
   • db
      .delete(fileLocks) (سطر 1604)
   • and(
          eq(fileLocks.fileId, fileId),
          eq(fileLocks.userId, userId)
        ) (سطر 1607)
   • eq(fileLocks.fileId, fileId) (سطر 1608)
   • eq(fileLocks.userId, userId) (سطر 1609)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.getFileLocks
🔢 الأسطر: 1618-1624
⚡ Async: نعم
🔑 الوسائط:
   • fileId: string
📞 الاستدعاءات:
   • db
      .select()
      .from(fileLocks)
      .where(eq(fileLocks.fileId, fileId))
      .orderBy(desc(fileLocks.createdAt)) (سطر 1619)
   • db
      .select()
      .from(fileLocks)
      .where(eq(fileLocks.fileId, fileId)) (سطر 1619)
   • db
      .select()
      .from(fileLocks) (سطر 1619)
   • db
      .select() (سطر 1619)
   • eq(fileLocks.fileId, fileId) (سطر 1622)
   • desc(fileLocks.createdAt) (سطر 1623)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.isFileLocked
🔢 الأسطر: 1626-1635
⚡ Async: نعم
🔑 الوسائط:
   • fileId: string
📞 الاستدعاءات:
   • this.getFileLocks(fileId) (سطر 1627)
   • locks.filter(
      lock => !lock.expiresAt || lock.expiresAt > new Date()
    ) (سطر 1630)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.createAuditLog
🔢 الأسطر: 1638-1641
⚡ Async: نعم
🔑 الوسائط:
   • log: { userId: string; action: "delete" | "copy" | "create" | "update" | "move" | "rename" | "share" | "access" | "restore"; id?: string | undefined; timestamp?: Date | null | undefined; sessionId?: string | null | undefined; userAgent?: string | null | undefined; ipAddress?: string | null | undefined; fileId?: string | null | undefined; details?: string | null | undefined; oldValue?: unknown; newValue?: unknown; }
📞 الاستدعاءات:
   • db.insert(fileAuditLogs).values(log).returning() (سطر 1639)
   • db.insert(fileAuditLogs).values(log) (سطر 1639)
   • db.insert(fileAuditLogs) (سطر 1639)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.getFileAuditLogs
🔢 الأسطر: 1643-1668
⚡ Async: نعم
🔑 الوسائط:
   • fileId: string | undefined
   • userId: string | undefined
   • limit: number
📞 الاستدعاءات:
   • conditions.push(eq(fileAuditLogs.fileId, fileId)) (سطر 1647)
   • eq(fileAuditLogs.fileId, fileId) (سطر 1647)
   • conditions.push(eq(fileAuditLogs.userId, userId)) (سطر 1651)
   • eq(fileAuditLogs.userId, userId) (سطر 1651)
   • db
        .select()
        .from(fileAuditLogs)
        .where(and(...conditions))
        .orderBy(desc(fileAuditLogs.timestamp))
        .limit(limit) (سطر 1655)
   • db
        .select()
        .from(fileAuditLogs)
        .where(and(...conditions))
        .orderBy(desc(fileAuditLogs.timestamp)) (سطر 1655)
   • db
        .select()
        .from(fileAuditLogs)
        .where(and(...conditions)) (سطر 1655)
   • db
        .select()
        .from(fileAuditLogs) (سطر 1655)
   • db
        .select() (سطر 1655)
   • and(...conditions) (سطر 1658)
   • desc(fileAuditLogs.timestamp) (سطر 1659)
   • db
      .select()
      .from(fileAuditLogs)
      .orderBy(desc(fileAuditLogs.timestamp))
      .limit(limit) (سطر 1663)
   • db
      .select()
      .from(fileAuditLogs)
      .orderBy(desc(fileAuditLogs.timestamp)) (سطر 1663)
   • db
      .select()
      .from(fileAuditLogs) (سطر 1663)
   • db
      .select() (سطر 1663)
   • desc(fileAuditLogs.timestamp) (سطر 1666)
🩺 التشخيص:
   ⚠️ الوسيط 'limit' بدون نوع صريح (implicit any)

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.copyFile
🔢 الأسطر: 1671-1753
⚡ Async: نعم
🔑 الوسائط:
   • fileId: string
   • destinationFolderId: string | null
   • userId: string
   • newName: string | undefined
📞 الاستدعاءات:
   • this.checkUserFileAccess(fileId, userId, 'read') (سطر 1673)
   • this.getFile(fileId, userId) (سطر 1679)
   • this.getFile(destinationFolderId, userId) (سطر 1691)
   • db.insert(files).values(copyData).returning() (سطر 1715)
   • db.insert(files).values(copyData) (سطر 1715)
   • db.insert(files) (سطر 1715)
   • import('./services/fileManagerService') (سطر 1718)
   • fileManagerService.copyFile(
      sourceFile.path,
      fullDestinationPath,
      userId,
      { preserveMetadata: true }
    ) (سطر 1720)
   • db.delete(files).where(eq(files.id, copy.id)) (سطر 1729)
   • db.delete(files) (سطر 1729)
   • eq(files.id, copy.id) (سطر 1729)
   • db
      .update(files)
      .set({
        size: copyResult.data?.size || sourceFile.size,
        checksum: copyResult.data?.checksum,
      })
      .where(eq(files.id, copy.id))
      .returning() (سطر 1734)
   • db
      .update(files)
      .set({
        size: copyResult.data?.size || sourceFile.size,
        checksum: copyResult.data?.checksum,
      })
      .where(eq(files.id, copy.id)) (سطر 1734)
   • db
      .update(files)
      .set({
        size: copyResult.data?.size || sourceFile.size,
        checksum: copyResult.data?.checksum,
      }) (سطر 1734)
   • db
      .update(files) (سطر 1734)
   • eq(files.id, copy.id) (سطر 1740)
   • this.createAuditLog({
      fileId: copy.id,
      action: 'create',
      userId,
      details: `Copied from ${sourceFile.name}`,
      newValue: updatedCopy,
    }) (سطر 1744)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.duplicateFile
🔢 الأسطر: 1755-1762
⚡ Async: نعم
🔑 الوسائط:
   • fileId: string
   • userId: string
📞 الاستدعاءات:
   • this.getFile(fileId, userId) (سطر 1756)
   • this.copyFile(fileId, sourceFile.parentId, userId, `${sourceFile.name} (Copy)`) (سطر 1761)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.shareFile
🔢 الأسطر: 1765-1792
⚡ Async: نعم
🔑 الوسائط:
   • fileId: string
   • isPublic: boolean
   • userId: string
📞 الاستدعاءات:
   • this.checkUserFileAccess(fileId, userId, 'write') (سطر 1767)
   • db
      .update(files)
      .set({ isPublic })
      .where(eq(files.id, fileId))
      .returning() (سطر 1772)
   • db
      .update(files)
      .set({ isPublic })
      .where(eq(files.id, fileId)) (سطر 1772)
   • db
      .update(files)
      .set({ isPublic }) (سطر 1772)
   • db
      .update(files) (سطر 1772)
   • eq(files.id, fileId) (سطر 1775)
   • this.createAuditLog({
      fileId,
      action: 'share',
      userId,
      details: `${isPublic ? 'Made public' : 'Made private'}`,
      newValue: { isPublic },
    }) (سطر 1783)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.getPublicFileUrl
🔢 الأسطر: 1794-1796
⚡ Async: لا
🔑 الوسائط:
   • fileId: string
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.getAllowedPaths
🔢 الأسطر: 1802-1814
⚡ Async: نعم
🔑 الوسائط:
   • type: "allowed" | "blocked" | undefined
📞 الاستدعاءات:
   • eq(allowedPaths.isActive, true) (سطر 1803)
   • conditions.push(eq(allowedPaths.type, type)) (سطر 1806)
   • eq(allowedPaths.type, type) (سطر 1806)
   • db
      .select()
      .from(allowedPaths)
      .where(and(...conditions))
      .orderBy(desc(allowedPaths.createdAt)) (سطر 1809)
   • db
      .select()
      .from(allowedPaths)
      .where(and(...conditions)) (سطر 1809)
   • db
      .select()
      .from(allowedPaths) (سطر 1809)
   • db
      .select() (سطر 1809)
   • and(...conditions) (سطر 1812)
   • desc(allowedPaths.createdAt) (سطر 1813)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.getAllowedPath
🔢 الأسطر: 1816-1823
⚡ Async: نعم
🔑 الوسائط:
   • id: string
📞 الاستدعاءات:
   • db
      .select()
      .from(allowedPaths)
      .where(eq(allowedPaths.id, id)) (سطر 1817)
   • db
      .select()
      .from(allowedPaths) (سطر 1817)
   • db
      .select() (سطر 1817)
   • eq(allowedPaths.id, id) (سطر 1820)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.createAllowedPath
🔢 الأسطر: 1825-1832
⚡ Async: نعم
🔑 الوسائط:
   • pathData: { path: string; type: "allowed" | "blocked"; addedBy: string; id?: string | undefined; isActive?: boolean | null | undefined; createdAt?: Date | null | undefined; updatedAt?: Date | null | undefined; description?: string | null | undefined; isDefault?: boolean | null | undefined; }
📞 الاستدعاءات:
   • db
      .insert(allowedPaths)
      .values(pathData)
      .returning() (سطر 1826)
   • db
      .insert(allowedPaths)
      .values(pathData) (سطر 1826)
   • db
      .insert(allowedPaths) (سطر 1826)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.updateAllowedPath
🔢 الأسطر: 1834-1846
⚡ Async: نعم
🔑 الوسائط:
   • id: string
   • updates: Partial<Omit<{ path: string; type: "allowed" | "blocked"; addedBy: string; id?: string | undefined; isActive?: boolean | null | undefined; createdAt?: Date | null | undefined; updatedAt?: Date | null | undefined; description?: string | null | undefined; isDefault?: boolean | null | undefined; }, "addedBy">>
📞 الاستدعاءات:
   • db
      .update(allowedPaths)
      .set({ ...updates, updatedAt: new Date() })
      .where(eq(allowedPaths.id, id))
      .returning() (سطر 1835)
   • db
      .update(allowedPaths)
      .set({ ...updates, updatedAt: new Date() })
      .where(eq(allowedPaths.id, id)) (سطر 1835)
   • db
      .update(allowedPaths)
      .set({ ...updates, updatedAt: new Date() }) (سطر 1835)
   • db
      .update(allowedPaths) (سطر 1835)
   • eq(allowedPaths.id, id) (سطر 1838)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.deleteAllowedPath
🔢 الأسطر: 1848-1850
⚡ Async: نعم
🔑 الوسائط:
   • id: string
📞 الاستدعاءات:
   • db.delete(allowedPaths).where(eq(allowedPaths.id, id)) (سطر 1849)
   • db.delete(allowedPaths) (سطر 1849)
   • eq(allowedPaths.id, id) (سطر 1849)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.checkPathAllowed
🔢 الأسطر: 1852-1891
⚡ Async: نعم
🔑 الوسائط:
   • path: string
📞 الاستدعاءات:
   • db
        .select()
        .from(allowedPaths)
        .where(
          and(
            eq(allowedPaths.type, 'blocked'),
            eq(allowedPaths.isActive, true),
            like(allowedPaths.path, `${path}%`) // Use LIKE for path matching
          )
        )
        .limit(1) (سطر 1855)
   • db
        .select()
        .from(allowedPaths)
        .where(
          and(
            eq(allowedPaths.type, 'blocked'),
            eq(allowedPaths.isActive, true),
            like(allowedPaths.path, `${path}%`) // Use LIKE for path matching
          )
        ) (سطر 1855)
   • db
        .select()
        .from(allowedPaths) (سطر 1855)
   • db
        .select() (سطر 1855)
   • and(
            eq(allowedPaths.type, 'blocked'),
            eq(allowedPaths.isActive, true),
            like(allowedPaths.path, `${path}%`) // Use LIKE for path matching
          ) (سطر 1859)
   • eq(allowedPaths.type, 'blocked') (سطر 1860)
   • eq(allowedPaths.isActive, true) (سطر 1861)
   • like(allowedPaths.path, `${path}%`) (سطر 1862)
   • db
        .select()
        .from(allowedPaths)
        .where(
          and(
            eq(allowedPaths.type, 'allowed'),
            eq(allowedPaths.isActive, true)
          )
        ) (سطر 1872)
   • db
        .select()
        .from(allowedPaths) (سطر 1872)
   • db
        .select() (سطر 1872)
   • and(
            eq(allowedPaths.type, 'allowed'),
            eq(allowedPaths.isActive, true)
          ) (سطر 1876)
   • eq(allowedPaths.type, 'allowed') (سطر 1877)
   • eq(allowedPaths.isActive, true) (سطر 1878)
   • allowedPathsList.some(allowedPath => {
        return path === allowedPath.path || path.startsWith(allowedPath.path + '/');
      }) (سطر 1883)
   • path.startsWith(allowedPath.path + '/') (سطر 1884)
   • logger.error('Error checking path allowance:', error as any) (سطر 1888)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/storage.ts
🏷️ الدالة: DatabaseStorage.getActivePaths
🔢 الأسطر: 1893-1905
⚡ Async: نعم
🔑 الوسائط:
   • type: "allowed" | "blocked"
📞 الاستدعاءات:
   • db
      .select({ path: allowedPaths.path })
      .from(allowedPaths)
      .where(
        and(
          eq(allowedPaths.type, type),
          eq(allowedPaths.isActive, true)
        )
      ) (سطر 1894)
   • db
      .select({ path: allowedPaths.path })
      .from(allowedPaths) (سطر 1894)
   • db
      .select({ path: allowedPaths.path }) (سطر 1894)
   • and(
          eq(allowedPaths.type, type),
          eq(allowedPaths.isActive, true)
        ) (سطر 1898)
   • eq(allowedPaths.type, type) (سطر 1899)
   • eq(allowedPaths.isActive, true) (سطر 1900)
   • paths.map(p => p.path) (سطر 1904)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/vite.ts
🏷️ الدالة: log
🔢 الأسطر: 16-25
⚡ Async: لا
🔑 الوسائط:
   • message: string
   • source: string
📞 الاستدعاءات:
   • new Date().toLocaleTimeString("en-US", {
    hour: "numeric",
    minute: "2-digit",
    second: "2-digit",
    hour12: true,
  }) (سطر 17)
   • console.log(`${formattedTime} [${source}] ${message}`) (سطر 24)
🩺 التشخيص:
   ⚠️ الوسيط 'source' بدون نوع صريح (implicit any)

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/vite.ts
🏷️ الدالة: setupVite
🔢 الأسطر: 27-73
⚡ Async: نعم
🔑 الوسائط:
   • app: import("/home/administrator/Panel/node_modules/@types/express/index").Express
   • server: import("http").Server<typeof import("http").IncomingMessage, typeof import("http").ServerResponse>
📞 الاستدعاءات:
   • createViteServer({
    ...viteConfig,
    configFile: false,
    customLogger: {
      ...viteLogger,
      error: (msg, options) => {
        viteLogger.error(msg, options);
        process.exit(1);
      },
    },
    server: serverOptions,
    appType: "custom",
  }) (سطر 34)
   • viteLogger.error(msg, options) (سطر 40)
   • process.exit(1) (سطر 41)
   • app.use(vite.middlewares) (سطر 48)
   • app.use("*", async (req, res, next) => {
    const url = req.originalUrl;

    try {
      const clientTemplate = path.resolve(
        __dirname,
        "..",
        "client",
        "index.html",
      );

      // always reload the index.html file from disk incase it changes
      let template = await fs.promises.readFile(clientTemplate, "utf-8");
      template = template.replace(
        `src="/src/main.tsx"`,
        `src="/src/main.tsx?v=${nanoid()}"`,
      );
      const page = await vite.transformIndexHtml(url, template);
      res.status(200).set({ "Content-Type": "text/html" }).end(page);
    } catch (e) {
      vite.ssrFixStacktrace(e as Error);
      next(e);
    }
  }) (سطر 49)
   • path.resolve(
        __dirname,
        "..",
        "client",
        "index.html",
      ) (سطر 53)
   • fs.promises.readFile(clientTemplate, "utf-8") (سطر 61)
   • template.replace(
        `src="/src/main.tsx"`,
        `src="/src/main.tsx?v=${nanoid()}"`,
      ) (سطر 62)
   • nanoid() (سطر 64)
   • vite.transformIndexHtml(url, template) (سطر 66)
   • res.status(200).set({ "Content-Type": "text/html" }).end(page) (سطر 67)
   • res.status(200).set({ "Content-Type": "text/html" }) (سطر 67)
   • res.status(200) (سطر 67)
   • vite.ssrFixStacktrace(e as Error) (سطر 69)
   • next(e) (سطر 70)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/vite.ts
🏷️ الدالة: serveStatic
🔢 الأسطر: 75-90
⚡ Async: لا
🔑 الوسائط:
   • app: import("/home/administrator/Panel/node_modules/@types/express/index").Express
📞 الاستدعاءات:
   • path.resolve(__dirname, "public") (سطر 76)
   • fs.existsSync(distPath) (سطر 78)
   • app.use(express.static(distPath)) (سطر 84)
   • express.static(distPath) (سطر 84)
   • app.use("*", (_req, res) => {
    res.sendFile(path.resolve(distPath, "index.html"));
  }) (سطر 87)
   • res.sendFile(path.resolve(distPath, "index.html")) (سطر 88)
   • path.resolve(distPath, "index.html") (سطر 88)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: shared/environment.ts
🏷️ الدالة: detectServerEnvironment
🔢 الأسطر: 50-103
⚡ Async: لا
📞 الاستدعاءات:
   • replitIndicators.some(indicator => processEnv[indicator]) (سطر 69)
   • hostname.includes('replit') (سطر 73)
   • hostname.includes('nix') (سطر 73)
   • hostname.includes('93.127.142.144') (سطر 76)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: shared/environment.ts
🏷️ الدالة: getEnvironmentPaths
🔢 الأسطر: 106-138
⚡ Async: لا
🔑 الوسائط:
   • serverType: "replit" | "external" | "local"
📞 الاستدعاءات:
   • process.cwd() (سطر 127)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: shared/environment.ts
🏷️ الدالة: detectEnvironment
🔢 الأسطر: 140-414
⚡ Async: لا
📞 الاستدعاءات:
   • parseInt(windowProcess.PORT, 10) (سطر 162)
   • parseInt((importMetaEnv as any).VITE_PORT, 10) (سطر 167)
   • parseInt(processEnv.PORT || '5000', 10) (سطر 174)
   • parseInt(windowProcess.WS_PORT, 10) (سطر 188)
   • parseInt((importMetaEnv as any).WS_PORT, 10) (سطر 192)
   • parseInt(processEnv.WS_PORT || processEnv.PORT || '5000', 10) (سطر 197)
   • parseInt(windowProcess.HMR_PORT, 10) (سطر 211)
   • parseInt((importMetaEnv as any).HMR_PORT, 10) (سطر 215)
   • parseInt(processEnv.HMR_PORT || '24678', 10) (سطر 220)
   • getPortFromEnv() (سطر 224)
   • getWSPortFromEnv() (سطر 225)
   • getHMRPortFromEnv() (سطر 226)
   • window.location.hostname.includes('replit.dev') (سطر 230)
   • window.location.hostname.includes('repl.co') (سطر 231)
   • window.location.hostname.includes('sisko.replit.dev') (سطر 232)
   • window.location.hostname.includes('pike.replit.dev') (سطر 233)
   • window.location.hostname.includes('worf.replit.dev') (سطر 234)
   • detectServerEnvironment() (سطر 238)
   • processEnv.HOSTNAME.includes('replit') (سطر 246)
   • getEnvironmentPaths(serverType) (سطر 263)
   • currentHost.includes('replit.dev') (سطر 315)
   • currentHost.includes('repl.co') (سطر 315)
   • corsOrigins.push(currentOrigin) (سطر 316)
   • corsOrigins.push(
        'http://localhost:3000',
        'http://localhost:5173',
        'http://127.0.0.1:3000',
        'http://127.0.0.1:5173'
      ) (سطر 322)
   • (processEnv.ALLOWED_ORIGINS?.split(',') || ['https://yourdomain.com']).map(origin => origin.trim()) (سطر 373)
   • processEnv.ALLOWED_ORIGINS?.split(',') (سطر 373)
   • origin.trim() (سطر 373)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: shared/environment.ts
🏷️ الدالة: getApiBaseUrl
🔢 الأسطر: 419-428
⚡ Async: لا
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: shared/environment.ts
🏷️ الدالة: validateWebSocketUrl
🔢 الأسطر: 431-442
⚡ Async: لا
🔑 الوسائط:
   • url: string
📞 الاستدعاءات:
   • validProtocols.includes(urlObj.protocol) (سطر 435)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: shared/environment.ts
🏷️ الدالة: getFallbackUrls
🔢 الأسطر: 445-463
⚡ Async: لا
🔑 الوسائط:
   • originalHost: string
   • originalProtocol: string
📞 الاستدعاءات:
   • ports.forEach(port => {
    fallbacks.push(`${originalProtocol}//${originalHost}${port}/ws`);
  }) (سطر 451)
   • fallbacks.push(`${originalProtocol}//${originalHost}${port}/ws`) (سطر 452)
   • fallbacks.push(`${localhostProtocol}//localhost:5001/ws`) (سطر 458)
   • fallbacks.push(`${localhostProtocol}//127.0.0.1:5001/ws`) (سطر 459)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: shared/environment.ts
🏷️ الدالة: getWebSocketUrl
🔢 الأسطر: 465-552
⚡ Async: لا
📞 الاستدعاءات:
   • console.error('❌ Invalid hostname detected:', host) (سطر 474)
   • console.error('❌ Window location:', window.location) (سطر 475)
   • console.warn('🔄 Using emergency fallback URL:', fallbackUrl) (سطر 479)
   • host.includes('replit.dev') (سطر 484)
   • host.includes('repl.co') (سطر 485)
   • host.includes('sisko.replit.dev') (سطر 486)
   • host.includes('pike.replit.dev') (سطر 487)
   • host.includes('worf.replit.dev') (سطر 488)
   • host.startsWith('192.168.') (سطر 491)
   • host.startsWith('10.') (سطر 491)
   • console.log('🔗 Using Replit domain WebSocket URL:', primaryUrl) (سطر 498)
   • console.log('🔗 Using Custom domain WebSocket URL:', primaryUrl) (سطر 502)
   • console.log('🏠 Using localhost WebSocket URL:', primaryUrl) (سطر 507)
   • console.log('🌐 Using generic WebSocket URL:', primaryUrl) (سطر 512)
   • validateWebSocketUrl(primaryUrl) (سطر 516)
   • console.error('❌ Primary WebSocket URL validation failed:', primaryUrl) (سطر 519)
   • getFallbackUrls(host, protocol) (سطر 522)
   • validateWebSocketUrl(fallbackUrl) (سطر 525)
   • console.warn('🔄 Using fallback WebSocket URL:', fallbackUrl) (سطر 526)
   • console.error('❌ All WebSocket URLs failed validation, using emergency URL:', emergencyUrl) (سطر 533)
   • validateWebSocketUrl(serverUrl) (سطر 546)
   • console.error('❌ Server WebSocket URL validation failed:', serverUrl) (سطر 547)
   • console.error('❌ ENV_CONFIG.websocket:', ENV_CONFIG.websocket) (سطر 548)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: shared/environment.ts
🏷️ الدالة: getPath
🔢 الأسطر: 555-557
⚡ Async: لا
🔑 الوسائط:
   • pathType: "root" | "logs" | "uploads" | "config" | "ssl" | "nginx" | "pm2"
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: shared/environment.ts
🏷️ الدالة: pathExists
🔢 الأسطر: 560-573
⚡ Async: لا
🔑 الوسائط:
   • pathType: "root" | "logs" | "uploads" | "config" | "ssl" | "nginx" | "pm2"
📞 الاستدعاءات:
   • require('fs') (سطر 567)
   • getPath(pathType) (سطر 568)
   • fs.existsSync(path) (سطر 569)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: shared/environment.ts
🏷️ الدالة: logEnvironmentInfo
🔢 الأسطر: 575-673
⚡ Async: لا
📞 الاستدعاءات:
   • console.log('🌍 Environment Configuration:') (سطر 580)
   • console.log(`📍 Environment: ${ENV_CONFIG.name}`) (سطر 581)
   • console.log(`🔧 Replit: ${ENV_CONFIG.isReplit}`) (سطر 582)
   • console.log(`💻 Current Host: ${currentHost}`) (سطر 583)
   • console.log(`🌟 Custom Domain: panel.binarjoinanelytic.info`) (سطر 586)
   • console.log(`🔗 External Server: 93.127.142.144`) (سطر 587)
   • console.log(`🌐 Server: ${ENV_CONFIG.host}:${ENV_CONFIG.port}`) (سطر 590)
   • console.log(`⚡ HMR: ${ENV_CONFIG.hmr.protocol || 'ws'}://${ENV_CONFIG.hmr.host}:${ENV_CONFIG.hmr.port}`) (سطر 591)
   • console.log(`🔌 WebSocket: ${ENV_CONFIG.websocket.protocol}://${ENV_CONFIG.websocket.host}:${ENV_CONFIG.websocket.port}`) (سطر 592)
   • console.log(`📡 API Base: ${getApiBaseUrl()}`) (سطر 593)
   • getApiBaseUrl() (سطر 593)
   • console.log(`🔌 WS URL: ${getWebSocketUrl()}`) (سطر 594)
   • getWebSocketUrl() (سطر 594)
   • console.log(`🔐 CORS Origins:`, ENV_CONFIG.cors.origin) (سطر 595)
   • console.log(`📁 Environment Paths:`) (سطر 598)
   • Object.entries(ENV_CONFIG.paths).forEach(([key, value]) => {
    const exists = pathExists(key as keyof EnvironmentConfig['paths']);
    console.log(`   ${key}: ${value} ${exists ? '✅' : '❓'}`);
  }) (سطر 599)
   • Object.entries(ENV_CONFIG.paths) (سطر 599)
   • pathExists(key as keyof EnvironmentConfig['paths']) (سطر 600)
   • console.log(`   ${key}: ${value} ${exists ? '✅' : '❓'}`) (سطر 601)
   • getWebSocketUrl() (سطر 605)
   • validateWebSocketUrl(wsUrl) (سطر 606)
   • wsUrl.includes('undefined') (سطر 608)
   • wsUrl.includes('NaN') (سطر 608)
   • wsUrl.includes('null') (سطر 608)
   • console.error('❌ خطأ: WebSocket URL يحتوي على قيم غير صالحة!', wsUrl) (سطر 609)
   • console.error('❌ Environment Config Debug:', ENV_CONFIG) (سطر 610)
   • console.error('❌ خطأ: WebSocket URL غير صالح!', wsUrl) (سطر 612)
   • console.error('❌ URL Validation Failed - checking fallbacks...') (سطر 613)
   • getFallbackUrls(window.location.hostname, window.location.protocol === 'https:' ? 'wss:' : 'ws:') (سطر 617)
   • console.log('🔄 Available fallback URLs:') (سطر 618)
   • fallbacks.forEach((url, index) => {
        const isValid = validateWebSocketUrl(url);
        console.log(`   ${index + 1}. ${url} ${isValid ? '✅' : '❌'}`);
      }) (سطر 619)
   • validateWebSocketUrl(url) (سطر 620)
   • console.log(`   ${index + 1}. ${url} ${isValid ? '✅' : '❌'}`) (سطر 621)
   • console.log('✅ WebSocket URL صالح:', wsUrl) (سطر 625)
   • console.log(`🌐 Current URL: ${window.location.href}`) (سطر 629)
   • console.log(`🔒 Protocol: ${window.location.protocol}`) (سطر 630)
   • console.log(`🏠 Hostname: ${window.location.hostname}`) (سطر 631)
   • console.log(`🚪 Port: ${window.location.port || 'default'}`) (سطر 632)
   • window.location.hostname.includes('replit.dev') (سطر 635)
   • window.location.hostname.includes('repl.co') (سطر 636)
   • window.location.hostname.startsWith('192.168.') (سطر 639)
   • window.location.hostname.startsWith('10.') (سطر 640)
   • console.log(`🔍 Domain Type Analysis:`) (سطر 643)
   • console.log(`   - Replit Domain: ${isReplitDetected}`) (سطر 644)
   • console.log(`   - Custom Domain: ${isCustomDetected}`) (سطر 645)
   • console.log(`   - Localhost/Private: ${isLocalhostDetected}`) (سطر 646)
   • console.log(`   - Network Online: ${typeof navigator !== 'undefined' ? navigator.onLine : 'unknown'}`) (سطر 647)
   • console.log(`🔧 NODE_ENV: ${process.env.NODE_ENV || 'undefined'}`) (سطر 652)
   • console.log(`🔧 PORT: ${process.env.PORT || 'undefined'}`) (سطر 653)
   • console.log(`🔧 REPL_ID: ${process.env.REPL_ID ? 'defined' : 'undefined'}`) (سطر 654)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/App.tsx
🏷️ الدالة: Router
🔢 الأسطر: 68-191
⚡ Async: لا
📞 الاستدعاءات:
   • useAuth() (سطر 69)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/App.tsx
🏷️ الدالة: App
🔢 الأسطر: 193-223
⚡ Async: لا
📞 الاستدعاءات:
   • useEffect(() => {
    // تحديث حالة التطبيق عند بداية التطبيق
    updateAppState({
      appInitialized: true,
      initTime: new Date().toISOString(),
      environment: import.meta.env.MODE,
      version: '1.0.0'
    });

    console.log('🔍 ErrorLogger system initialized in App.tsx');
  }, []) (سطر 195)
   • updateAppState({
      appInitialized: true,
      initTime: new Date().toISOString(),
      environment: import.meta.env.MODE,
      version: '1.0.0'
    }) (سطر 197)
   • new Date().toISOString() (سطر 199)
   • console.log('🔍 ErrorLogger system initialized in App.tsx') (سطر 204)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/App.tsx
🏷️ الدالة: PageLoader
🔢 الأسطر: 59-66
⚡ Async: لا
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/migrations/001_add_default_paths.ts
🏷️ الدالة: addDefaultPaths
🔢 الأسطر: 71-138
⚡ Async: نعم
🔑 الوسائط:
   • adminUserId: string | undefined
📞 الاستدعاءات:
   • console.log('🚀 بدء إضافة المسارات الافتراضية...') (سطر 72)
   • db.execute(
        sql`SELECT id FROM users WHERE role = 'admin' ORDER BY "created_at" ASC LIMIT 1`
      ) (سطر 78)
   • console.log(`📝 استخدام المستخدم الإداري: ${addedBy}`) (سطر 84)
   • console.warn('⚠️ لم يتم العثور على مستخدم إداري، سيتم استخدام قيمة افتراضية') (سطر 86)
   • db.execute(
      sql`SELECT path FROM allowed_paths WHERE path = ANY(${DEFAULT_PATHS.map(p => p.path)})`
    ) (سطر 92)
   • DEFAULT_PATHS.map(p => p.path) (سطر 93)
   • existingPaths.rows.map((row: any) => row.path) (سطر 96)
   • DEFAULT_PATHS.filter(path => !existingPathsSet.has(path.path)) (سطر 97)
   • existingPathsSet.has(path.path) (سطر 97)
   • console.log('✅ جميع المسارات الافتراضية موجودة بالفعل') (سطر 100)
   • console.log(`📁 إضافة ${pathsToAdd.length} مسار جديد...`) (سطر 104)
   • db.insert(allowedPaths).values({
          path: pathData.path,
          type: pathData.type,
          description: pathData.description,
          isActive: pathData.isActive,
          addedBy: addedBy,
        }).returning() (سطر 110)
   • db.insert(allowedPaths).values({
          path: pathData.path,
          type: pathData.type,
          description: pathData.description,
          isActive: pathData.isActive,
          addedBy: addedBy,
        }) (سطر 110)
   • db.insert(allowedPaths) (سطر 110)
   • insertedPaths.push(result[0]) (سطر 118)
   • console.log(`✅ تم إضافة المسار: ${pathData.path} (${pathData.type})`) (سطر 119)
   • console.error(`❌ خطأ في إضافة المسار ${pathData.path}:`, error) (سطر 121)
   • console.log(`🎉 تم إضافة ${insertedPaths.length} مسار بنجاح`) (سطر 125)
   • console.error('❌ خطأ في إضافة المسارات الافتراضية:', error) (سطر 135)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/migrations/001_add_default_paths.ts
🏷️ الدالة: removeDefaultPaths
🔢 الأسطر: 140-162
⚡ Async: نعم
📞 الاستدعاءات:
   • console.log('🗑️ إزالة المسارات الافتراضية...') (سطر 141)
   • DEFAULT_PATHS.map(p => p.path) (سطر 144)
   • db.execute(
      sql`DELETE FROM allowed_paths WHERE path = ANY(${pathsToRemove}) RETURNING path`
    ) (سطر 146)
   • console.log(`🗑️ تم حذف ${result.rows.length} مسار افتراضي`) (سطر 150)
   • console.error('❌ خطأ في حذف المسارات الافتراضية:', error) (سطر 159)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/scripts/run-audit.ts
🏷️ الدالة: runAudit
🔢 الأسطر: 16-85
⚡ Async: نعم
📞 الاستدعاءات:
   • console.log('🔍 بدء الفحص الشامل للتطبيق...\n') (سطر 17)
   • auditService.runCompleteAudit() (سطر 21)
   • path.join(process.cwd(), 'audit-results') (سطر 24)
   • process.cwd() (سطر 24)
   • fs.mkdir(outputDir, { recursive: true }) (سطر 25)
   • new Date().toISOString().split('T') (سطر 28)
   • new Date().toISOString() (سطر 28)
   • JSON.stringify(auditReport, null, 2) (سطر 31)
   • fs.writeFile(path.join(outputDir, `audit-report-${timestamp}.json`), jsonReport) (سطر 32)
   • path.join(outputDir, `audit-report-${timestamp}.json`) (سطر 32)
   • AuditHelpers.generateMarkdownReport(auditReport) (سطر 35)
   • fs.writeFile(path.join(outputDir, `audit-report-${timestamp}.md`), markdownReport) (سطر 36)
   • path.join(outputDir, `audit-report-${timestamp}.md`) (سطر 36)
   • auditReport.issues.forEach(issue => {
      csvContent += `"${issue.id}","${issue.title}","${issue.severity}","${issue.category}","${issue.description}","${issue.affectedFiles.join(';')}","${issue.status}"\n`;
    }) (سطر 40)
   • issue.affectedFiles.join(';') (سطر 41)
   • fs.writeFile(path.join(outputDir, `audit-issues-${timestamp}.csv`), csvContent) (سطر 43)
   • path.join(outputDir, `audit-issues-${timestamp}.csv`) (سطر 43)
   • console.log('📊 ملخص الفحص:') (سطر 46)
   • console.log(`   • مشاكل حرجة: ${auditReport.summary.critical}`) (سطر 47)
   • console.log(`   • مشاكل مهمة: ${auditReport.summary.high}`) (سطر 48)
   • console.log(`   • مشاكل متوسطة: ${auditReport.summary.medium}`) (سطر 49)
   • console.log(`   • مشاكل منخفضة: ${auditReport.summary.low}`) (سطر 50)
   • console.log(`   • المجموع: ${auditReport.summary.total}\n`) (سطر 51)
   • console.log(`🚀 حالة النشر: ${auditReport.readyForDeployment ? '✅ جاهز' : '❌ غير جاهز'}\n`) (سطر 53)
   • console.log('📂 تم حفظ التقارير في:') (سطر 55)
   • console.log(`   • ${path.join(outputDir, `audit-report-${timestamp}.json`)}`) (سطر 56)
   • path.join(outputDir, `audit-report-${timestamp}.json`) (سطر 56)
   • console.log(`   • ${path.join(outputDir, `audit-report-${timestamp}.md`)}`) (سطر 57)
   • path.join(outputDir, `audit-report-${timestamp}.md`) (سطر 57)
   • console.log(`   • ${path.join(outputDir, `audit-issues-${timestamp}.csv`)}\n`) (سطر 58)
   • path.join(outputDir, `audit-issues-${timestamp}.csv`) (سطر 58)
   • console.log('📋 قائمة فحص النشر:') (سطر 61)
   • Object.entries(auditReport.checklist).forEach(([item, status]) => {
      const icon = status === 'PASS' ? '✅' : '❌';
      console.log(`   ${icon} ${item}`);
    }) (سطر 62)
   • Object.entries(auditReport.checklist) (سطر 62)
   • console.log(`   ${icon} ${item}`) (سطر 64)
   • auditReport.issues.filter(i => i.severity === 'Critical') (سطر 68)
   • console.log('\n🚨 مشاكل حرجة تحتاج إصلاح فوري:') (سطر 70)
   • criticalIssues.forEach((issue, index) => {
        console.log(`   ${index + 1}. ${issue.title}`);
        console.log(`      الحل: ${issue.suggestedFix}`);
      }) (سطر 71)
   • console.log(`   ${index + 1}. ${issue.title}`) (سطر 72)
   • console.log(`      الحل: ${issue.suggestedFix}`) (سطر 73)
   • process.exit(exitCode) (سطر 79)
   • console.error('❌ خطأ في تشغيل الفحص الشامل:', error) (سطر 82)
   • process.exit(1) (سطر 83)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/scripts/setup-system.ts
🏷️ الدالة: setupSystem
🔢 الأسطر: 4-52
⚡ Async: نعم
📞 الاستدعاءات:
   • console.log('🔧 Setting up system for production...') (سطر 5)
   • console.log('Checking PM2...') (سطر 9)
   • execSync('pm2 --version', { stdio: 'pipe' }) (سطر 11)
   • console.log('✅ PM2 is available') (سطر 12)
   • console.log('⚠️ PM2 not found, attempting to install...') (سطر 14)
   • execSync('npm install -g pm2', { stdio: 'inherit' }) (سطر 16)
   • console.log('✅ PM2 installed successfully') (سطر 17)
   • console.error('❌ Failed to install PM2:', installError) (سطر 19)
   • console.log('Checking Nginx...') (سطر 24)
   • execSync('nginx -v', { stdio: 'pipe' }) (سطر 26)
   • console.log('✅ Nginx is available') (سطر 27)
   • console.log('⚠️ Nginx not found. Please install nginx manually.') (سطر 29)
   • console.log('Setting up PM2 startup...') (سطر 34)
   • execSync('pm2 startup', { stdio: 'inherit' }) (سطر 35)
   • console.log('✅ PM2 startup configured') (سطر 36)
   • console.log('⚠️ PM2 startup setup failed:', error) (سطر 38)
   • console.log('Creating directories...') (سطر 42)
   • execSync('mkdir -p /home/administrator/logs', { stdio: 'pipe' }) (سطر 43)
   • execSync('mkdir -p /home/administrator/backups', { stdio: 'pipe' }) (سطر 44)
   • console.log('✅ Directories created') (سطر 45)
   • console.log('🎉 System setup completed!') (سطر 47)
   • console.error('❌ System setup failed:', error) (سطر 50)
🩺 التشخيص:
   ⚠️ دالة async لكن لا تستخدم await

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/auditService.ts
🏷️ الدالة: AuditService.runCompleteAudit
🔢 الأسطر: 61-95
⚡ Async: نعم
📞 الاستدعاءات:
   • console.log('🔍 بدء الفحص الشامل للتطبيق...') (سطر 62)
   • this.auditSetupAndBuild() (سطر 70)
   • this.auditAPIs() (سطر 73)
   • this.auditFrontend() (سطر 76)
   • this.auditSecurity() (سطر 79)
   • this.auditPerformance() (سطر 82)
   • this.auditUXUI() (سطر 85)
   • this.auditDeploymentReadiness() (سطر 88)
   • this.generateReport(checklist) (سطر 90)
   • console.error('خطأ في الفحص الشامل:', error) (سطر 92)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/auditService.ts
🏷️ الدالة: AuditService.auditSetupAndBuild
🔢 الأسطر: 97-160
⚡ Async: نعم
📞 الاستدعاءات:
   • console.log('🔧 فحص الإعداد والبناء...') (سطر 98)
   • execAsync('npx tsc --noEmit') (سطر 102)
   • this.addIssue({
          title: 'أخطاء TypeScript',
          severity: 'High',
          category: 'Functionality',
          description: 'يوجد أخطاء في TypeScript قد تؤثر على استقرار التطبيق',
          reproductionSteps: ['تشغيل npx tsc --noEmit'],
          affectedFiles: [],
          suggestedFix: 'إصلاح أخطاء TypeScript المذكورة في المخرجات',
          evidence: { outputs: [tscErrors] }
        }) (سطر 104)
   • execAsync('npm run lint') (سطر 117)
   • lintOutput.includes('error') (سطر 118)
   • this.addIssue({
          title: 'مشاكل في Linting',
          severity: 'Medium',
          category: 'Functionality',
          description: 'يوجد مشاكل في جودة الكود',
          reproductionSteps: ['تشغيل npm run lint'],
          affectedFiles: [],
          suggestedFix: 'تشغيل npm run lint -- --fix لإصلاح المشاكل التلقائية',
          evidence: { outputs: [lintOutput, lintErrors] }
        }) (سطر 119)
   • Date.now() (سطر 132)
   • execAsync('npm run build') (سطر 133)
   • Date.now() (سطر 134)
   • this.addIssue({
          title: 'وقت بناء طويل',
          severity: 'Low',
          category: 'Performance',
          description: `وقت البناء ${buildTime}ms يُعتبر طويلاً`,
          reproductionSteps: ['تشغيل npm run build'],
          affectedFiles: ['vite.config.ts'],
          suggestedFix: 'تحسين إعدادات Vite أو تقليل حجم التبعيات'
        }) (سطر 137)
   • this.addIssue({
        title: 'فشل في عملية البناء',
        severity: 'Critical',
        category: 'Functionality',
        description: 'فشل التطبيق في البناء بنجاح',
        reproductionSteps: ['تشغيل npm run build'],
        affectedFiles: [],
        suggestedFix: 'مراجعة أخطاء البناء وإصلاحها',
        evidence: { outputs: [error instanceof Error ? error.message : String(error)] }
      }) (سطر 149)
   • String(error) (سطر 157)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/auditService.ts
🏷️ الدالة: AuditService.auditAPIs
🔢 الأسطر: 162-227
⚡ Async: نعم
📞 الاستدعاءات:
   • console.log('🌐 فحص APIs...') (سطر 163)
   • Date.now() (سطر 177)
   • execAsync(
          `curl -s -w "%{http_code}\\n%{time_total}\\n" -o /dev/null http://localhost:6000${endpoint.path}`
        ) (سطر 178)
   • Date.now() (سطر 181)
   • stdout.trim().split('\n') (سطر 183)
   • stdout.trim() (سطر 183)
   • parseInt(lines[0]) (سطر 184)
   • parseFloat(lines[1]) (سطر 185)
   • this.addIssue({
            title: `مشكلة في API: ${endpoint.path}`,
            severity: 'High',
            category: 'Functionality',
            description: `الـ API يرجع status code غير متوقع: ${statusCode}`,
            reproductionSteps: [`curl -i http://localhost:6000${endpoint.path}`],
            affectedFiles: ['server/routes.ts'],
            suggestedFix: 'مراجعة منطق الـ API وإصلاح المشكلة'
          }) (سطر 191)
   • this.addIssue({
            title: `بطء في الاستجابة: ${endpoint.path}`,
            severity: 'Medium',
            category: 'Performance',
            description: `وقت الاستجابة ${curlTime}ms يُعتبر بطيئاً`,
            reproductionSteps: [`curl -w "%{time_total}" http://localhost:6000${endpoint.path}`],
            affectedFiles: ['server/routes.ts'],
            suggestedFix: 'تحسين الاستعلامات أو إضافة caching'
          }) (سطر 204)
   • this.addIssue({
          title: `خطأ في الوصول لـ API: ${endpoint.path}`,
          severity: 'Critical',
          category: 'Functionality',
          description: 'فشل في الوصول للـ API',
          reproductionSteps: [`curl -i http://localhost:6000${endpoint.path}`],
          affectedFiles: ['server/routes.ts'],
          suggestedFix: 'التأكد من أن الخادم يعمل ومراجعة الأخطاء'
        }) (سطر 216)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/auditService.ts
🏷️ الدالة: AuditService.auditSecurity
🔢 الأسطر: 229-300
⚡ Async: نعم
📞 الاستدعاءات:
   • console.log('🔒 فحص الأمان...') (سطر 230)
   • AuditHelpers.scanForSecurityIssues() (سطر 233)
   • securityScan.vulnerabilities.filter((v: any) => v.severity === 'critical') (سطر 236)
   • securityScan.vulnerabilities.filter((v: any) => v.severity === 'high') (سطر 237)
   • this.addIssue({
          title: 'ثغرات أمنية حرجة في التبعيات',
          severity: 'Critical',
          category: 'Security',
          description: `${criticalVulns} ثغرة أمنية حرجة في التبعيات`,
          reproductionSteps: ['npm audit'],
          affectedFiles: ['package.json'],
          suggestedFix: 'تشغيل npm audit fix أو تحديث التبعيات يدوياً'
        }) (سطر 240)
   • this.addIssue({
          title: 'ثغرات أمنية عالية في التبعيات',
          severity: 'High',
          category: 'Security',
          description: `${highVulns} ثغرة أمنية عالية في التبعيات`,
          reproductionSteps: ['npm audit'],
          affectedFiles: ['package.json'],
          suggestedFix: 'تشغيل npm audit fix أو تحديث التبعيات يدوياً'
        }) (سطر 252)
   • securityScan.unsafeConfigurations.forEach(config => {
        this.addIssue({
          title: 'إعدادات أمنية غير آمنة',
          severity: 'High',
          category: 'Security',
          description: config,
          reproductionSteps: ['فحص ملفات الإعدادات'],
          affectedFiles: [],
          suggestedFix: 'إزالة أو تأمين الإعدادات غير الآمنة'
        });
      }) (سطر 264)
   • this.addIssue({
          title: 'إعدادات أمنية غير آمنة',
          severity: 'High',
          category: 'Security',
          description: config,
          reproductionSteps: ['فحص ملفات الإعدادات'],
          affectedFiles: [],
          suggestedFix: 'إزالة أو تأمين الإعدادات غير الآمنة'
        }) (سطر 265)
   • securityScan.missingSecurityHeaders.forEach(header => {
        this.addIssue({
          title: `Security header مفقود: ${header}`,
          severity: 'Medium',
          category: 'Security',
          description: `Security header مهم مفقود في إعدادات الخادم`,
          reproductionSteps: ['فحص security headers'],
          affectedFiles: ['server/index.ts', 'server/routes.ts'],
          suggestedFix: `إضافة ${header} header في إعدادات الخادم`
        });
      }) (سطر 277)
   • this.addIssue({
          title: `Security header مفقود: ${header}`,
          severity: 'Medium',
          category: 'Security',
          description: `Security header مهم مفقود في إعدادات الخادم`,
          reproductionSteps: ['فحص security headers'],
          affectedFiles: ['server/index.ts', 'server/routes.ts'],
          suggestedFix: `إضافة ${header} header في إعدادات الخادم`
        }) (سطر 278)
   • this.addIssue({
        title: 'فشل في فحص الأمان',
        severity: 'Medium',
        category: 'Security',
        description: 'تعذر إكمال فحص الأمان بالكامل',
        reproductionSteps: ['npm audit'],
        affectedFiles: [],
        suggestedFix: 'مراجعة إعدادات الأمان يدوياً'
      }) (سطر 290)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/auditService.ts
🏷️ الدالة: AuditService.auditPerformance
🔢 الأسطر: 302-358
⚡ Async: نعم
📞 الاستدعاءات:
   • console.log('⚡ فحص الأداء...') (سطر 303)
   • execAsync(
            `curl -w "%{time_total}" -s -o /dev/null http://localhost:6000${endpoint}`
          ) (سطر 312)
   • parseFloat(stdout) (سطر 315)
   • fs.stat('dist') (سطر 323)
   • distStats.isDirectory() (سطر 324)
   • execAsync('du -sh dist') (سطر 325)
   • stdout.split('\t') (سطر 326)
   • bundleSize.includes('M') (سطر 331)
   • parseFloat(bundleSize) (سطر 331)
   • this.addIssue({
              title: 'حجم bundle كبير',
              severity: 'Medium',
              category: 'Performance',
              description: `حجم البناء ${bundleSize} قد يؤثر على سرعة التحميل`,
              reproductionSteps: ['npm run build', 'du -sh dist'],
              affectedFiles: ['vite.config.ts'],
              suggestedFix: 'تحسين التبعيات أو تفعيل tree shaking'
            }) (سطر 332)
   • this.addIssue({
        title: 'فشل في فحص الأداء',
        severity: 'Low',
        category: 'Performance',
        description: 'تعذر إكمال فحص الأداء',
        reproductionSteps: [],
        affectedFiles: [],
        suggestedFix: 'مراجعة الأداء يدوياً'
      }) (سطر 348)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/auditService.ts
🏷️ الدالة: AuditService.auditFrontend
🔢 الأسطر: 360-407
⚡ Async: نعم
📞 الاستدعاءات:
   • console.log('🎨 فحص الواجهة الأمامية...') (سطر 361)
   • path.join('client/src/pages', page) (سطر 374)
   • fs.readFile(pagePath, 'utf8') (سطر 375)
   • pageContent.includes('aria-label') (سطر 378)
   • pageContent.includes('aria-labelledby') (سطر 378)
   • this.addIssue({
            title: `نقص في الوصولية: ${page}`,
            severity: 'Low',
            category: 'UI/UX',
            description: 'الصفحة قد تفتقر لتسميات الوصولية',
            reproductionSteps: [`فحص ${page}`],
            affectedFiles: [pagePath],
            suggestedFix: 'إضافة aria-label أو aria-labelledby للعناصر التفاعلية'
          }) (سطر 379)
   • pageContent.includes('className') (سطر 391)
   • pageContent.includes('rtl') (سطر 391)
   • pageContent.includes('العربية') (سطر 391)
   • this.addIssue({
            title: `قد تحتاج دعم RTL: ${page}`,
            severity: 'Low',
            category: 'UI/UX',
            description: 'الصفحة تحتوي نصوص عربية لكن قد تحتاج تحسين RTL',
            reproductionSteps: [`فحص ${page} في المتصفح`],
            affectedFiles: [pagePath],
            suggestedFix: 'التأكد من CSS يدعم RTL بشكل صحيح'
          }) (سطر 392)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/auditService.ts
🏷️ الدالة: AuditService.auditUXUI
🔢 الأسطر: 409-445
⚡ Async: نعم
📞 الاستدعاءات:
   • console.log('👤 فحص تجربة المستخدم...') (سطر 410)
   • fs.readFile('client/src/index.css', 'utf8') (سطر 414)
   • cssContent.includes('@media') (سطر 417)
   • this.addIssue({
          title: 'نقص في التصميم المتجاوب',
          severity: 'Medium',
          category: 'UI/UX',
          description: 'لا يوجد media queries للتصميم المتجاوب',
          reproductionSteps: ['فحص client/src/index.css'],
          affectedFiles: ['client/src/index.css'],
          suggestedFix: 'إضافة media queries للشاشات المختلفة'
        }) (سطر 418)
   • cssContent.includes('rtl') (سطر 430)
   • cssContent.includes('[dir="rtl"]') (سطر 430)
   • this.addIssue({
          title: 'نقص في دعم RTL',
          severity: 'Medium',
          category: 'UI/UX',
          description: 'لا يوجد دعم واضح للغة العربية (RTL)',
          reproductionSteps: ['فحص client/src/index.css'],
          affectedFiles: ['client/src/index.css'],
          suggestedFix: 'إضافة CSS rules لدعم RTL'
        }) (سطر 431)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/auditService.ts
🏷️ الدالة: AuditService.auditDeploymentReadiness
🔢 الأسطر: 447-508
⚡ Async: نعم
📞 الاستدعاءات:
   • console.log('🚀 فحص جاهزية النشر...') (سطر 448)
   • execAsync('npm run build') (سطر 454)
   • execAsync('npx tsc --noEmit') (سطر 462)
   • storage.testConnection() (سطر 470)
   • execAsync('curl -f http://localhost:6000/api/health') (سطر 478)
   • execAsync('npm audit --json') (سطر 499)
   • JSON.parse(stdout) (سطر 500)
   • Object.values(auditData.vulnerabilities || {}).filter((v: any) => v.severity === 'critical') (سطر 501)
   • Object.values(auditData.vulnerabilities || {}) (سطر 501)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/auditService.ts
🏷️ الدالة: AuditService.addIssue
🔢 الأسطر: 510-518
⚡ Async: لا
🔑 الوسائط:
   • issue: Omit<import("/home/administrator/Panel/server/services/auditService").AuditIssue, "id" | "status">
📞 الاستدعاءات:
   • Date.now() (سطر 512)
   • Math.random().toString(36).substr(2, 9) (سطر 512)
   • Math.random().toString(36) (سطر 512)
   • Math.random() (سطر 512)
   • this.issues.push(fullIssue) (سطر 517)
🩺 التشخيص:
   ⚠️ استدعاء Math.random().toString(36).substr(2, 9) بدون تحديد الترميز (قد يسبب مشاكل)
   ⚠️ استدعاء Math.random().toString(36) بدون تحديد الترميز (قد يسبب مشاكل)

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/auditService.ts
🏷️ الدالة: AuditService.generateReport
🔢 الأسطر: 520-548
⚡ Async: لا
🔑 الوسائط:
   • checklist: Record<string, "PASS" | "FAIL">
📞 الاستدعاءات:
   • this.issues.filter(i => i.severity === 'Critical') (سطر 522)
   • this.issues.filter(i => i.severity === 'High') (سطر 523)
   • this.issues.filter(i => i.severity === 'Medium') (سطر 524)
   • this.issues.filter(i => i.severity === 'Low') (سطر 525)
   • Object.values(checklist).filter(v => v === 'FAIL') (سطر 530)
   • Object.values(checklist) (سطر 530)
   • new Date().toISOString() (سطر 533)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/backupService.ts
🏷️ الدالة: BackupService.ensureBackupDirectory
🔢 الأسطر: 27-34
⚡ Async: نعم
📞 الاستدعاءات:
   • fs.mkdir(this.backupDir, { recursive: true }) (سطر 29)
   • console.log('✅ Backup directory ready:', this.backupDir) (سطر 30)
   • console.error('❌ Failed to create backup directory:', error) (سطر 32)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/backupService.ts
🏷️ الدالة: BackupService.createDatabaseBackup
🔢 الأسطر: 36-86
⚡ Async: نعم
🔑 الوسائط:
   • name: string | undefined
📞 الاستدعاءات:
   • new Date().toISOString().replace(/[:.]/g, '-') (سطر 43)
   • new Date().toISOString() (سطر 43)
   • path.join(this.backupDir, `${backupName}.sql`) (سطر 45)
   • url.pathname.substring(1) (سطر 55)
   • console.log('🔄 Creating database backup...') (سطر 64)
   • execAsync(command) (سطر 65)
   • fs.stat(backupPath) (سطر 68)
   • (stats.size / (1024 * 1024)).toFixed(2) (سطر 69)
   • console.log(`✅ Database backup created: ${backupPath} (${sizeInMB} MB)`) (سطر 71)
   • console.error('❌ Database backup failed:', error) (سطر 80)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/backupService.ts
🏷️ الدالة: BackupService.createFilesBackup
🔢 الأسطر: 88-140
⚡ Async: نعم
🔑 الوسائط:
   • paths: string[]
   • name: string | undefined
📞 الاستدعاءات:
   • new Date().toISOString().replace(/[:.]/g, '-') (سطر 95)
   • new Date().toISOString() (سطر 95)
   • path.join(this.backupDir, `${backupName}.tar.gz`) (سطر 97)
   • fs.access(filePath) (سطر 103)
   • validPaths.push(filePath) (سطر 104)
   • console.warn(`⚠️ Path not accessible: ${filePath}`) (سطر 106)
   • validPaths.map(p => `"${p}"`).join(' ') (سطر 115)
   • validPaths.map(p => `"${p}"`) (سطر 115)
   • console.log('🔄 Creating files backup...') (سطر 118)
   • execAsync(command) (سطر 119)
   • fs.stat(backupPath) (سطر 122)
   • (stats.size / (1024 * 1024)).toFixed(2) (سطر 123)
   • console.log(`✅ Files backup created: ${backupPath} (${sizeInMB} MB)`) (سطر 125)
   • console.error('❌ Files backup failed:', error) (سطر 134)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/backupService.ts
🏷️ الدالة: BackupService.restoreDatabaseBackup
🔢 الأسطر: 142-180
⚡ Async: نعم
🔑 الوسائط:
   • backupPath: string
📞 الاستدعاءات:
   • fs.access(backupPath) (سطر 148)
   • url.pathname.substring(1) (سطر 157)
   • console.log('🔄 Restoring database backup...') (سطر 166)
   • execAsync(command) (سطر 167)
   • console.log('✅ Database backup restored successfully') (سطر 169)
   • console.error('❌ Database restore failed:', error) (سطر 174)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/backupService.ts
🏷️ الدالة: BackupService.listBackups
🔢 الأسطر: 182-222
⚡ Async: نعم
📞 الاستدعاءات:
   • fs.readdir(this.backupDir) (سطر 190)
   • path.join(this.backupDir, file) (سطر 195)
   • fs.stat(filePath) (سطر 196)
   • stats.isFile() (سطر 198)
   • file.endsWith('.sql') (سطر 200)
   • file.endsWith('.tar.gz') (سطر 201)
   • backups.push({
              name: file,
              path: filePath,
              size: stats.size,
              created: stats.ctime,
              type
            }) (سطر 203)
   • console.warn(`⚠️ Error reading backup file ${file}:`, error) (سطر 212)
   • backups.sort((a, b) => b.created.getTime() - a.created.getTime()) (سطر 216)
   • b.created.getTime() (سطر 216)
   • a.created.getTime() (سطر 216)
   • console.error('❌ Failed to list backups:', error) (سطر 219)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/backupService.ts
🏷️ الدالة: BackupService.deleteBackup
🔢 الأسطر: 224-247
⚡ Async: نعم
🔑 الوسائط:
   • backupPath: string
📞 الاستدعاءات:
   • path.normalize(backupPath) (سطر 230)
   • normalizedPath.startsWith(this.backupDir) (سطر 231)
   • fs.unlink(backupPath) (سطر 235)
   • console.log('✅ Backup deleted:', backupPath) (سطر 236)
   • console.error('❌ Failed to delete backup:', error) (سطر 241)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/backupService.ts
🏷️ الدالة: BackupService.cleanupOldBackups
🔢 الأسطر: 249-278
⚡ Async: نعم
🔑 الوسائط:
   • retentionDays: number
📞 الاستدعاءات:
   • this.listBackups() (سطر 256)
   • cutoffDate.setDate(cutoffDate.getDate() - retentionDays) (سطر 258)
   • cutoffDate.getDate() (سطر 258)
   • this.deleteBackup(backup.path) (سطر 263)
   • result.errors.push(`Failed to delete ${backup.name}: ${error}`) (سطر 266)
   • console.log(`🧹 Cleanup completed: ${result.deleted} backups deleted`) (سطر 271)
   • result.errors.push(`Cleanup failed: ${error}`) (سطر 274)
🩺 التشخيص:
   ⚠️ الوسيط 'retentionDays' بدون نوع صريح (implicit any)

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/deploymentService.ts
🏷️ الدالة: DeploymentService.checkDeploymentReadiness
🔢 الأسطر: 8-102
⚡ Async: نعم
📞 الاستدعاءات:
   • execAsync('node --version') (سطر 23)
   • stdout.trim() (سطر 24)
   • parseInt(version.substring(1).split('.')[0]) (سطر 25)
   • version.substring(1).split('.') (سطر 25)
   • version.substring(1) (سطر 25)
   • issues.push({
          severity: 'critical' as const,
          category: 'Runtime',
          message: `Node.js version ${version} is too old`,
          fix: 'Update to Node.js 18 or later'
        }) (سطر 28)
   • issues.push({
        severity: 'critical' as const,
        category: 'Runtime',
        message: 'Node.js not found',
        fix: 'Install Node.js'
      }) (سطر 37)
   • execAsync('pm2 --version') (سطر 48)
   • issues.push({
        severity: 'warning' as const,
        category: 'Process Manager',
        message: 'PM2 not installed',
        fix: 'npm install -g pm2'
      }) (سطر 50)
   • import('../storage') (سطر 61)
   • storage.testConnection() (سطر 62)
   • issues.push({
        severity: 'critical' as const,
        category: 'Database',
        message: 'Database connection failed',
        fix: 'Check DATABASE_URL and network connectivity'
      }) (سطر 64)
   • fs.access('/etc/letsencrypt') (سطر 75)
   • issues.push({
        severity: 'warning' as const,
        category: 'SSL',
        message: 'Let\'s Encrypt directory not found',
        fix: 'Install certbot: sudo apt install certbot'
      }) (سطر 77)
   • fs.access('/home/administrator/backups') (سطر 88)
   • issues.push({
        severity: 'warning' as const,
        category: 'Backup',
        message: 'Backup directory not found',
        fix: 'mkdir -p /home/administrator/backups'
      }) (سطر 90)
   • issues.filter(i => i.severity === 'critical') (سطر 99)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/deploymentService.ts
🏷️ الدالة: DeploymentService.setupForProduction
🔢 الأسطر: 104-167
⚡ Async: نعم
📞 الاستدعاءات:
   • fs.mkdir('/home/administrator/backups', { recursive: true }) (سطر 116)
   • fs.mkdir('/home/administrator/logs', { recursive: true }) (سطر 117)
   • steps.push({
        name: 'Create directories',
        success: true,
        message: 'Application directories created'
      }) (سطر 118)
   • steps.push({
        name: 'Create directories',
        success: false,
        message: `Failed to create directories: ${error}`
      }) (سطر 124)
   • execAsync('pm2 startup') (سطر 133)
   • steps.push({
        name: 'PM2 startup',
        success: true,
        message: 'PM2 startup script configured'
      }) (سطر 134)
   • steps.push({
        name: 'PM2 startup',
        success: false,
        message: `PM2 startup failed: ${error}`
      }) (سطر 140)
   • fs.readFile('.env', 'utf-8') (سطر 149)
   • envContent.replace(/NODE_ENV=.*/g, 'NODE_ENV=production') (سطر 150)
   • fs.writeFile('.env', updatedEnv) (سطر 151)
   • steps.push({
        name: 'Environment setup',
        success: true,
        message: 'Environment set to production'
      }) (سطر 152)
   • steps.push({
        name: 'Environment setup',
        success: false,
        message: `Environment setup failed: ${error}`
      }) (سطر 158)
   • steps.every(step => step.success) (سطر 165)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/fileManagerService.ts
🏷️ الدالة: FileManagerService.validatePath
🔢 الأسطر: 113-174
⚡ Async: نعم
🔑 الوسائط:
   • inputPath: string
📞 الاستدعاءات:
   • path.resolve(path.normalize(inputPath)) (سطر 116)
   • path.normalize(inputPath) (سطر 116)
   • inputPath.includes('..') (سطر 119)
   • inputPath.includes('./') (سطر 119)
   • inputPath.includes('.\\') (سطر 119)
   • logger.warn(`Directory traversal attempt detected: ${inputPath}`) (سطر 120)
   • this.config.allowedPaths.some(allowedPath => {
        // Support wildcard patterns like /home/administrator/app*
        if (allowedPath.endsWith('*')) {
          const basePath = allowedPath.slice(0, -1);
          return normalizedPath.startsWith(path.resolve(basePath));
        }
        return normalizedPath.startsWith(path.resolve(allowedPath));
      }) (سطر 129)
   • allowedPath.endsWith('*') (سطر 131)
   • allowedPath.slice(0, -1) (سطر 132)
   • normalizedPath.startsWith(path.resolve(basePath)) (سطر 133)
   • path.resolve(basePath) (سطر 133)
   • normalizedPath.startsWith(path.resolve(allowedPath)) (سطر 135)
   • path.resolve(allowedPath) (سطر 135)
   • logger.warn(`Access denied to path outside whitelist: ${normalizedPath}`) (سطر 139)
   • normalizedPath.includes('\0') (سطر 157)
   • logger.error(`Path validation error: ${error}`) (سطر 167)
🩺 التشخيص:
   ⚠️ دالة async لكن لا تستخدم await

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/fileManagerService.ts
🏷️ الدالة: FileManagerService.checkPermissions
🔢 الأسطر: 179-202
⚡ Async: نعم
🔑 الوسائط:
   • filePath: string
   • requiredPermission: "read" | "write" | "execute"
📞 الاستدعاءات:
   • fs.access(filePath, mode) (سطر 197)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/fileManagerService.ts
🏷️ الدالة: FileManagerService.setPermissions
🔢 الأسطر: 207-215
⚡ Async: نعم
🔑 الوسائط:
   • filePath: string
   • mode: string | number
📞 الاستدعاءات:
   • fs.chmod(filePath, mode) (سطر 209)
   • logger.error(`Failed to set permissions on ${filePath}: ${error}`) (سطر 212)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/fileManagerService.ts
🏷️ الدالة: FileManagerService.checkOwnership
🔢 الأسطر: 220-235
⚡ Async: نعم
🔑 الوسائط:
   • filePath: string
   • expectedUserId: string | undefined
📞 الاستدعاءات:
   • fs.stat(filePath) (سطر 222)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/fileManagerService.ts
🏷️ الدالة: FileManagerService.validateUserAccess
🔢 الأسطر: 240-255
⚡ Async: نعم
🔑 الوسائط:
   • fileId: string | undefined
   • userId: string
   • requiredPermission: "read" | "write" | "delete"
📞 الاستدعاءات:
   • this.storage.checkFilePermission(fileId, userId, requiredPermission) (سطر 250)
   • logger.error(`User access validation error: ${error}`) (سطر 252)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/fileManagerService.ts
🏷️ الدالة: FileManagerService.generateChecksum
🔢 الأسطر: 260-262
⚡ Async: نعم
🔑 الوسائط:
   • content: string | Buffer<ArrayBufferLike>
📞 الاستدعاءات:
   • crypto.createHash('sha256').update(content).digest('hex') (سطر 261)
   • crypto.createHash('sha256').update(content) (سطر 261)
   • crypto.createHash('sha256') (سطر 261)
🩺 التشخيص:
   ⚠️ دالة async لكن لا تستخدم await

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/fileManagerService.ts
🏷️ الدالة: FileManagerService.validateFileExtension
🔢 الأسطر: 267-270
⚡ Async: لا
🔑 الوسائط:
   • filename: string
📞 الاستدعاءات:
   • path.extname(filename).toLowerCase() (سطر 268)
   • path.extname(filename) (سطر 268)
   • this.config.allowedExtensions.includes(ext) (سطر 269)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/fileManagerService.ts
🏷️ الدالة: FileManagerService.createAuditLog
🔢 الأسطر: 275-301
⚡ Async: نعم
🔑 الوسائط:
   • action: string
   • userId: string
   • fileId: string | undefined
   • details: string | undefined
   • oldValue: any
   • newValue: any
   • ipAddress: string | undefined
   • userAgent: string | undefined
📞 الاستدعاءات:
   • this.storage.createAuditLog({
        fileId: fileId || null,
        action: action as any,
        userId,
        details: details || null,
        oldValue: oldValue || null,
        newValue: newValue || null,
        ipAddress: ipAddress || null,
        userAgent: userAgent || null,
      }) (سطر 288)
   • logger.error(`Failed to create audit log: ${error}`) (سطر 299)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/fileManagerService.ts
🏷️ الدالة: FileManagerService.readFile
🔢 الأسطر: 312-389
⚡ Async: نعم
🔑 الوسائط:
   • filePath: string
   • userId: string
   • options: { encoding?: BufferEncoding | undefined; ipAddress?: string | undefined; userAgent?: string | undefined; } | undefined
📞 الاستدعاءات:
   • this.validatePath(filePath) (سطر 319)
   • existsSync(normalizedPath) (سطر 331)
   • this.checkPermissions(normalizedPath, 'read') (سطر 340)
   • this.storage.getFileByPath(normalizedPath, userId) (سطر 350)
   • this.validateUserAccess(dbFile.id, userId, 'read') (سطر 354)
   • this.createAuditLog('access', userId, dbFile.id, 'Access denied - insufficient permissions', null, null, options?.ipAddress, options?.userAgent) (سطر 356)
   • fs.readFile(normalizedPath, options?.encoding || 'utf8') (سطر 366)
   • this.createAuditLog('access', userId, dbFile?.id, 'File read successfully', null, null, options?.ipAddress, options?.userAgent) (سطر 369)
   • logger.error(`Read file error: ${error}`) (سطر 382)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/fileManagerService.ts
🏷️ الدالة: FileManagerService.writeFile
🔢 الأسطر: 394-529
⚡ Async: نعم
🔑 الوسائط:
   • filePath: string
   • content: string | Buffer<ArrayBufferLike>
   • userId: string
   • options: { createBackup?: boolean | undefined; metadata?: Record<string, any> | undefined; ipAddress?: string | undefined; userAgent?: string | undefined; } | undefined
📞 الاستدعاءات:
   • this.validatePath(filePath) (سطر 407)
   • path.basename(normalizedPath) (سطر 417)
   • this.validateFileExtension(filename) (سطر 420)
   • Buffer.isBuffer(content) (سطر 429)
   • Buffer.from(content) (سطر 429)
   • existsSync(normalizedPath) (سطر 439)
   • this.checkPermissions(normalizedPath, 'write') (سطر 444)
   • this.storage.getFileByPath(normalizedPath, userId) (سطر 454)
   • this.validateUserAccess(dbFile.id, userId, 'write') (سطر 458)
   • this.createAuditLog('update', userId, dbFile.id, 'Write access denied', null, null, options?.ipAddress, options?.userAgent) (سطر 460)
   • fs.readFile(normalizedPath, 'utf8') (سطر 470)
   • this.storage.createBackup(dbFile.id, oldContent, userId) (سطر 471)
   • path.dirname(normalizedPath) (سطر 476)
   • fs.mkdir(dirname, { recursive: true }) (سطر 477)
   • this.generateChecksum(contentBuffer) (سطر 481)
   • fs.writeFile(normalizedPath, contentBuffer) (سطر 484)
   • this.storage.updateFile(dbFile.id, {
          size: contentBuffer.length,
          content: contentBuffer.length < 1024 ? content.toString() : null, // Store small files in DB
          checksum,
          metadata: { ...(dbFile.metadata || {}), ...options?.metadata },
          updatedAt: new Date()
        }, userId) (سطر 489)
   • content.toString() (سطر 491)
   • this.createAuditLog('update', userId, dbFile.id, 'File updated', null, { size: contentBuffer.length, checksum }, options?.ipAddress, options?.userAgent) (سطر 497)
   • this.storage.createFile({
          name: filename,
          type: 'file',
          path: normalizedPath,
          filePath: normalizedPath,
          size: contentBuffer.length,
          mimeType: this.getMimeType(filename),
          content: contentBuffer.length < 1024 ? content.toString() : null,
          checksum,
          ownerId: userId,
          metadata: options?.metadata || {}
        }) (سطر 500)
   • this.getMimeType(filename) (سطر 506)
   • content.toString() (سطر 507)
   • this.createAuditLog('create', userId, dbFile.id, 'File created', null, { size: contentBuffer.length, checksum }, options?.ipAddress, options?.userAgent) (سطر 513)
   • logger.error(`Write file error: ${error}`) (سطر 522)
🩺 التشخيص:
   ⚠️ استدعاء content.toString() بدون تحديد الترميز (قد يسبب مشاكل)
   ⚠️ استدعاء content.toString() بدون تحديد الترميز (قد يسبب مشاكل)

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/fileManagerService.ts
🏷️ الدالة: FileManagerService.createDirectory
🔢 الأسطر: 534-599
⚡ Async: نعم
🔑 الوسائط:
   • dirPath: string
   • userId: string
   • options: { recursive?: boolean | undefined; mode?: string | number | undefined; metadata?: Record<string, any> | undefined; ipAddress?: string | undefined; userAgent?: string | undefined; } | undefined
📞 الاستدعاءات:
   • this.validatePath(dirPath) (سطر 547)
   • existsSync(normalizedPath) (سطر 559)
   • fs.mkdir(normalizedPath, { 
        recursive: options?.recursive !== false,
        mode: options?.mode || 0o755 
      }) (سطر 568)
   • this.storage.createFile({
        name: path.basename(normalizedPath),
        type: 'folder',
        path: normalizedPath,
        filePath: normalizedPath,
        size: 0,
        ownerId: userId,
        metadata: options?.metadata || {}
      }) (سطر 574)
   • path.basename(normalizedPath) (سطر 575)
   • this.createAuditLog('create', userId, dbFolder.id, 'Directory created', null, { path: normalizedPath }, options?.ipAddress, options?.userAgent) (سطر 584)
   • logger.error(`Create directory error: ${error}`) (سطر 592)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/fileManagerService.ts
🏷️ الدالة: FileManagerService.deleteFile
🔢 الأسطر: 604-682
⚡ Async: نعم
🔑 الوسائط:
   • filePath: string
   • userId: string
   • options: { permanent?: boolean | undefined; ipAddress?: string | undefined; userAgent?: string | undefined; } | undefined
📞 الاستدعاءات:
   • this.validatePath(filePath) (سطر 615)
   • existsSync(normalizedPath) (سطر 627)
   • this.storage.getFileByPath(normalizedPath, userId) (سطر 636)
   • this.validateUserAccess(dbFile.id, userId, 'delete') (سطر 640)
   • this.createAuditLog('delete', userId, dbFile.id, 'Delete access denied', null, null, options?.ipAddress, options?.userAgent) (سطر 642)
   • fs.rm(normalizedPath, { recursive: true, force: true }) (سطر 652)
   • this.storage.deleteFile(dbFile.id, userId) (سطر 653)
   • this.createAuditLog('delete', userId, dbFile.id, 'File permanently deleted', { path: normalizedPath }, null, options?.ipAddress, options?.userAgent) (سطر 655)
   • this.storage.moveToTrash(dbFile.id, userId) (سطر 658)
   • this.createAuditLog('delete', userId, dbFile.id, 'File moved to trash', { path: normalizedPath }, null, options?.ipAddress, options?.userAgent) (سطر 660)
   • fs.rm(normalizedPath, { recursive: true, force: true }) (سطر 665)
   • logger.error(`Delete file error: ${error}`) (سطر 675)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/fileManagerService.ts
🏷️ الدالة: FileManagerService.moveFile
🔢 الأسطر: 687-798
⚡ Async: نعم
🔑 الوسائط:
   • sourcePath: string
   • destinationPath: string
   • userId: string
   • options: { overwrite?: boolean | undefined; ipAddress?: string | undefined; userAgent?: string | undefined; } | undefined
📞 الاستدعاءات:
   • this.validatePath(sourcePath) (سطر 699)
   • this.validatePath(destinationPath) (سطر 700)
   • existsSync(normalizedSource) (سطر 722)
   • existsSync(normalizedDest) (سطر 731)
   • this.storage.getFileByPath(normalizedSource, userId) (سطر 740)
   • this.validateUserAccess(sourceDbFile.id, userId, 'write') (سطر 744)
   • fs.mkdir(path.dirname(normalizedDest), { recursive: true }) (سطر 755)
   • path.dirname(normalizedDest) (سطر 755)
   • fs.rename(normalizedSource, normalizedDest) (سطر 758)
   • this.storage.updateFile(sourceDbFile.id, {
          path: normalizedDest,
          filePath: normalizedDest,
          name: path.basename(normalizedDest),
          updatedAt: new Date()
        }, userId) (سطر 762)
   • path.basename(normalizedDest) (سطر 765)
   • this.createAuditLog(
          'move', 
          userId, 
          sourceDbFile.id, 
          'File moved', 
          { path: normalizedSource }, 
          { path: normalizedDest },
          options?.ipAddress, 
          options?.userAgent
        ) (سطر 769)
   • logger.error(`Move file error: ${error}`) (سطر 791)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/fileManagerService.ts
🏷️ الدالة: FileManagerService.copyFile
🔢 الأسطر: 803-931
⚡ Async: نعم
🔑 الوسائط:
   • sourcePath: string
   • destinationPath: string
   • userId: string
   • options: { overwrite?: boolean | undefined; preserveMetadata?: boolean | undefined; ipAddress?: string | undefined; userAgent?: string | undefined; } | undefined
📞 الاستدعاءات:
   • this.validatePath(sourcePath) (سطر 816)
   • this.validatePath(destinationPath) (سطر 817)
   • existsSync(normalizedSource) (سطر 839)
   • existsSync(normalizedDest) (سطر 848)
   • this.storage.getFileByPath(normalizedSource, userId) (سطر 857)
   • this.validateUserAccess(sourceDbFile.id, userId, 'read') (سطر 861)
   • fs.mkdir(path.dirname(normalizedDest), { recursive: true }) (سطر 872)
   • path.dirname(normalizedDest) (سطر 872)
   • fs.copyFile(normalizedSource, normalizedDest) (سطر 875)
   • fs.stat(normalizedDest) (سطر 878)
   • fs.readFile(normalizedDest, 'utf8') (سطر 884)
   • this.generateChecksum(content) (سطر 885)
   • this.storage.createFile({
        name: path.basename(normalizedDest),
        type: stats.isDirectory() ? 'folder' : 'file',
        path: normalizedDest,
        filePath: normalizedDest,
        size: stats.size,
        mimeType: this.getMimeType(path.basename(normalizedDest)),
        content,
        checksum,
        ownerId: userId,
        metadata: options?.preserveMetadata && sourceDbFile ? sourceDbFile.metadata : {}
      }) (سطر 889)
   • path.basename(normalizedDest) (سطر 890)
   • stats.isDirectory() (سطر 891)
   • this.getMimeType(path.basename(normalizedDest)) (سطر 895)
   • path.basename(normalizedDest) (سطر 895)
   • this.createAuditLog(
        'copy', 
        userId, 
        destDbFile.id, 
        'File copied', 
        { source: normalizedSource }, 
        { destination: normalizedDest },
        options?.ipAddress, 
        options?.userAgent
      ) (سطر 902)
   • logger.error(`Copy file error: ${error}`) (سطر 924)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/fileManagerService.ts
🏷️ الدالة: FileManagerService.getFileInfo
🔢 الأسطر: 936-987
⚡ Async: نعم
🔑 الوسائط:
   • filePath: string
   • userId: string
📞 الاستدعاءات:
   • this.validatePath(filePath) (سطر 938)
   • existsSync(normalizedPath) (سطر 949)
   • fs.stat(normalizedPath) (سطر 957)
   • this.storage.getFileByPath(normalizedPath, userId) (سطر 958)
   • path.basename(normalizedPath) (سطر 962)
   • stats.isDirectory() (سطر 963)
   • stats.isFile() (سطر 966)
   • this.getMimeType(path.basename(normalizedPath)) (سطر 966)
   • path.basename(normalizedPath) (سطر 966)
   • stats.mode.toString(8) (سطر 967)
   • logger.error(`Get file info error: ${error}`) (سطر 980)
🩺 التشخيص:
   ⚠️ استدعاء stats.mode.toString(8) بدون تحديد الترميز (قد يسبب مشاكل)

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/fileManagerService.ts
🏷️ الدالة: FileManagerService.getDirectoryListing
🔢 الأسطر: 992-1075
⚡ Async: نعم
🔑 الوسائط:
   • dirPath: string
   • userId: string
   • options: { recursive?: boolean | undefined; includeHidden?: boolean | undefined; } | undefined
📞 الاستدعاءات:
   • this.validatePath(dirPath) (سطر 1001)
   • existsSync(normalizedPath) (سطر 1012)
   • fs.stat(normalizedPath) (سطر 1020)
   • stats.isDirectory() (سطر 1021)
   • fs.readdir(normalizedPath, { withFileTypes: true }) (سطر 1030)
   • entry.name.startsWith('.') (سطر 1035)
   • path.join(normalizedPath, entry.name) (سطر 1039)
   • fs.stat(entryPath) (سطر 1040)
   • this.storage.getFileByPath(entryPath, userId) (سطر 1041)
   • listing.push({
          id: dbFile?.id,
          name: entry.name,
          type: entry.isDirectory() ? 'folder' : 'file',
          path: entryPath,
          size: entryStats.size,
          mimeType: entry.isFile() ? this.getMimeType(entry.name) : undefined,
          permissions: entryStats.mode.toString(8),
          created: entryStats.birthtime,
          modified: entryStats.mtime,
          checksum: dbFile?.checksum || undefined,
          metadata: dbFile?.metadata || {}
        }) (سطر 1043)
   • entry.isDirectory() (سطر 1046)
   • entry.isFile() (سطر 1049)
   • this.getMimeType(entry.name) (سطر 1049)
   • entryStats.mode.toString(8) (سطر 1050)
   • logger.error(`Get directory listing error: ${error}`) (سطر 1068)
🩺 التشخيص:
   ⚠️ استدعاء entryStats.mode.toString(8) بدون تحديد الترميز (قد يسبب مشاكل)

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/fileManagerService.ts
🏷️ الدالة: FileManagerService.createBackup
🔢 الأسطر: 1086-1141
⚡ Async: نعم
🔑 الوسائط:
   • fileId: string
   • userId: string
   • comment: string | undefined
📞 الاستدعاءات:
   • this.storage.getFile(fileId, userId) (سطر 1092)
   • this.validateUserAccess(fileId, userId, 'read') (سطر 1102)
   • fs.readFile(file.filePath, 'utf8') (سطر 1117)
   • logger.warn(`Could not read file content for backup: ${error}`) (سطر 1119)
   • this.storage.createBackup(fileId, content, userId) (سطر 1124)
   • this.createAuditLog('create', userId, fileId, `Backup created: ${comment || 'Manual backup'}`) (سطر 1126)
   • logger.error(`Create backup error: ${error}`) (سطر 1134)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/fileManagerService.ts
🏷️ الدالة: FileManagerService.getFileVersions
🔢 الأسطر: 1146-1186
⚡ Async: نعم
🔑 الوسائط:
   • fileId: string
   • userId: string
📞 الاستدعاءات:
   • this.storage.getFile(fileId, userId) (سطر 1148)
   • this.validateUserAccess(fileId, userId, 'read') (سطر 1158)
   • this.storage.getFileBackups(fileId, userId) (سطر 1167)
   • logger.error(`Get file versions error: ${error}`) (سطر 1179)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/fileManagerService.ts
🏷️ الدالة: FileManagerService.restoreVersion
🔢 الأسطر: 1191-1233
⚡ Async: نعم
🔑 الوسائط:
   • backupId: string
   • userId: string
   • options: { createBackupBeforeRestore?: boolean | undefined; ipAddress?: string | undefined; userAgent?: string | undefined; } | undefined
📞 الاستدعاءات:
   • this.storage.restoreBackup(backupId, userId) (سطر 1207)
   • this.createAuditLog(
        'restore', 
        userId, 
        restoredFile.id, 
        'Version restored', 
        null, 
        { backupId },
        options?.ipAddress, 
        options?.userAgent
      ) (سطر 1209)
   • logger.error(`Restore version error: ${error}`) (سطر 1226)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/fileManagerService.ts
🏷️ الدالة: FileManagerService.searchFiles
🔢 الأسطر: 1244-1311
⚡ Async: نعم
🔑 الوسائط:
   • userId: string
   • query: string
   • options: import("/home/administrator/Panel/server/services/fileManagerService").SearchOptions | undefined
📞 الاستدعاءات:
   • this.storage.searchFiles(userId, query, {
        type: options?.type,
        tags: options?.tags
      }) (سطر 1251)
   • filteredFiles.filter(file => {
          if (file.type === 'folder') return true;
          const ext = path.extname(file.name).toLowerCase();
          return options.extensions!.includes(ext);
        }) (سطر 1260)
   • path.extname(file.name).toLowerCase() (سطر 1262)
   • path.extname(file.name) (سطر 1262)
   • options.extensions!.includes(ext) (سطر 1263)
   • filteredFiles.filter(file => (file.size || 0) >= options.sizeMin!) (سطر 1268)
   • filteredFiles.filter(file => (file.size || 0) <= options.sizeMax!) (سطر 1272)
   • filteredFiles.filter(file => file.createdAt && file.createdAt >= options.dateFrom!) (سطر 1276)
   • filteredFiles.filter(file => file.createdAt && file.createdAt <= options.dateTo!) (سطر 1280)
   • query.trim() (سطر 1284)
   • filteredFiles.filter(file => 
          file.content && file.content.toLowerCase().includes(query.toLowerCase())
        ) (سطر 1285)
   • file.content.toLowerCase().includes(query.toLowerCase()) (سطر 1286)
   • file.content.toLowerCase() (سطر 1286)
   • query.toLowerCase() (سطر 1286)
   • logger.error(`Search files error: ${error}`) (سطر 1304)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/fileManagerService.ts
🏷️ الدالة: FileManagerService.getMimeType
🔢 الأسطر: 1322-1345
⚡ Async: لا
🔑 الوسائط:
   • filename: string
📞 الاستدعاءات:
   • path.extname(filename).toLowerCase() (سطر 1323)
   • path.extname(filename) (سطر 1323)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/fileManagerService.ts
🏷️ الدالة: FileManagerService.getConfig
🔢 الأسطر: 1350-1352
⚡ Async: لا
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/fileManagerService.ts
🏷️ الدالة: FileManagerService.updateConfig
🔢 الأسطر: 1357-1359
⚡ Async: لا
🔑 الوسائط:
   • newConfig: Partial<import("/home/administrator/Panel/server/services/fileManagerService").FileManagerConfig>
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/logService.ts
🏷️ الدالة: SecurityUtils.validateAppName
🔢 الأسطر: 16-31
⚡ Async: لا
🔑 الوسائط:
   • appName: string
📞 الاستدعاءات:
   • /^[a-zA-Z0-9_-]+$/.test(appName) (سطر 22)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/logService.ts
🏷️ الدالة: SecurityUtils.validateLines
🔢 الأسطر: 36-42
⚡ Async: لا
🔑 الوسائط:
   • lines: number
📞 الاستدعاءات:
   • parseInt(String(lines), 10) (سطر 37)
   • String(lines) (سطر 37)
   • isNaN(numLines) (سطر 38)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/logService.ts
🏷️ الدالة: SecurityUtils.validateServiceName
🔢 الأسطر: 47-62
⚡ Async: لا
🔑 الوسائط:
   • service: string
📞 الاستدعاءات:
   • /^[a-zA-Z0-9_.-]+(@[a-zA-Z0-9_.-]+)?$/.test(service) (سطر 53)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/logService.ts
🏷️ الدالة: SecurityUtils.validateSearchQuery
🔢 الأسطر: 67-85
⚡ Async: لا
🔑 الوسائط:
   • query: string
📞 الاستدعاءات:
   • query.replace(/[`$()\\|&;<>"']/g, '') (سطر 78)
   • console.warn('Search query contained potentially dangerous characters and was sanitized') (سطر 81)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/logService.ts
🏷️ الدالة: SecurityUtils.validateLogSource
🔢 الأسطر: 90-96
⚡ Async: لا
🔑 الوسائط:
   • source: string
📞 الاستدعاءات:
   • validSources.includes(source) (سطر 92)
   • validSources.join(', ') (سطر 93)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/logService.ts
🏷️ الدالة: SecurityUtils.escapeShellArg
🔢 الأسطر: 101-104
⚡ Async: لا
🔑 الوسائط:
   • arg: string
📞 الاستدعاءات:
   • arg.replace(/'/g, "'\\''") (سطر 103)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/logService.ts
🏷️ الدالة: SecurityUtils.validateLogPath
🔢 الأسطر: 109-133
⚡ Async: لا
🔑 الوسائط:
   • logPath: string
📞 الاستدعاءات:
   • path.normalize(logPath) (سطر 110)
   • normalizedPath.includes('..') (سطر 113)
   • allowedPaths.some(allowedPath => 
      normalizedPath.startsWith(allowedPath)
    ) (سطر 124)
   • normalizedPath.startsWith(allowedPath) (سطر 125)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/logService.ts
🏷️ الدالة: LogService.getApplicationLogs
🔢 الأسطر: 156-179
⚡ Async: نعم
🔑 الوسائط:
   • appName: string
   • lines: number
📞 الاستدعاءات:
   • SecurityUtils.validateAppName(appName) (سطر 159)
   • SecurityUtils.validateLines(lines) (سطر 160)
   • SecurityUtils.escapeShellArg(validatedAppName) (سطر 163)
   • execAsync(`pm2 logs ${escapedAppName} --lines ${validatedLines} --nostream --raw`) (سطر 164)
   • this.parsePM2Logs(stdout) (سطر 166)
   • SecurityUtils.validateAppName(appName) (سطر 170)
   • SecurityUtils.validateLogPath(logPath) (سطر 172)
   • fs.readFile(validatedLogPath, 'utf8') (سطر 173)
   • this.parseGenericLogs(content, lines) (سطر 174)
🩺 التشخيص:
   ⚠️ الوسيط 'lines' بدون نوع صريح (implicit any)

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/logService.ts
🏷️ الدالة: LogService.getNginxLogs
🔢 الأسطر: 181-198
⚡ Async: نعم
🔑 الوسائط:
   • type: "error" | "access"
   • lines: number
📞 الاستدعاءات:
   • SecurityUtils.validateLines(lines) (سطر 184)
   • SecurityUtils.validateLogPath(logPath) (سطر 186)
   • SecurityUtils.escapeShellArg(validatedLogPath) (سطر 189)
   • execAsync(`sudo tail -n ${validatedLines} ${escapedLogPath}`) (سطر 190)
   • this.parseNginxLogs(stdout, type) (سطر 192)
   • console.warn(`Failed to get nginx logs: ${error instanceof Error ? error.message : 'Unknown error'}`) (سطر 194)
🩺 التشخيص:
   ⚠️ الوسيط 'lines' بدون نوع صريح (implicit any)

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/logService.ts
🏷️ الدالة: LogService.getSystemLogs
🔢 الأسطر: 200-219
⚡ Async: نعم
🔑 الوسائط:
   • service: string | undefined
   • lines: number
📞 الاستدعاءات:
   • SecurityUtils.validateLines(lines) (سطر 203)
   • SecurityUtils.validateServiceName(service) (سطر 207)
   • SecurityUtils.escapeShellArg(validatedService) (سطر 208)
   • execAsync(command) (سطر 212)
   • this.parseJournalLogs(stdout) (سطر 213)
   • console.warn(`Failed to get system logs: ${error instanceof Error ? error.message : 'Unknown error'}`) (سطر 215)
🩺 التشخيص:
   ⚠️ الوسيط 'lines' بدون نوع صريح (implicit any)

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/logService.ts
🏷️ الدالة: LogService.searchLogs
🔢 الأسطر: 221-245
⚡ Async: نعم
🔑 الوسائط:
   • query: string
   • source: string | undefined
   • level: string | undefined
📞 الاستدعاءات:
   • SecurityUtils.validateSearchQuery(query) (سطر 224)
   • SecurityUtils.escapeShellArg(validatedQuery) (سطر 225)
   • SecurityUtils.validateLogSource(source) (سطر 230)
   • SecurityUtils.validateLogSource(source) (سطر 233)
   • execAsync(grepCommand) (سطر 240)
   • this.parseGenericLogs(stdout) (سطر 241)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/logService.ts
🏷️ الدالة: LogService.tailLogs
🔢 الأسطر: 247-300
⚡ Async: نعم
🔑 الوسائط:
   • source: string
   • appName: string | undefined
📞 الاستدعاءات:
   • SecurityUtils.validateLogSource(source) (سطر 256)
   • SecurityUtils.validateAppName(appName) (سطر 264)
   • SecurityUtils.escapeShellArg(validatedAppName) (سطر 265)
   • console.warn('Invalid log source or missing app name for PM2 logs') (سطر 270)
   • exec(command, { signal: controller.signal }) (سطر 275)
   • chunk.toString().split('\n') (سطر 279)
   • chunk.toString() (سطر 279)
   • line.trim() (سطر 281)
   • new Date().toISOString() (سطر 283)
   • line.trim() (سطر 285)
   • console.warn('Failed to setup log tailing:', error) (سطر 296)
🩺 التشخيص:
   ⚠️ دالة async لكن لا تستخدم await
   ⚠️ استدعاء chunk.toString().split('\n') بدون تحديد الترميز (قد يسبب مشاكل)
   ⚠️ استدعاء chunk.toString() بدون تحديد الترميز (قد يسبب مشاكل)

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/logService.ts
🏷️ الدالة: LogService.getApplicationLogs
🔢 الأسطر: 302-347
⚡ Async: نعم
🔑 الوسائط:
   • applicationId: string
   • options: LogOptions
📞 الاستدعاءات:
   • path.join(require('os').homedir(), '.pm2/logs') (سطر 307)
   • require('os').homedir() (سطر 307)
   • require('os') (سطر 307)
   • path.join(process.cwd(), '.pm2/logs') (سطر 308)
   • process.cwd() (سطر 308)
   • fs.existsSync(pm2LogDir) (سطر 316)
   • path.join(pm2LogDir, `${applicationId}-out.log`) (سطر 318)
   • path.join(pm2LogDir, `${applicationId}-error.log`) (سطر 319)
   • fs.existsSync(pm2LogPath) (سطر 322)
   • fs.promises.readFile(pm2LogPath, 'utf8') (سطر 323)
   • this.parseLogContent(content, 'pm2', applicationId) (سطر 324)
   • logs.push(...logLines) (سطر 325)
   • fs.existsSync(pm2ErrorLogPath) (سطر 329)
   • fs.promises.readFile(pm2ErrorLogPath, 'utf8') (سطر 330)
   • this.parseLogContent(content, 'pm2', applicationId, 'error') (سطر 331)
   • logs.push(...errorLines) (سطر 332)
   • console.log(`📁 وُجدت سجلات PM2 في: ${pm2LogDir}`) (سطر 337)
   • this.filterAndSortLogs(logs, options) (سطر 342)
   • console.error('Error reading application logs:', error) (سطر 344)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/logService.ts
🏷️ الدالة: LogService.getNginxLogs
🔢 الأسطر: 349-395
⚡ Async: نعم
🔑 الوسائط:
   • options: LogOptions
📞 الاستدعاءات:
   • path.join(getNginxPath(), 'logs') (سطر 357)
   • getNginxPath() (سطر 357)
   • fs.existsSync(nginxLogDir) (سطر 364)
   • path.join(nginxLogDir, 'access.log') (سطر 366)
   • path.join(nginxLogDir, 'error.log') (سطر 367)
   • fs.existsSync(accessLogPath) (سطر 370)
   • fs.promises.readFile(accessLogPath, 'utf8') (سطر 371)
   • this.parseLogContent(content, 'nginx') (سطر 372)
   • logs.push(...accessLines) (سطر 373)
   • fs.existsSync(errorLogPath) (سطر 377)
   • fs.promises.readFile(errorLogPath, 'utf8') (سطر 378)
   • this.parseLogContent(content, 'nginx', undefined, 'error') (سطر 379)
   • logs.push(...errorLines) (سطر 380)
   • console.log(`📁 وُجدت سجلات Nginx في: ${nginxLogDir}`) (سطر 385)
   • this.filterAndSortLogs(logs, options) (سطر 390)
   • console.error('Error reading nginx logs:', error) (سطر 392)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/logService.ts
🏷️ الدالة: LogService.parseLogContent
🔢 الأسطر: 398-403
⚡ Async: لا
🔑 الوسائط:
   • content: string
   • source: string
   • appId: string | undefined
   • type: string | undefined
📞 الاستدعاءات:
   • this.parseGenericLogs(content, undefined, source, appId, type) (سطر 402)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/logService.ts
🏷️ الدالة: LogService.filterAndSortLogs
🔢 الأسطر: 405-409
⚡ Async: لا
🔑 الوسائط:
   • logs: import("/home/administrator/Panel/server/services/logService").LogEntry[]
   • options: LogOptions
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/logService.ts
🏷️ الدالة: LogService.parsePM2Logs
🔢 الأسطر: 411-434
⚡ Async: لا
🔑 الوسائط:
   • content: string
📞 الاستدعاءات:
   • content.split('\n').filter(line => line.trim()) (سطر 412)
   • content.split('\n') (سطر 412)
   • line.trim() (سطر 412)
   • lines.map(line => {
      // PM2 log format: timestamp|level|app|message
      const match = line.match(/^(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z)\s*\|\s*(\w+)\s*\|\s*(\w+)\s*\|\s*(.+)$/);

      if (match) {
        return {
          timestamp: match[1],
          level: match[2].toLowerCase(),
          message: match[4],
          source: 'pm2'
        };
      }

      return {
        timestamp: new Date().toISOString(),
        level: 'info',
        message: line,
        source: 'pm2'
      };
    }) (سطر 414)
   • line.match(/^(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z)\s*\|\s*(\w+)\s*\|\s*(\w+)\s*\|\s*(.+)$/) (سطر 416)
   • match[2].toLowerCase() (سطر 421)
   • new Date().toISOString() (سطر 428)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/logService.ts
🏷️ الدالة: LogService.parseNginxLogs
🔢 الأسطر: 436-469
⚡ Async: لا
🔑 الوسائط:
   • content: string
   • type: "error" | "access"
📞 الاستدعاءات:
   • content.split('\n').filter(line => line.trim()) (سطر 437)
   • content.split('\n') (سطر 437)
   • line.trim() (سطر 437)
   • lines.map(line => {
      if (type === 'error') {
        // Nginx error log format: timestamp [level] message
        const match = line.match(/^(\d{4}\/\d{2}\/\d{2} \d{2}:\d{2}:\d{2}) \[(\w+)\] (.+)$/);

        if (match) {
          return {
            timestamp: new Date(match[1]).toISOString(),
            level: match[2],
            message: match[3],
            source: 'nginx'
          };
        }
      } else {
        // Nginx access log - treat as info level
        return {
          timestamp: new Date().toISOString(),
          level: 'info',
          message: line,
          source: 'nginx'
        };
      }

      return {
        timestamp: new Date().toISOString(),
        level: 'info',
        message: line,
        source: 'nginx'
      };
    }) (سطر 439)
   • line.match(/^(\d{4}\/\d{2}\/\d{2} \d{2}:\d{2}:\d{2}) \[(\w+)\] (.+)$/) (سطر 442)
   • new Date(match[1]).toISOString() (سطر 446)
   • new Date().toISOString() (سطر 455)
   • new Date().toISOString() (سطر 463)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/logService.ts
🏷️ الدالة: LogService.parseJournalLogs
🔢 الأسطر: 471-497
⚡ Async: لا
🔑 الوسائط:
   • content: string
📞 الاستدعاءات:
   • content.split('\n').filter(line => line.trim()) (سطر 472)
   • content.split('\n') (سطر 472)
   • line.trim() (سطر 472)
   • lines.map(line => {
      // Journal log format: timestamp hostname service[pid]: message
      const match = line.match(/^(\w{3} \d{2} \d{2}:\d{2}:\d{2}) (\w+) (.+?)\[(\d+)\]: (.+)$/);

      if (match) {
        const currentYear = new Date().getFullYear();
        const timestamp = new Date(`${currentYear} ${match[1]}`).toISOString();

        return {
          timestamp,
          level: 'info',
          message: match[5],
          source: 'system'
        };
      }

      return {
        timestamp: new Date().toISOString(),
        level: 'info',
        message: line,
        source: 'system'
      };
    }) (سطر 474)
   • line.match(/^(\w{3} \d{2} \d{2}:\d{2}:\d{2}) (\w+) (.+?)\[(\d+)\]: (.+)$/) (سطر 476)
   • new Date().getFullYear() (سطر 479)
   • new Date(`${currentYear} ${match[1]}`).toISOString() (سطر 480)
   • new Date().toISOString() (سطر 491)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/logService.ts
🏷️ الدالة: LogService.parseGenericLogs
🔢 الأسطر: 499-512
⚡ Async: لا
🔑 الوسائط:
   • content: string
   • lines: number | undefined
   • source: string
   • appId: string | undefined
   • type: string | undefined
📞 الاستدعاءات:
   • content.split('\n').filter(line => line.trim()) (سطر 500)
   • content.split('\n') (سطر 500)
   • line.trim() (سطر 500)
   • logLines.splice(0, Math.max(0, logLines.length - lines)) (سطر 503)
   • Math.max(0, logLines.length - lines) (سطر 503)
   • logLines.map(line => ({
      timestamp: new Date().toISOString(),
      level: this.detectLogLevel(line),
      message: line,
      source: source
    })) (سطر 506)
   • new Date().toISOString() (سطر 507)
   • this.detectLogLevel(line) (سطر 508)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/logService.ts
🏷️ الدالة: LogService.detectLogLevel
🔢 الأسطر: 514-526
⚡ Async: لا
🔑 الوسائط:
   • message: string
📞 الاستدعاءات:
   • message.toLowerCase() (سطر 515)
   • lowerMessage.includes('error') (سطر 517)
   • lowerMessage.includes('err') (سطر 517)
   • lowerMessage.includes('warn') (سطر 519)
   • lowerMessage.includes('warning') (سطر 519)
   • lowerMessage.includes('debug') (سطر 521)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/monitoringService.ts
🏷️ الدالة: MonitoringService.startMonitoring
🔢 الأسطر: 54-79
⚡ Async: نعم
🔑 الوسائط:
   • intervalMs: number
📞 الاستدعاءات:
   • console.log('🔍 Starting system monitoring...') (سطر 60)
   • setInterval(async () => {
      try {
        const metrics = await this.collectMetrics();
        this.emit('metrics', metrics);
      } catch (error) {
        console.error('Error collecting metrics:', error);
        this.emit('error', error);
      }
    }, intervalMs) (سطر 62)
   • this.collectMetrics() (سطر 64)
   • this.emit('metrics', metrics) (سطر 65)
   • console.error('Error collecting metrics:', error) (سطر 67)
   • this.emit('error', error) (سطر 68)
   • this.collectMetrics() (سطر 74)
   • this.emit('metrics', metrics) (سطر 75)
   • console.error('Error collecting initial metrics:', error) (سطر 77)
🩺 التشخيص:
   ⚠️ الوسيط 'intervalMs' بدون نوع صريح (implicit any)

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/monitoringService.ts
🏷️ الدالة: MonitoringService.stopMonitoring
🔢 الأسطر: 81-88
⚡ Async: لا
📞 الاستدعاءات:
   • clearInterval(this.monitoringInterval) (سطر 83)
   • console.log('🛑 Stopped system monitoring') (سطر 87)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/monitoringService.ts
🏷️ الدالة: MonitoringService.collectMetrics
🔢 الأسطر: 90-107
⚡ Async: نعم
📞 الاستدعاءات:
   • Promise.all([
      this.getCPUInfo(),
      this.getMemoryInfo(),
      this.getDiskInfo(),
      this.getNetworkInfo(),
      this.getProcessInfo()
    ]) (سطر 91)
   • this.getCPUInfo() (سطر 92)
   • this.getMemoryInfo() (سطر 93)
   • this.getDiskInfo() (سطر 94)
   • this.getNetworkInfo() (سطر 95)
   • this.getProcessInfo() (سطر 96)
   • Date.now() (سطر 100)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/monitoringService.ts
🏷️ الدالة: MonitoringService.getCPUInfo
🔢 الأسطر: 109-131
⚡ Async: نعم
📞 الاستدعاءات:
   • execAsync(
        "top -bn1 | grep '%Cpu' | awk '{print $2}' | sed 's/%us,//'"
      ) (سطر 112)
   • execAsync("uptime | awk -F'load average:' '{print $2}'") (سطر 117)
   • loadAvg.trim().split(',').map(x => parseFloat(x.trim())) (سطر 118)
   • loadAvg.trim().split(',') (سطر 118)
   • loadAvg.trim() (سطر 118)
   • parseFloat(x.trim()) (سطر 118)
   • x.trim() (سطر 118)
   • execAsync("ps aux | wc -l") (سطر 121)
   • parseFloat(cpuUsage.trim()) (سطر 124)
   • cpuUsage.trim() (سطر 124)
   • loadAverage.slice(0, 3) (سطر 125)
   • parseInt(processCount.trim()) (سطر 126)
   • processCount.trim() (سطر 126)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/monitoringService.ts
🏷️ الدالة: MonitoringService.getMemoryInfo
🔢 الأسطر: 133-153
⚡ Async: نعم
📞 الاستدعاءات:
   • execAsync("free -b | grep '^Mem:'") (سطر 135)
   • stdout.trim().split(/\s+/) (سطر 136)
   • stdout.trim() (سطر 136)
   • parseInt(parts[1]) (سطر 138)
   • parseInt(parts[2]) (سطر 139)
   • parseInt(parts[3]) (سطر 140)
   • parseInt(parts[6]) (سطر 141)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/monitoringService.ts
🏷️ الدالة: MonitoringService.getDiskInfo
🔢 الأسطر: 155-181
⚡ Async: نعم
📞 الاستدعاءات:
   • execAsync("df -B1 / | tail -1") (سطر 157)
   • stdout.trim().split(/\s+/) (سطر 158)
   • stdout.trim() (سطر 158)
   • parseInt(parts[1]) (سطر 160)
   • parseInt(parts[2]) (سطر 161)
   • parseInt(parts[3]) (سطر 162)
   • execAsync("df -i / | tail -1") (سطر 165)
   • inodeInfo.trim().split(/\s+/) (سطر 166)
   • inodeInfo.trim() (سطر 166)
   • parseInt(inodeParts[1]) (سطر 167)
   • parseInt(inodeParts[2]) (سطر 168)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/monitoringService.ts
🏷️ الدالة: MonitoringService.getNetworkInfo
🔢 الأسطر: 183-211
⚡ Async: نعم
📞 الاستدعاءات:
   • execAsync("cat /proc/net/dev | grep -E 'eth0|ens|enp' | head -1") (سطر 185)
   • stdout.trim().split(/\s+/) (سطر 186)
   • stdout.trim() (سطر 186)
   • parseInt(parts[1]) (سطر 188)
   • parseInt(parts[2]) (سطر 189)
   • parseInt(parts[9]) (سطر 190)
   • parseInt(parts[10]) (سطر 191)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/monitoringService.ts
🏷️ الدالة: MonitoringService.getProcessInfo
🔢 الأسطر: 213-234
⚡ Async: نعم
📞 الاستدعاءات:
   • execAsync("ps -eo stat --no-headers | sort | uniq -c") (سطر 215)
   • stdout.trim().split('\n') (سطر 216)
   • stdout.trim() (سطر 216)
   • line.trim().split(/\s+/) (سطر 221)
   • line.trim() (سطر 221)
   • parseInt(count) (سطر 222)
   • state.startsWith('R') (سطر 225)
   • state.startsWith('S') (سطر 226)
   • state.startsWith('I') (سطر 226)
   • state.startsWith('Z') (سطر 227)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/monitoringService.ts
🏷️ الدالة: MonitoringService.getAlerts
🔢 الأسطر: 236-321
⚡ Async: نعم
📞 الاستدعاءات:
   • this.collectMetrics() (سطر 246)
   • alerts.push({
          type: 'critical' as const,
          category: 'CPU',
          message: 'استخدام المعالج مرتفع جداً',
          value: metrics.cpu.usage,
          threshold: 90
        }) (سطر 250)
   • alerts.push({
          type: 'warning' as const,
          category: 'CPU',
          message: 'استخدام المعالج مرتفع',
          value: metrics.cpu.usage,
          threshold: 75
        }) (سطر 258)
   • alerts.push({
          type: 'critical' as const,
          category: 'Memory',
          message: 'الذاكرة ممتلئة تقريباً',
          value: metrics.memory.usage,
          threshold: 95
        }) (سطر 269)
   • alerts.push({
          type: 'warning' as const,
          category: 'Memory',
          message: 'استخدام الذاكرة مرتفع',
          value: metrics.memory.usage,
          threshold: 85
        }) (سطر 277)
   • alerts.push({
          type: 'critical' as const,
          category: 'Disk',
          message: 'مساحة القرص ممتلئة تقريباً',
          value: metrics.disk.usage,
          threshold: 95
        }) (سطر 288)
   • alerts.push({
          type: 'warning' as const,
          category: 'Disk',
          message: 'مساحة القرص منخفضة',
          value: metrics.disk.usage,
          threshold: 85
        }) (سطر 296)
   • alerts.push({
          type: 'warning' as const,
          category: 'Processes',
          message: 'عدد كبير من العمليات الزومبي',
          value: metrics.processes.zombie,
          threshold: 10
        }) (سطر 307)
   • console.error('Error generating alerts:', error) (سطر 317)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/nginxService.ts
🏷️ الدالة: NginxService.testConfig
🔢 الأسطر: 12-60
⚡ Async: نعم
🔑 الوسائط:
   • content: string | undefined
📞 الاستدعاءات:
   • Date.now() (سطر 16)
   • fs.writeFile(tempFile, content) (سطر 17)
   • execAsync(testCommand) (سطر 23)
   • execAsync(testCommand) (سطر 26)
   • fs.unlink(tempFile) (سطر 28)
   • fs.unlink(tempFile) (سطر 31)
   • execAsync('nginx -t') (سطر 40)
   • execAsync('sudo -n nginx -t') (سطر 44)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/nginxService.ts
🏷️ الدالة: NginxService.reloadNginx
🔢 الأسطر: 62-86
⚡ Async: نعم
📞 الاستدعاءات:
   • execAsync('systemctl reload nginx') (سطر 66)
   • execAsync('sudo -n systemctl reload nginx') (سطر 70)
   • execAsync('systemctl is-active nginx') (سطر 76)
   • stdout.trim() (سطر 77)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/nginxService.ts
🏷️ الدالة: NginxService.writeConfig
🔢 الأسطر: 88-95
⚡ Async: نعم
🔑 الوسائط:
   • configPath: string
   • content: string
📞 الاستدعاءات:
   • path.join(this.sitesAvailablePath, configPath) (سطر 90)
   • execAsync(`echo '${content.replace(/'/g, "'\\''")}' | sudo tee ${fullPath} > /dev/null`) (سطر 91)
   • content.replace(/'/g, "'\\''") (سطر 91)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/nginxService.ts
🏷️ الدالة: NginxService.enableSite
🔢 الأسطر: 97-106
⚡ Async: نعم
🔑 الوسائط:
   • configName: string
📞 الاستدعاءات:
   • path.join(this.sitesAvailablePath, configName) (سطر 99)
   • path.join(this.sitesEnabledPath, configName) (سطر 100)
   • execAsync(`sudo ln -sf ${sourcePath} ${targetPath}`) (سطر 102)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/nginxService.ts
🏷️ الدالة: NginxService.disableSite
🔢 الأسطر: 108-115
⚡ Async: نعم
🔑 الوسائط:
   • configName: string
📞 الاستدعاءات:
   • path.join(this.sitesEnabledPath, configName) (سطر 110)
   • execAsync(`sudo rm -f ${targetPath}`) (سطر 111)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/nginxService.ts
🏷️ الدالة: NginxService.generateConfig
🔢 الأسطر: 117-170
⚡ Async: لا
🔑 الوسائط:
   • domain: string
   • port: number
   • sslEnabled: boolean
🩺 التشخيص:
   ⚠️ الوسيط 'sslEnabled' بدون نوع صريح (implicit any)

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/nginxService.ts
🏷️ الدالة: NginxService.getStatus
🔢 الأسطر: 172-205
⚡ Async: نعم
📞 الاستدعاءات:
   • execAsync('systemctl is-active nginx') (سطر 178)
   • stdout.trim() (سطر 179)
   • execAsync('sudo -n systemctl is-active nginx') (سطر 182)
   • stdout.trim() (سطر 183)
   • execAsync('systemctl is-enabled nginx') (سطر 190)
   • stdout.trim() (سطر 191)
   • execAsync('sudo -n systemctl is-enabled nginx') (سطر 194)
   • stdout.trim() (سطر 195)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/pm2Service.ts
🏷️ الدالة: PM2Service.checkPM2Availability
🔢 الأسطر: 41-99
⚡ Async: نعم
📞 الاستدعاءات:
   • getPM2Path() (سطر 48)
   • path.join(process.env.HOME || '', '.npm/bin/pm2') (سطر 54)
   • path.join(process.env.HOME || '', '.config/npm/node_global/bin/pm2') (سطر 55)
   • execAsync(`${p} --version`) (سطر 65)
   • stdout.trim() (سطر 66)
   • console.log(`✅ PM2 found at: ${p}, version: ${stdout.trim()}`) (سطر 69)
   • stdout.trim() (سطر 69)
   • console.log('✅ PM2 is available and working') (سطر 79)
   • execAsync(`${workingPath} resurrect`) (سطر 83)
   • console.log('✅ PM2 processes resurrected') (سطر 84)
   • console.log('ℹ️ No PM2 processes to resurrect') (سطر 86)
   • console.warn('⚠️ PM2 is not available, using fallback process management') (سطر 94)
   • console.warn('💡 Consider installing PM2: npm install -g pm2') (سطر 95)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/pm2Service.ts
🏷️ الدالة: PM2Service.startApplicationFallback
🔢 الأسطر: 102-190
⚡ Async: نعم
🔑 الوسائط:
   • application: Application
📞 الاستدعاءات:
   • import('fs').then(m => m.promises) (سطر 105)
   • import('fs') (سطر 105)
   • fs.access(application.path) (سطر 107)
   • command.trim() (سطر 115)
   • fs.access(`${application.path}/${file}`) (سطر 124)
   • commonFiles.join(', ') (سطر 133)
   • mainFile.endsWith('.ts') (سطر 137)
   • spawn('sh', ['-c', command], {
        cwd: application.path,
        detached: true,
        stdio: 'pipe' // Change to pipe to capture errors
      }) (سطر 144)
   • child.unref() (سطر 154)
   • this.fallbackProcesses.set(application.name, {
        pid: child.pid,
        name: application.name,
        startTime: new Date(),
        status: 'running',
        command: command,
        path: application.path
      }) (سطر 156)
   • setTimeout(() => {
          if (child.killed || child.exitCode !== null) {
            reject(new Error('Process failed to start or exited immediately'));
          } else {
            resolve(void 0);
          }
        }, 2000) (سطر 167)
   • reject(new Error('Process failed to start or exited immediately')) (سطر 169)
   • resolve(void 0) (سطر 171)
   • child.on('error', (err) => {
          clearTimeout(timeout);
          reject(err);
        }) (سطر 175)
   • clearTimeout(timeout) (سطر 176)
   • reject(err) (سطر 177)
   • child.on('exit', (code) => {
          if (code !== null && code !== 0) {
            clearTimeout(timeout);
            reject(new Error(`Process exited with code ${code}`));
          }
        }) (سطر 180)
   • clearTimeout(timeout) (سطر 182)
   • reject(new Error(`Process exited with code ${code}`)) (سطر 183)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/pm2Service.ts
🏷️ الدالة: PM2Service.stopApplicationFallback
🔢 الأسطر: 193-206
⚡ Async: نعم
🔑 الوسائط:
   • name: string
📞 الاستدعاءات:
   • this.fallbackProcesses.get(name) (سطر 194)
   • process.kill(processInfo.pid, 'SIGTERM') (سطر 200)
   • this.fallbackProcesses.set(name, processInfo) (سطر 202)
🩺 التشخيص:
   ⚠️ دالة async لكن لا تستخدم await

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/pm2Service.ts
🏷️ الدالة: PM2Service.startApplication
🔢 الأسطر: 208-384
⚡ Async: نعم
🔑 الوسائط:
   • application: Application
📞 الاستدعاءات:
   • this.checkPM2Availability() (سطر 209)
   • console.log(`🚀 Starting application "${application.name}" at path: ${application.path}`) (سطر 213)
   • startCommand.trim() (سطر 221)
   • console.log(`🔍 No command specified, auto-detecting main file for ${application.name}`) (سطر 222)
   • import('fs').then(m => m.promises) (سطر 229)
   • import('fs') (سطر 229)
   • fs.stat(application.path) (سطر 233)
   • pathStats.isDirectory() (سطر 234)
   • console.error(`❌ Application path is not a directory: ${application.path}`) (سطر 235)
   • console.log(`✅ Application path exists and is a directory: ${application.path}`) (سطر 238)
   • console.error(`❌ Application path error:`, error) (سطر 240)
   • fs.readdir(application.path) (سطر 247)
   • console.log(`📁 Contents of ${application.path}:`, directoryContents) (سطر 248)
   • console.warn(`⚠️ Warning: Could not read directory contents: ${error}`) (سطر 250)
   • fs.access(packageJsonPath) (سطر 256)
   • JSON.parse(await fs.readFile(packageJsonPath, 'utf8')) (سطر 257)
   • fs.readFile(packageJsonPath, 'utf8') (سطر 257)
   • console.log(`📦 Found package.json for ${application.name}`) (سطر 258)
   • console.log(`✅ Using npm start command from package.json`) (سطر 262)
   • mainFile.endsWith('.ts') (سطر 265)
   • console.log(`✅ Using main file from package.json: ${mainFile}`) (سطر 266)
   • console.log(`📦 No package.json found or readable, continuing with file detection`) (سطر 269)
   • fs.access(fullPath) (سطر 277)
   • fs.stat(fullPath) (سطر 278)
   • stats.isFile() (سطر 279)
   • file.endsWith('.ts') (سطر 281)
   • console.log(`✅ Found main file: ${fullPath}`) (سطر 282)
   • directoryContents.join(', ') (سطر 294)
   • commonFiles.join(', ') (سطر 297)
   • console.error(`❌ ${errorMsg}`) (سطر 298)
   • console.log(`🔧 Final command for ${application.name}: ${startCommand}`) (سطر 312)
   • startCommand.includes('.ts') (سطر 315)
   • startCommand.startsWith('tsx ') (سطر 315)
   • startCommand.startsWith('npm ') (سطر 320)
   • startCommand.startsWith('yarn ') (سطر 320)
   • execAsync(command) (سطر 322)
   • startCommand.match(/^(?:tsx|ts-node)\s+(.+)$/) (سطر 325)
   • tsMatch[1].trim() (سطر 327)
   • startCommand.match(/^node\s+(.+)$/) (سطر 330)
   • nodeMatch[1].trim() (سطر 332)
   • startCommand.split(' ') (سطر 334)
   • execAsync('tsx --version') (سطر 340)
   • execAsync(command) (سطر 342)
   • execAsync('ts-node --version') (سطر 345)
   • execAsync(command) (سطر 347)
   • startCommand.match(/^node\s+(.+)$/) (سطر 354)
   • nodeMatch[1].trim() (سطر 356)
   • startCommand.split(' ') (سطر 359)
   • mainFile.trim() (سطر 363)
   • execAsync(command) (سطر 368)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/pm2Service.ts
🏷️ الدالة: PM2Service.stopApplication
🔢 الأسطر: 386-398
⚡ Async: نعم
🔑 الوسائط:
   • name: string
📞 الاستدعاءات:
   • this.checkPM2Availability() (سطر 387)
   • execAsync(`pm2 stop ${name}`) (سطر 391)
   • this.stopApplicationFallback(name) (سطر 396)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/pm2Service.ts
🏷️ الدالة: PM2Service.restartApplication
🔢 الأسطر: 400-429
⚡ Async: نعم
🔑 الوسائط:
   • name: string
   • application: any
📞 الاستدعاءات:
   • this.checkPM2Availability() (سطر 401)
   • execAsync(`pm2 restart ${name}`) (سطر 406)
   • execAsync(`pm2 delete ${name}`).catch(() => {}) (سطر 411)
   • execAsync(`pm2 delete ${name}`) (سطر 411)
   • this.startApplication(application) (سطر 412)
   • this.stopApplicationFallback(name) (سطر 423)
   • this.startApplicationFallback(application) (سطر 424)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/pm2Service.ts
🏷️ الدالة: PM2Service.deleteApplication
🔢 الأسطر: 431-445
⚡ Async: نعم
🔑 الوسائط:
   • name: string
📞 الاستدعاءات:
   • this.checkPM2Availability() (سطر 432)
   • execAsync(`pm2 delete ${name}`) (سطر 436)
   • this.stopApplicationFallback(name) (سطر 442)
   • this.fallbackProcesses.delete(name) (سطر 443)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/pm2Service.ts
🏷️ الدالة: PM2Service.getAllApplicationStatuses
🔢 الأسطر: 451-478
⚡ Async: نعم
📞 الاستدعاءات:
   • this.checkPM2Availability() (سطر 452)
   • this.getCachedPM2Processes() (سطر 457)
   • processes.forEach(process => {
          if (process && process.name && process.pm2_env) {
            statusMap.set(process.name, this.translatePM2Status(process.pm2_env.status));
          }
        }) (سطر 458)
   • statusMap.set(process.name, this.translatePM2Status(process.pm2_env.status)) (سطر 460)
   • this.translatePM2Status(process.pm2_env.status) (سطر 460)
   • console.warn('Failed to get PM2 processes, using fallback:', error) (سطر 464)
   • this.fallbackProcesses.forEach((processInfo, name) => {
          statusMap.set(name, processInfo.status);
        }) (سطر 466)
   • statusMap.set(name, processInfo.status) (سطر 467)
   • this.fallbackProcesses.forEach((processInfo, name) => {
        statusMap.set(name, processInfo.status);
      }) (سطر 472)
   • statusMap.set(name, processInfo.status) (سطر 473)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/pm2Service.ts
🏷️ الدالة: PM2Service.getCachedPM2Processes
🔢 الأسطر: 480-596
⚡ Async: نعم
📞 الاستدعاءات:
   • Date.now() (سطر 481)
   • getPM2Path() (سطر 488)
   • execAsync(`${pm2Path} jlist`) (سطر 491)
   • stdout.trim() (سطر 494)
   • cleanOutput.split('\n') (سطر 497)
   • line.includes('In-memory PM2 is out-of-date') (سطر 503)
   • line.includes('$ pm2 update') (سطر 504)
   • line.includes('PM2 version:') (سطر 505)
   • line.includes('Local PM2 version:') (سطر 506)
   • line.includes('>>>>') (سطر 507)
   • line.match(/^[\s\-_\/|]+$/) (سطر 508)
   • line.trim().startsWith('[') (سطر 513)
   • line.trim() (سطر 513)
   • jsonLines.push(line) (سطر 518)
   • jsonLines.join('\n').trim() (سطر 524)
   • jsonLines.join('\n') (سطر 524)
   • cleanOutput.startsWith('[') (سطر 528)
   • cleanOutput.indexOf('[') (سطر 529)
   • cleanOutput.lastIndexOf(']') (سطر 530)
   • cleanOutput.substring(jsonStart, jsonEnd + 1) (سطر 533)
   • cleanOutput.trim() (سطر 541)
   • JSON.parse(cleanOutput) (سطر 542)
   • Array.isArray(processes) (سطر 545)
   • console.warn('PM2 jlist did not return an array, falling back to empty array') (سطر 546)
   • console.error('Failed to parse PM2 JSON output:', parseError) (سطر 551)
   • console.error('Raw output:', stdout) (سطر 552)
   • console.error('Cleaned output:', cleanOutput) (سطر 553)
   • stdout.includes('In-memory PM2 is out-of-date') (سطر 558)
   • console.log('Attempting PM2 update...') (سطر 559)
   • execAsync('pm2 update') (سطر 561)
   • console.log('PM2 updated successfully') (سطر 562)
   • console.warn('PM2 update failed, continuing with current version') (سطر 564)
   • execAsync(`${pm2Path} list --format json`) (سطر 568)
   • altOutput.trim() (سطر 569)
   • altCleanOutput.indexOf('[') (سطر 572)
   • altCleanOutput.lastIndexOf(']') (سطر 573)
   • altCleanOutput.substring(altJsonStart, altJsonEnd + 1) (سطر 576)
   • JSON.parse(altCleanOutput) (سطر 579)
   • console.error('Alternative PM2 command also failed:', altError) (سطر 581)
   • console.error('Error getting PM2 processes:', error) (سطر 593)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/pm2Service.ts
🏷️ الدالة: PM2Service.translatePM2Status
🔢 الأسطر: 598-607
⚡ Async: لا
🔑 الوسائط:
   • pm2Status: string
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/pm2Service.ts
🏷️ الدالة: PM2Service.getApplicationStatus
🔢 الأسطر: 609-656
⚡ Async: نعم
🔑 الوسائط:
   • name: string
📞 الاستدعاءات:
   • this.checkPM2Availability() (سطر 610)
   • this.getCachedPM2Processes() (سطر 614)
   • processes.find(p => p.name === name) (سطر 615)
   • this.fallbackProcesses.get(name) (سطر 640)
   • process.kill(processInfo.pid, 0) (سطر 647)
   • this.fallbackProcesses.set(name, processInfo) (سطر 652)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/pm2Service.ts
🏷️ الدالة: PM2Service.listProcesses
🔢 الأسطر: 658-672
⚡ Async: نعم
📞 الاستدعاءات:
   • this.checkPM2Availability() (سطر 659)
   • this.getCachedPM2Processes() (سطر 663)
   • console.error('Failed to list PM2 processes:', error) (سطر 665)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/pm2Service.ts
🏷️ الدالة: PM2Service.getApplicationLogs
🔢 الأسطر: 674-701
⚡ Async: نعم
🔑 الوسائط:
   • name: string
   • lines: number
📞 الاستدعاءات:
   • this.checkPM2Availability() (سطر 675)
   • getPM2Path() (سطر 679)
   • execAsync(`${pm2Path} logs ${name} --lines ${lines} --nostream`) (سطر 681)
   • stdout.split('\n').filter(line => line.trim() !== '') (سطر 682)
   • stdout.split('\n') (سطر 682)
   • line.trim() (سطر 682)
   • this.fallbackProcesses.get(name) (سطر 688)
   • processInfo.startTime.toISOString() (سطر 696)
🩺 التشخيص:
   ⚠️ الوسيط 'lines' بدون نوع صريح (implicit any)

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/pm2Service.ts
🏷️ الدالة: PM2Service.getApplicationMetrics
🔢 الأسطر: 703-742
⚡ Async: نعم
🔑 الوسائط:
   • name: string
📞 الاستدعاءات:
   • this.checkPM2Availability() (سطر 704)
   • getPM2Path() (سطر 708)
   • execAsync(`${pm2Path} jlist`) (سطر 710)
   • JSON.parse(stdout) (سطر 711)
   • processes.find(p => p.name === name) (سطر 713)
   • this.fallbackProcesses.get(name) (سطر 729)
   • Date.now() (سطر 734)
   • processInfo.startTime.getTime() (سطر 734)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/pm2Service.ts
🏷️ الدالة: PM2Service.saveConfiguration
🔢 الأسطر: 744-759
⚡ Async: نعم
📞 الاستدعاءات:
   • this.checkPM2Availability() (سطر 745)
   • getPM2Path() (سطر 749)
   • execAsync(`${pm2Path} save`) (سطر 751)
   • console.log('Configuration save not needed in fallback mode') (سطر 757)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/pm2Service.ts
🏷️ الدالة: PM2Service.resurrectProcesses
🔢 الأسطر: 761-776
⚡ Async: نعم
📞 الاستدعاءات:
   • this.checkPM2Availability() (سطر 762)
   • getPM2Path() (سطر 766)
   • execAsync(`${pm2Path} resurrect`) (سطر 768)
   • console.log('Process resurrection not available in fallback mode') (سطر 774)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/realFileSystemService.ts
🏷️ الدالة: RealFileSystemService.validatePath
🔢 الأسطر: 70-127
⚡ Async: نعم
🔑 الوسائط:
   • inputPath: string
📞 الاستدعاءات:
   • path.resolve(path.normalize(inputPath)) (سطر 77)
   • path.normalize(inputPath) (سطر 77)
   • inputPath.includes('..') (سطر 80)
   • inputPath.includes('./') (سطر 80)
   • inputPath.includes('.\\') (سطر 80)
   • logger.warn(`Directory traversal attempt detected: ${inputPath}`) (سطر 81)
   • normalizedPath.includes('\0') (سطر 90)
   • this.storage.checkPathAllowed(normalizedPath) (سطر 108)
   • logger.warn(`Access denied to path not in database whitelist: ${normalizedPath}`) (سطر 110)
   • logger.error(`Path validation error: ${error}`) (سطر 120)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/realFileSystemService.ts
🏷️ الدالة: RealFileSystemService.checkPermissions
🔢 الأسطر: 132-158
⚡ Async: نعم
🔑 الوسائط:
   • filePath: string
   • requiredPermission: "read" | "write" | "execute"
📞 الاستدعاءات:
   • fs.access(filePath, mode) (سطر 153)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/realFileSystemService.ts
🏷️ الدالة: RealFileSystemService.formatPermissions
🔢 الأسطر: 163-182
⚡ Async: لا
🔑 الوسائط:
   • mode: number
📞 الاستدعاءات:
   • permissions.push(mode & 0o400 ? 'r' : '-') (سطر 167)
   • permissions.push(mode & 0o200 ? 'w' : '-') (سطر 168)
   • permissions.push(mode & 0o100 ? 'x' : '-') (سطر 169)
   • permissions.push(mode & 0o040 ? 'r' : '-') (سطر 172)
   • permissions.push(mode & 0o020 ? 'w' : '-') (سطر 173)
   • permissions.push(mode & 0o010 ? 'x' : '-') (سطر 174)
   • permissions.push(mode & 0o004 ? 'r' : '-') (سطر 177)
   • permissions.push(mode & 0o002 ? 'w' : '-') (سطر 178)
   • permissions.push(mode & 0o001 ? 'x' : '-') (سطر 179)
   • permissions.join('') (سطر 181)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/realFileSystemService.ts
🏷️ الدالة: RealFileSystemService.getMimeType
🔢 الأسطر: 187-211
⚡ Async: لا
🔑 الوسائط:
   • fileName: string
📞 الاستدعاءات:
   • path.extname(fileName).toLowerCase() (سطر 188)
   • path.extname(fileName) (سطر 188)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/realFileSystemService.ts
🏷️ الدالة: RealFileSystemService.createAuditLog
🔢 الأسطر: 216-238
⚡ Async: نعم
🔑 الوسائط:
   • action: string
   • userId: string
   • filePath: string
   • details: string | undefined
   • oldValue: any
   • newValue: any
📞 الاستدعاءات:
   • this.storage.createAuditLog({
        fileId: null, // Real filesystem doesn't have database file ID
        action: action as any,
        userId,
        details: `Real filesystem operation: ${action} on ${filePath}. ${details || ''}`,
        oldValue: oldValue || null,
        newValue: newValue || null,
        ipAddress: null,
        userAgent: null,
      }) (سطر 225)
   • logger.error(`Failed to create audit log: ${error}`) (سطر 236)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/realFileSystemService.ts
🏷️ الدالة: RealFileSystemService.listDirectory
🔢 الأسطر: 249-366
⚡ Async: نعم
🔑 الوسائط:
   • dirPath: string
   • userId: string
📞 الاستدعاءات:
   • this.validatePath(dirPath) (سطر 252)
   • existsSync(normalizedPath) (سطر 264)
   • fs.stat(normalizedPath) (سطر 273)
   • stats.isDirectory() (سطر 274)
   • this.checkPermissions(normalizedPath, 'read') (سطر 283)
   • fs.readdir(normalizedPath) (سطر 293)
   • path.join(normalizedPath, entry) (سطر 300)
   • fs.stat(itemPath) (سطر 303)
   • itemStats.isDirectory() (سطر 304)
   • entry.startsWith('.') (سطر 305)
   • path.relative(process.cwd(), itemPath) (سطر 310)
   • process.cwd() (سطر 310)
   • this.formatPermissions(itemStats.mode) (سطر 313)
   • path.extname(entry) (سطر 317)
   • this.getMimeType(entry) (سطر 318)
   • items.push(fileInfo) (سطر 321)
   • logger.warn(`Could not stat item ${itemPath}: ${itemError}`) (سطر 330)
   • items.sort((a, b) => {
          // Directories first, then files, alphabetically
          if (a.type !== b.type) {
            return a.type === 'directory' ? -1 : 1;
          }
          return a.name.localeCompare(b.name);
        }) (سطر 337)
   • a.name.localeCompare(b.name) (سطر 342)
   • this.createAuditLog('access', userId, normalizedPath, `Listed directory contents`) (سطر 350)
   • logger.error(`Error listing directory ${dirPath}: ${error}`) (سطر 359)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/realFileSystemService.ts
🏷️ الدالة: RealFileSystemService.getFileInfo
🔢 الأسطر: 371-429
⚡ Async: نعم
🔑 الوسائط:
   • filePath: string
   • userId: string
📞 الاستدعاءات:
   • this.validatePath(filePath) (سطر 374)
   • existsSync(normalizedPath) (سطر 386)
   • fs.stat(normalizedPath) (سطر 394)
   • stats.isDirectory() (سطر 395)
   • path.basename(normalizedPath) (سطر 396)
   • path.relative(process.cwd(), normalizedPath) (سطر 401)
   • process.cwd() (سطر 401)
   • this.formatPermissions(stats.mode) (سطر 404)
   • fileName.startsWith('.') (سطر 407)
   • path.extname(fileName) (سطر 408)
   • this.getMimeType(fileName) (سطر 409)
   • this.createAuditLog('access', userId, normalizedPath, `Got file info`) (سطر 413)
   • logger.error(`Error getting file info ${filePath}: ${error}`) (سطر 422)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/realFileSystemService.ts
🏷️ الدالة: RealFileSystemService.readFileContent
🔢 الأسطر: 434-515
⚡ Async: نعم
🔑 الوسائط:
   • filePath: string
   • userId: string
   • encoding: BufferEncoding
📞 الاستدعاءات:
   • this.validatePath(filePath) (سطر 441)
   • existsSync(normalizedPath) (سطر 453)
   • fs.stat(normalizedPath) (سطر 462)
   • stats.isDirectory() (سطر 463)
   • this.checkPermissions(normalizedPath, 'read') (سطر 472)
   • fs.readFile(normalizedPath, encoding) (سطر 491)
   • this.createAuditLog('access', userId, normalizedPath, `Read file content (${stats.size} bytes)`) (سطر 494)
   • this.getMimeType(path.basename(normalizedPath)) (سطر 503)
   • path.basename(normalizedPath) (سطر 503)
   • logger.error(`Error reading file ${filePath}: ${error}`) (سطر 508)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/realFileSystemService.ts
🏷️ الدالة: RealFileSystemService.createDirectory
🔢 الأسطر: 520-595
⚡ Async: نعم
🔑 الوسائط:
   • dirPath: string
   • userId: string
   • options: import("/home/administrator/Panel/server/services/realFileSystemService").CreateDirectoryOptions
📞 الاستدعاءات:
   • this.validatePath(dirPath) (سطر 527)
   • existsSync(normalizedPath) (سطر 539)
   • path.dirname(normalizedPath) (سطر 548)
   • this.checkPermissions(parentDir, 'write') (سطر 549)
   • fs.mkdir(normalizedPath, {
        recursive: options.recursive || false,
        mode: options.mode || 0o755
      }) (سطر 559)
   • fs.stat(normalizedPath) (سطر 565)
   • this.createAuditLog(
        'create', 
        userId, 
        normalizedPath, 
        `Created directory`, 
        null,
        { recursive: options.recursive, mode: options.mode }
      ) (سطر 568)
   • this.formatPermissions(stats.mode) (سطر 583)
   • logger.error(`Error creating directory ${dirPath}: ${error}`) (سطر 588)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/realFileSystemService.ts
🏷️ الدالة: RealFileSystemService.createFile
🔢 الأسطر: 600-682
⚡ Async: نعم
🔑 الوسائط:
   • filePath: string
   • userId: string
   • options: import("/home/administrator/Panel/server/services/realFileSystemService").CreateFileOptions
📞 الاستدعاءات:
   • this.validatePath(filePath) (سطر 607)
   • existsSync(normalizedPath) (سطر 619)
   • path.dirname(normalizedPath) (سطر 628)
   • this.checkPermissions(parentDir, 'write') (سطر 629)
   • fs.writeFile(normalizedPath, content, {
        mode: options.mode || 0o644
      }) (سطر 641)
   • fs.stat(normalizedPath) (سطر 646)
   • crypto.createHash('sha256').update(content).digest('hex') (سطر 649)
   • crypto.createHash('sha256').update(content) (سطر 649)
   • crypto.createHash('sha256') (سطر 649)
   • this.createAuditLog(
        'create', 
        userId, 
        normalizedPath, 
        `Created file (${stats.size} bytes)`, 
        null,
        { size: stats.size, checksum, mode: options.mode }
      ) (سطر 652)
   • this.formatPermissions(stats.mode) (سطر 668)
   • this.getMimeType(path.basename(normalizedPath)) (سطر 670)
   • path.basename(normalizedPath) (سطر 670)
   • logger.error(`Error creating file ${filePath}: ${error}`) (سطر 675)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/realFileSystemService.ts
🏷️ الدالة: RealFileSystemService.deleteItem
🔢 الأسطر: 687-762
⚡ Async: نعم
🔑 الوسائط:
   • filePath: string
   • userId: string
📞 الاستدعاءات:
   • this.validatePath(filePath) (سطر 690)
   • existsSync(normalizedPath) (سطر 702)
   • fs.stat(normalizedPath) (سطر 711)
   • stats.isDirectory() (سطر 712)
   • path.basename(normalizedPath) (سطر 713)
   • path.dirname(normalizedPath) (سطر 716)
   • this.checkPermissions(parentDir, 'write') (سطر 717)
   • fs.rmdir(normalizedPath, { recursive: true }) (سطر 728)
   • fs.unlink(normalizedPath) (سطر 730)
   • this.createAuditLog(
        'delete', 
        userId, 
        normalizedPath, 
        `Deleted ${isDirectory ? 'directory' : 'file'}: ${itemName}`, 
        { name: itemName, type: isDirectory ? 'directory' : 'file', size: stats.size },
        null
      ) (سطر 734)
   • logger.error(`Error deleting item ${filePath}: ${error}`) (سطر 755)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/realFileSystemService.ts
🏷️ الدالة: RealFileSystemService.renameItem
🔢 الأسطر: 767-868
⚡ Async: نعم
🔑 الوسائط:
   • oldPath: string
   • newPath: string
   • userId: string
📞 الاستدعاءات:
   • this.validatePath(oldPath) (سطر 774)
   • this.validatePath(newPath) (سطر 775)
   • existsSync(normalizedOldPath) (سطر 797)
   • existsSync(normalizedNewPath) (سطر 806)
   • fs.stat(normalizedOldPath) (سطر 815)
   • stats.isDirectory() (سطر 816)
   • path.basename(normalizedOldPath) (سطر 817)
   • path.basename(normalizedNewPath) (سطر 818)
   • path.dirname(normalizedOldPath) (سطر 821)
   • path.dirname(normalizedNewPath) (سطر 822)
   • this.checkPermissions(oldParentDir, 'write') (سطر 824)
   • this.checkPermissions(newParentDir, 'write') (سطر 825)
   • fs.rename(normalizedOldPath, normalizedNewPath) (سطر 836)
   • this.createAuditLog(
        'rename', 
        userId, 
        normalizedOldPath, 
        `Renamed ${isDirectory ? 'directory' : 'file'} from "${oldName}" to "${newName}"`, 
        { oldPath: normalizedOldPath, oldName },
        { newPath: normalizedNewPath, newName }
      ) (سطر 839)
   • logger.error(`Error renaming item ${oldPath} to ${newPath}: ${error}`) (سطر 861)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/realFileSystemService.ts
🏷️ الدالة: RealFileSystemService.copyItem
🔢 الأسطر: 873-993
⚡ Async: نعم
🔑 الوسائط:
   • sourcePath: string
   • destinationPath: string
   • userId: string
📞 الاستدعاءات:
   • this.validatePath(sourcePath) (سطر 880)
   • this.validatePath(destinationPath) (سطر 881)
   • existsSync(normalizedSourcePath) (سطر 903)
   • existsSync(normalizedDestPath) (سطر 912)
   • fs.stat(normalizedSourcePath) (سطر 921)
   • sourceStats.isDirectory() (سطر 922)
   • path.basename(normalizedSourcePath) (سطر 923)
   • this.checkPermissions(normalizedSourcePath, 'read') (سطر 926)
   • path.dirname(normalizedDestPath) (سطر 936)
   • this.checkPermissions(destParentDir, 'write') (سطر 937)
   • this.copyDirectoryRecursive(normalizedSourcePath, normalizedDestPath) (سطر 951)
   • this.calculateDirectorySize(normalizedDestPath) (سطر 954)
   • fs.copyFile(normalizedSourcePath, normalizedDestPath) (سطر 957)
   • this.createAuditLog(
        'copy', 
        userId, 
        normalizedSourcePath, 
        `Copied ${isDirectory ? 'directory' : 'file'} "${sourceName}" to "${normalizedDestPath}" (${copiedSize} bytes)`, 
        { sourcePath: normalizedSourcePath, sourceSize: sourceStats.size },
        { destinationPath: normalizedDestPath, copiedSize }
      ) (سطر 962)
   • path.basename(normalizedDestPath) (سطر 978)
   • logger.error(`Error copying item ${sourcePath} to ${destinationPath}: ${error}`) (سطر 986)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/realFileSystemService.ts
🏷️ الدالة: RealFileSystemService.copyDirectoryRecursive
🔢 الأسطر: 998-1015
⚡ Async: نعم
🔑 الوسائط:
   • source: string
   • destination: string
📞 الاستدعاءات:
   • fs.mkdir(destination, { recursive: true }) (سطر 999)
   • fs.readdir(source) (سطر 1001)
   • path.join(source, entry) (سطر 1004)
   • path.join(destination, entry) (سطر 1005)
   • fs.stat(sourcePath) (سطر 1007)
   • stats.isDirectory() (سطر 1009)
   • this.copyDirectoryRecursive(sourcePath, destPath) (سطر 1010)
   • fs.copyFile(sourcePath, destPath) (سطر 1012)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/realFileSystemService.ts
🏷️ الدالة: RealFileSystemService.calculateDirectorySize
🔢 الأسطر: 1020-1041
⚡ Async: نعم
🔑 الوسائط:
   • dirPath: string
📞 الاستدعاءات:
   • fs.readdir(dirPath) (سطر 1024)
   • path.join(dirPath, entry) (سطر 1027)
   • fs.stat(entryPath) (سطر 1028)
   • stats.isDirectory() (سطر 1030)
   • this.calculateDirectorySize(entryPath) (سطر 1031)
   • logger.warn(`Error calculating directory size for ${dirPath}: ${error}`) (سطر 1037)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/smart-connection-manager.ts
🏷️ الدالة: SmartConnectionManager.initializeConnections
🔢 الأسطر: 32-43
⚡ Async: لا
📞 الاستدعاءات:
   • this.connections.set('primary', {
      pool: null,
      db: null,
      source: 'primary',
      isHealthy: false,
      lastChecked: new Date()
    }) (سطر 34)
   • console.log('🧠 تم تهيئة مدير الاتصالات الذكي') (سطر 42)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/smart-connection-manager.ts
🏷️ الدالة: SmartConnectionManager.startHealthCheck
🔢 الأسطر: 45-49
⚡ Async: لا
📞 الاستدعاءات:
   • setInterval(() => {
      this.checkConnectionsHealth();
    }, this.healthCheckInterval) (سطر 46)
   • this.checkConnectionsHealth() (سطر 47)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/smart-connection-manager.ts
🏷️ الدالة: SmartConnectionManager.checkConnectionsHealth
🔢 الأسطر: 51-67
⚡ Async: نعم
📞 الاستدعاءات:
   • Array.from(this.connections.entries()) (سطر 52)
   • this.connections.entries() (سطر 52)
   • connection.pool.connect() (سطر 55)
   • client.query('SELECT 1') (سطر 56)
   • client.release() (سطر 57)
   • console.warn(`⚠️ فقدان الاتصال مع: ${connection.source}`) (سطر 62)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/smart-connection-manager.ts
🏷️ الدالة: SmartConnectionManager.getSmartConnection
🔢 الأسطر: 69-87
⚡ Async: لا
🔑 الوسائط:
   • operationType: "read" | "write" | "backup" | "sync"
📞 الاستدعاءات:
   • this.connections.get('primary') (سطر 73)
   • console.warn('⚠️ لا يوجد اتصال أساسي متاح') (سطر 76)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/smart-connection-manager.ts
🏷️ الدالة: SmartConnectionManager.registerConnection
🔢 الأسطر: 89-99
⚡ Async: لا
🔑 الوسائط:
   • key: string
   • pool: import("/home/administrator/Panel/node_modules/@types/pg/index").Pool
   • db: any
   • source: string
📞 الاستدعاءات:
   • this.connections.set(key, {
      pool,
      db,
      source,
      isHealthy: true,
      lastChecked: new Date()
    }) (سطر 90)
   • console.log(`✅ تم تسجيل اتصال جديد: ${source}`) (سطر 98)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/smart-connection-manager.ts
🏷️ الدالة: SmartConnectionManager.getConnectionStats
🔢 الأسطر: 101-117
⚡ Async: لا
📞 الاستدعاءات:
   • Array.from(this.connections.values()) (سطر 108)
   • this.connections.values() (سطر 108)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/smart-connection-manager.ts
🏷️ الدالة: SmartConnectionManager.getConnection
🔢 الأسطر: 120-126
⚡ Async: نعم
📞 الاستدعاءات:
   • this.getSmartConnection() (سطر 121)
   • connection.pool.connect() (سطر 125)
🩺 التشخيص:
   ⚠️ دالة async لكن لا تستخدم await

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/smart-connection-manager.ts
🏷️ الدالة: SmartConnectionManager.releaseConnection
🔢 الأسطر: 129-131
⚡ Async: لا
🔑 الوسائط:
   • client: import("/home/administrator/Panel/node_modules/@types/pg/index").PoolClient
📞 الاستدعاءات:
   • client.release() (سطر 130)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/smart-connection-manager.ts
🏷️ الدالة: SmartConnectionManager.updateMetrics
🔢 الأسطر: 134-136
⚡ Async: لا
🔑 الوسائط:
   • type: string
   • duration: number
   • success: boolean
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/smart-connection-manager.ts
🏷️ الدالة: SmartConnectionManager.query
🔢 الأسطر: 138-173
⚡ Async: نعم
🔑 الوسائط:
   • text: string
   • params: any[] | undefined
📞 الاستدعاءات:
   • this.shouldBatchQuery(text) (سطر 140)
   • this.queryQueue.push({ text, params, resolve, reject }) (سطر 142)
   • this.processQueue() (سطر 143)
   • Date.now() (سطر 148)
   • this.getConnection() (سطر 152)
   • client.query(text, params) (سطر 153)
   • Date.now() (سطر 155)
   • this.updateMetrics('query', duration, true) (سطر 156)
   • console.warn(`⚠️ Slow query detected (${duration}ms):`, text.substring(0, 100)) (سطر 159)
   • text.substring(0, 100) (سطر 159)
   • Date.now() (سطر 164)
   • this.updateMetrics('query', duration, false) (سطر 165)
   • console.error('🔴 Database query error:', error) (سطر 166)
   • this.releaseConnection(client) (سطر 170)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/smart-connection-manager.ts
🏷️ الدالة: SmartConnectionManager.shouldBatchQuery
🔢 الأسطر: 175-180
⚡ Async: لا
🔑 الوسائط:
   • text: string
📞 الاستدعاءات:
   • text.toLowerCase().startsWith('select') (سطر 177)
   • text.toLowerCase() (سطر 177)
   • text.toLowerCase().includes('for update') (سطر 178)
   • text.toLowerCase() (سطر 178)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/smart-connection-manager.ts
🏷️ الدالة: SmartConnectionManager.processQueue
🔢 الأسطر: 182-216
⚡ Async: نعم
📞 الاستدعاءات:
   • this.queryQueue.splice(0, 5) (سطر 188)
   • this.getConnection() (سطر 193)
   • client.query(query.text, query.params) (سطر 197)
   • query.resolve(result) (سطر 198)
   • query.reject(error) (سطر 200)
   • batch.forEach(query => query.reject(error)) (سطر 204)
   • query.reject(error) (سطر 204)
   • this.releaseConnection(client) (سطر 207)
   • setTimeout(() => this.processQueue(), 10) (سطر 213)
   • this.processQueue() (سطر 213)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/sslService.ts
🏷️ الدالة: SslService.issueCertificate
🔢 الأسطر: 14-40
⚡ Async: نعم
🔑 الوسائط:
   • domain: string
📞 الاستدعاءات:
   • /^\d+\.\d+\.\d+\.\d+$/.test(domain) (سطر 20)
   • execAsync(command) (سطر 24)
   • execAsync(`sudo openssl x509 -enddate -noout -in /etc/letsencrypt/live/${domain}/fullchain.pem`) (سطر 27)
   • stdout.match(/notAfter=(.+)/) (سطر 28)
   • Date.now() (سطر 29)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/sslService.ts
🏷️ الدالة: SslService.renewCertificate
🔢 الأسطر: 42-48
⚡ Async: نعم
🔑 الوسائط:
   • domain: string
📞 الاستدعاءات:
   • execAsync(`sudo certbot renew --cert-name ${domain}`) (سطر 44)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/sslService.ts
🏷️ الدالة: SslService.renewAllCertificates
🔢 الأسطر: 50-56
⚡ Async: نعم
📞 الاستدعاءات:
   • execAsync('sudo certbot renew') (سطر 52)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/sslService.ts
🏷️ الدالة: SslService.checkCertificateExpiry
🔢 الأسطر: 58-66
⚡ Async: نعم
🔑 الوسائط:
   • domain: string
📞 الاستدعاءات:
   • execAsync(`sudo openssl x509 -enddate -noout -in /etc/letsencrypt/live/${domain}/fullchain.pem`) (سطر 60)
   • stdout.match(/notAfter=(.+)/) (سطر 61)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/sslService.ts
🏷️ الدالة: SslService.listCertificates
🔢 الأسطر: 68-108
⚡ Async: نعم
📞 الاستدعاءات:
   • execAsync('sudo certbot certificates') (سطر 70)
   • stdout.split('\n') (سطر 74)
   • line.includes('Certificate Name:') (سطر 78)
   • line.split(':')[1].trim() (سطر 79)
   • line.split(':') (سطر 79)
   • line.includes('Expiry Date:') (سطر 80)
   • line.match(/(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})/) (سطر 81)
   • Math.floor((expiresAt.getTime() - now.getTime()) / (1000 * 60 * 60 * 24)) (سطر 85)
   • expiresAt.getTime() (سطر 85)
   • now.getTime() (سطر 85)
   • certificates.push({
              domain: currentDomain,
              expiresAt,
              status
            }) (سطر 94)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/sslService.ts
🏷️ الدالة: SslService.revokeCertificate
🔢 الأسطر: 110-116
⚡ Async: نعم
🔑 الوسائط:
   • domain: string
📞 الاستدعاءات:
   • execAsync(`sudo certbot revoke --cert-path /etc/letsencrypt/live/${domain}/fullchain.pem`) (سطر 112)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/sslService.ts
🏷️ الدالة: SslService.testRenewal
🔢 الأسطر: 118-128
⚡ Async: نعم
📞 الاستدعاءات:
   • execAsync('sudo certbot renew --dry-run') (سطر 120)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/storageStatsService.ts
🏷️ الدالة: StorageStatsService.getStorageStats
🔢 الأسطر: 36-68
⚡ Async: نعم
📞 الاستدعاءات:
   • Date.now() (سطر 38)
   • Promise.all([
        this.getMainStorageStats(),
        this.getCategoryStats(),
        this.getRecentFilesStats(),
        this.getTrashStats()
      ]) (سطر 43)
   • this.getMainStorageStats() (سطر 44)
   • this.getCategoryStats() (سطر 45)
   • this.getRecentFilesStats() (سطر 46)
   • this.getTrashStats() (سطر 47)
   • Date.now() (سطر 60)
   • console.error('Error getting storage stats:', error) (سطر 65)
   • this.getFallbackStats() (سطر 66)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/storageStatsService.ts
🏷️ الدالة: StorageStatsService.getMainStorageStats
🔢 الأسطر: 73-106
⚡ Async: نعم
📞 الاستدعاءات:
   • this.execCommand('df -B1 /') (سطر 76)
   • dfOutput.split('\n') (سطر 77)
   • lines[1].trim().split(/\s+/) (سطر 80)
   • lines[1].trim() (سطر 80)
   • parseInt(parts[1]) (سطر 82)
   • parseInt(parts[2]) (سطر 83)
   • parseInt(parts[3]) (سطر 84)
   • Math.round((usedSpace / totalSpace) * 100) (سطر 85)
   • console.error('Error getting disk usage:', error) (سطر 96)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/storageStatsService.ts
🏷️ الدالة: StorageStatsService.getCategoryStats
🔢 الأسطر: 111-192
⚡ Async: نعم
📞 الاستدعاءات:
   • this.calculateCategoryStats(baseDir, category) (سطر 174)
   • results.push(stats) (سطر 175)
   • console.error(`Error calculating stats for ${category.name}:`, error) (سطر 177)
   • results.push({
          id: category.id,
          name: category.name,
          size: Math.floor(Math.random() * 50 * 1024 * 1024 * 1024), // Random size
          fileCount: Math.floor(Math.random() * 5000),
          icon: category.icon,
          iconColor: category.iconColor,
          bgColor: category.bgColor
        }) (سطر 179)
   • Math.floor(Math.random() * 50 * 1024 * 1024 * 1024) (سطر 182)
   • Math.random() (سطر 182)
   • Math.floor(Math.random() * 5000) (سطر 183)
   • Math.random() (سطر 183)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/storageStatsService.ts
🏷️ الدالة: StorageStatsService.calculateCategoryStats
🔢 الأسطر: 197-273
⚡ Async: نعم
🔑 الوسائط:
   • baseDir: string
   • category: any
📞 الاستدعاءات:
   • category.patterns?.map((pattern: string) => 
      path.join(baseDir, pattern)
    ) (سطر 201)
   • path.join(baseDir, pattern) (سطر 202)
   • searchPaths.push(
        '/home/*/Pictures',
        '/home/*/Desktop/*.{jpg,jpeg,png,gif}',
        '/var/www/html/images'
      ) (سطر 207)
   • searchPaths.push(
        '/home/*/Videos',
        '/home/*/Movies'
      ) (سطر 213)
   • searchPaths.push(
        '/home/*/Music',
        '/home/*/Audio'
      ) (سطر 218)
   • searchPaths.push(
        '/home/*/Documents',
        '/home/*/Desktop/*.{pdf,doc,docx,txt}'
      ) (سطر 223)
   • searchPaths.push(
        '/home/*/Downloads',
        '/tmp/downloads'
      ) (سطر 228)
   • category.extensions.map((ext: string) => `-name "*${ext}"`).join(' -o ') (سطر 237)
   • category.extensions.map((ext: string) => `-name "*${ext}"`) (سطر 237)
   • this.execCommand(findCommand) (سطر 238)
   • result.trim().split(' ').map(Number) (سطر 239)
   • result.trim().split(' ') (سطر 239)
   • result.trim() (سطر 239)
   • console.error(`Error searching for ${category.id} files:`, error) (سطر 246)
   • this.pathExists(searchPath) (سطر 253)
   • this.calculateDirectoryStats(searchPath) (سطر 254)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/storageStatsService.ts
🏷️ الدالة: StorageStatsService.getRecentFilesStats
🔢 الأسطر: 278-305
⚡ Async: نعم
📞 الاستدعاءات:
   • this.execCommand(command) (سطر 282)
   • result.trim().split(' ').map(Number) (سطر 283)
   • result.trim().split(' ') (سطر 283)
   • result.trim() (سطر 283)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/storageStatsService.ts
🏷️ الدالة: StorageStatsService.getTrashStats
🔢 الأسطر: 310-341
⚡ Async: نعم
📞 الاستدعاءات:
   • this.pathExists(trashPath) (سطر 322)
   • this.calculateDirectoryStats(trashPath) (سطر 323)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/storageStatsService.ts
🏷️ الدالة: StorageStatsService.calculateDirectoryStats
🔢 الأسطر: 346-377
⚡ Async: نعم
🔑 الوسائط:
   • dirPath: string
📞 الاستدعاءات:
   • fs.readdir(dirPath) (سطر 351)
   • path.join(dirPath, entry) (سطر 354)
   • fs.stat(entryPath) (سطر 357)
   • stats.isDirectory() (سطر 359)
   • this.calculateDirectoryStats(entryPath) (سطر 360)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/storageStatsService.ts
🏷️ الدالة: StorageStatsService.execCommand
🔢 الأسطر: 382-411
⚡ Async: لا
🔑 الوسائط:
   • command: string
📞 الاستدعاءات:
   • spawn('sh', ['-c', command], {
        stdio: ['pipe', 'pipe', 'pipe']
      }) (سطر 384)
   • child.stdout.on('data', (data) => {
        stdout += data.toString();
      }) (سطر 391)
   • data.toString() (سطر 392)
   • child.stderr.on('data', (data) => {
        stderr += data.toString();
      }) (سطر 395)
   • data.toString() (سطر 396)
   • child.on('close', (code) => {
        if (code === 0) {
          resolve(stdout);
        } else {
          reject(new Error(`Command failed with code ${code}: ${stderr}`));
        }
      }) (سطر 399)
   • resolve(stdout) (سطر 401)
   • reject(new Error(`Command failed with code ${code}: ${stderr}`)) (سطر 403)
   • child.on('error', (error) => {
        reject(error);
      }) (سطر 407)
   • reject(error) (سطر 408)
🩺 التشخيص:
   ⚠️ استدعاء data.toString() بدون تحديد الترميز (قد يسبب مشاكل)
   ⚠️ استدعاء data.toString() بدون تحديد الترميز (قد يسبب مشاكل)

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/storageStatsService.ts
🏷️ الدالة: StorageStatsService.pathExists
🔢 الأسطر: 416-423
⚡ Async: نعم
🔑 الوسائط:
   • path: string
📞 الاستدعاءات:
   • fs.access(path) (سطر 418)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/storageStatsService.ts
🏷️ الدالة: StorageStatsService.getFallbackStats
🔢 الأسطر: 428-511
⚡ Async: لا
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/storageStatsService.ts
🏷️ الدالة: StorageStatsService.formatBytes
🔢 الأسطر: 516-524
⚡ Async: لا
🔑 الوسائط:
   • bytes: number
📞 الاستدعاءات:
   • Math.floor(Math.log(bytes) / Math.log(k)) (سطر 521)
   • Math.log(bytes) (سطر 521)
   • Math.log(k) (سطر 521)
   • parseFloat((bytes / Math.pow(k, i)).toFixed(1)) (سطر 523)
   • (bytes / Math.pow(k, i)).toFixed(1) (سطر 523)
   • Math.pow(k, i) (سطر 523)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/storageStatsService.ts
🏷️ الدالة: StorageStatsService.clearCache
🔢 الأسطر: 529-531
⚡ Async: لا
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/systemService.ts
🏷️ الدالة: SystemService.getSystemStats
🔢 الأسطر: 46-79
⚡ Async: نعم
📞 الاستدعاءات:
   • Promise.all([
        this._getCpuUsage(),
        this.getCachedCpuCores(),
        this._getMemoryInfo(),
        this._getDiskInfo(),
        this._getUptime()
      ]) (سطر 49)
   • this._getCpuUsage() (سطر 50)
   • this.getCachedCpuCores() (سطر 51)
   • this._getMemoryInfo() (سطر 52)
   • this._getDiskInfo() (سطر 53)
   • this._getUptime() (سطر 54)
   • Math.round(cpuUsage * 100) (سطر 59)
   • Math.round(memInfo.usage * 100) (سطر 66)
   • Math.round(diskInfo.usage * 100) (سطر 72)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/systemService.ts
🏷️ الدالة: SystemService._getCpuUsage
🔢 الأسطر: 81-84
⚡ Async: نعم
📞 الاستدعاءات:
   • execAsync("grep 'cpu ' /proc/stat | awk '{usage=($2+$4)*100/($2+$3+$4+$5)} END {print usage}'") (سطر 82)
   • parseFloat(stdout.trim()) (سطر 83)
   • stdout.trim() (سطر 83)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/systemService.ts
🏷️ الدالة: SystemService._getMemoryInfo
🔢 الأسطر: 86-96
⚡ Async: نعم
📞 الاستدعاءات:
   • fs.readFile('/proc/meminfo', 'utf8') (سطر 87)
   • memInfo.split('\n') (سطر 88)
   • parseInt(memLines.find(line => line.startsWith('MemTotal:'))?.split(/\s+/)[1] || '0') (سطر 89)
   • memLines.find(line => line.startsWith('MemTotal:'))?.split(/\s+/) (سطر 89)
   • memLines.find(line => line.startsWith('MemTotal:')) (سطر 89)
   • line.startsWith('MemTotal:') (سطر 89)
   • parseInt(memLines.find(line => line.startsWith('MemAvailable:'))?.split(/\s+/)[1] || '0') (سطر 90)
   • memLines.find(line => line.startsWith('MemAvailable:'))?.split(/\s+/) (سطر 90)
   • memLines.find(line => line.startsWith('MemAvailable:')) (سطر 90)
   • line.startsWith('MemAvailable:') (سطر 90)
   • parseInt(memLines.find(line => line.startsWith('MemFree:'))?.split(/\s+/)[1] || '0') (سطر 91)
   • memLines.find(line => line.startsWith('MemFree:'))?.split(/\s+/) (سطر 91)
   • memLines.find(line => line.startsWith('MemFree:')) (سطر 91)
   • line.startsWith('MemFree:') (سطر 91)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/systemService.ts
🏷️ الدالة: SystemService._getDiskInfo
🔢 الأسطر: 98-104
⚡ Async: نعم
📞 الاستدعاءات:
   • execAsync("df -B1 / | tail -1 | awk '{print $2,$3,$4}'") (سطر 99)
   • stdout.trim().split(' ').map(Number) (سطر 100)
   • stdout.trim().split(' ') (سطر 100)
   • stdout.trim() (سطر 100)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/systemService.ts
🏷️ الدالة: SystemService._getUptime
🔢 الأسطر: 106-109
⚡ Async: نعم
📞 الاستدعاءات:
   • execAsync("cat /proc/uptime | awk '{print $1}'") (سطر 107)
   • parseFloat(stdout.trim()) (سطر 108)
   • stdout.trim() (سطر 108)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/systemService.ts
🏷️ الدالة: SystemService.getSystemInfo
🔢 الأسطر: 111-120
⚡ Async: نعم
📞 الاستدعاءات:
   • this.getCachedSystemInfo() (سطر 119)
🩺 التشخيص:
   ⚠️ دالة async لكن لا تستخدم await

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/systemService.ts
🏷️ الدالة: SystemService._getSystemInfo
🔢 الأسطر: 122-155
⚡ Async: نعم
📞 الاستدعاءات:
   • Promise.all([
        execAsync('hostname'),
        execAsync('uname -s'), 
        execAsync('uname -m'),
        execAsync('uname -r'),
        execAsync("cat /proc/uptime | awk '{print $1}'"),
        execAsync("cat /proc/loadavg | awk '{print $1,$2,$3}'")  
      ]) (سطر 132)
   • execAsync('hostname') (سطر 133)
   • execAsync('uname -s') (سطر 134)
   • execAsync('uname -m') (سطر 135)
   • execAsync('uname -r') (سطر 136)
   • execAsync("cat /proc/uptime | awk '{print $1}'") (سطر 137)
   • execAsync("cat /proc/loadavg | awk '{print $1,$2,$3}'") (سطر 138)
   • parseFloat(uptimeResult.stdout.trim()) (سطر 141)
   • uptimeResult.stdout.trim() (سطر 141)
   • loadResult.stdout.trim().split(' ').map(Number) (سطر 142)
   • loadResult.stdout.trim().split(' ') (سطر 142)
   • loadResult.stdout.trim() (سطر 142)
   • hostnameResult.stdout.trim() (سطر 145)
   • platformResult.stdout.trim() (سطر 146)
   • archResult.stdout.trim() (سطر 147)
   • kernelResult.stdout.trim() (سطر 148)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/systemService.ts
🏷️ الدالة: SystemService.performHealthCheck
🔢 الأسطر: 158-288
⚡ Async: نعم
📞 الاستدعاءات:
   • import('../storage.js') (سطر 182)
   • storage.testConnection() (سطر 183)
   • this.getSystemStats() (سطر 200)
   • criticalIssues.push('استخدام المعالج مرتفع جداً') (سطر 203)
   • criticalIssues.push('استخدام الذاكرة مرتفع جداً') (سطر 204)
   • criticalIssues.push('مساحة القرص ممتلئة تقريباً') (سطر 205)
   • criticalIssues.join(', ') (سطر 217)
   • this.checkDependencies() (سطر 232)
   • dependencies.filter(dep => dep.category === 'critical' && !dep.installed) (سطر 233)
   • dependencies.filter(d => d.installed) (سطر 239)
   • criticalDeps.map(d => d.name).join(', ') (سطر 245)
   • criticalDeps.map(d => d.name) (سطر 245)
   • dependencies.filter(d => d.installed) (سطر 246)
   • Math.round(scorePercentage) (سطر 262)
   • Math.round(scorePercentage) (سطر 263)
   • Math.round(scorePercentage) (سطر 268)
   • Math.round(scorePercentage) (سطر 269)
   • Math.round(scorePercentage) (سطر 274)
   • Math.round(scorePercentage) (سطر 275)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/systemService.ts
🏷️ الدالة: SystemService.checkDependencies
🔢 الأسطر: 291-427
⚡ Async: نعم
📞 الاستدعاءات:
   • Promise.all(
      dependencies.map(async (dep) => {
        try {
          const { stdout } = await execAsync(dep.checkCommand);
          const version = stdout.trim().split('\n')[0];
          return {
            ...dep,
            installed: true,
            version
          };
        } catch (error) {
          return {
            ...dep,
            installed: false
          };
        }
      })
    ) (سطر 407)
   • dependencies.map(async (dep) => {
        try {
          const { stdout } = await execAsync(dep.checkCommand);
          const version = stdout.trim().split('\n')[0];
          return {
            ...dep,
            installed: true,
            version
          };
        } catch (error) {
          return {
            ...dep,
            installed: false
          };
        }
      }) (سطر 408)
   • execAsync(dep.checkCommand) (سطر 410)
   • stdout.trim().split('\n') (سطر 411)
   • stdout.trim() (سطر 411)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/systemService.ts
🏷️ الدالة: SystemService.installDependency
🔢 الأسطر: 430-489
⚡ Async: نعم
🔑 الوسائط:
   • dependencyName: string
📞 الاستدعاءات:
   • this.checkDependencies() (سطر 436)
   • dependencies.find(d => d.name === dependencyName) (سطر 437)
   • console.log(`🔧 جاري تثبيت ${dep.displayName}...`) (سطر 460)
   • console.log(`📝 الأمر: ${dep.installCommand}`) (سطر 461)
   • execAsync(dep.installCommand) (سطر 463)
   • execAsync(dep.checkCommand) (سطر 467)
   • console.error(`خطأ في تثبيت ${dependencyName}:`, error) (سطر 482)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/systemService.ts
🏷️ الدالة: SystemService.getProcesses
🔢 الأسطر: 491-509
⚡ Async: نعم
📞 الاستدعاءات:
   • execAsync("ps aux --no-headers | awk '{print $2,$11,$3,$4,$8}' | head -20") (سطر 493)
   • stdout.trim().split('\n') (سطر 494)
   • stdout.trim() (سطر 494)
   • lines.map(line => {
        const [pid, name, cpu, memory, status] = line.trim().split(/\s+/);
        return {
          pid: parseInt(pid),
          name,
          cpu: parseFloat(cpu),
          memory: parseFloat(memory),
          status
        };
      }) (سطر 496)
   • line.trim().split(/\s+/) (سطر 497)
   • line.trim() (سطر 497)
   • parseInt(pid) (سطر 499)
   • parseFloat(cpu) (سطر 501)
   • parseFloat(memory) (سطر 502)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/systemService.ts
🏷️ الدالة: SystemService.checkDns
🔢 الأسطر: 511-528
⚡ Async: نعم
🔑 الوسائط:
   • domain: string
📞 الاستدعاءات:
   • execAsync(`dig +short A ${domain}`) (سطر 513)
   • stdout.trim().split('\n').filter(ip => ip.match(/^\d+\.\d+\.\d+\.\d+$/)) (سطر 514)
   • stdout.trim().split('\n') (سطر 514)
   • stdout.trim() (سطر 514)
   • ip.match(/^\d+\.\d+\.\d+\.\d+$/) (سطر 514)
   • execAsync('curl -s ifconfig.me') (سطر 521)
   • publicIp.trim() (سطر 522)
   • ips.includes(serverIp) (سطر 524)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/systemService.ts
🏷️ الدالة: SystemService.executeCommand
🔢 الأسطر: 530-545
⚡ Async: نعم
🔑 الوسائط:
   • command: string
📞 الاستدعاءات:
   • execAsync(command) (سطر 532)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/systemService.ts
🏷️ الدالة: SystemService.getNetworkConnections
🔢 الأسطر: 547-577
⚡ Async: نعم
📞 الاستدعاءات:
   • execAsync("netstat -tnl | grep LISTEN") (سطر 556)
   • stdout.trim().split('\n') (سطر 557)
   • stdout.trim() (سطر 557)
   • lines.map(line => {
        const parts = line.trim().split(/\s+/);
        const [protocol, , , localAddr, remoteAddr, state] = parts;
        const [localAddress, localPort] = localAddr.split(':');
        const [remoteAddress, remotePort] = remoteAddr.split(':');
        
        return {
          protocol,
          localAddress,
          localPort: parseInt(localPort),
          remoteAddress,
          remotePort: parseInt(remotePort) || 0,
          state
        };
      }) (سطر 559)
   • line.trim().split(/\s+/) (سطر 560)
   • line.trim() (سطر 560)
   • localAddr.split(':') (سطر 562)
   • remoteAddr.split(':') (سطر 563)
   • parseInt(localPort) (سطر 568)
   • parseInt(remotePort) (سطر 570)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/services/systemService.ts
🏷️ الدالة: SystemService.getServiceStatus
🔢 الأسطر: 579-601
⚡ Async: نعم
🔑 الوسائط:
   • serviceName: string
📞 الاستدعاءات:
   • execAsync(`systemctl is-active ${serviceName}`) (سطر 585)
   • execAsync(`systemctl is-enabled ${serviceName}`) (سطر 586)
   • execAsync(`systemctl status ${serviceName} --no-pager -l`) (سطر 587)
   • activeStatus.trim() (سطر 590)
   • enabledStatus.trim() (سطر 591)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/auditHelpers.ts
🏷️ الدالة: AuditHelpers.scanForSecurityIssues
🔢 الأسطر: 35-100
⚡ Async: نعم
📞 الاستدعاءات:
   • execAsync('npm audit --json') (سطر 44)
   • JSON.parse(auditOutput) (سطر 45)
   • Object.values(auditData.vulnerabilities || {}) (سطر 46)
   • execAsync(`grep -r "${pattern}" . --exclude-dir=node_modules --include="*.ts" --include="*.js"`) (سطر 59)
   • stdout.trim() (سطر 60)
   • result.unsafeConfigurations.push(`Found unsafe pattern: ${pattern}`) (سطر 61)
   • fs.readFile(file, 'utf8') (سطر 81)
   • content.includes(header) (سطر 83)
   • result.missingSecurityHeaders.push(header) (سطر 84)
   • console.error('خطأ في فحص الأمان:', error) (سطر 96)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/auditHelpers.ts
🏷️ الدالة: AuditHelpers.scanForPerformanceIssues
🔢 الأسطر: 102-164
⚡ Async: نعم
📞 الاستدعاءات:
   • Date.now() (سطر 112)
   • execAsync('npm run build') (سطر 113)
   • Date.now() (سطر 114)
   • execAsync('du -sb dist') (سطر 118)
   • parseInt(stdout.split('\t')[0]) (سطر 119)
   • stdout.split('\t') (سطر 119)
   • execAsync(
            `curl -w "%{time_total}" -s -o /dev/null http://localhost:6000${endpoint}`
          ) (سطر 135)
   • parseFloat(stdout) (سطر 138)
   • result.recommendations.push('حجم البناء كبير - يُنصح بتحسين التبعيات') (سطر 146)
   • result.recommendations.push('وقت البناء طويل - يُنصح بتحسين إعدادات البناء') (سطر 150)
   • Object.entries(result.apiResponseTimes).forEach(([endpoint, time]) => {
        if (time > 2000) {
          result.recommendations.push(`${endpoint} يستجيب ببطء (${time}ms)`);
        }
      }) (سطر 153)
   • Object.entries(result.apiResponseTimes) (سطر 153)
   • result.recommendations.push(`${endpoint} يستجيب ببطء (${time}ms)`) (سطر 155)
   • console.error('خطأ في فحص الأداء:', error) (سطر 160)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/auditHelpers.ts
🏷️ الدالة: AuditHelpers.scanForAccessibilityIssues
🔢 الأسطر: 166-233
⚡ Async: نعم
📞 الاستدعاءات:
   • this.getReactFiles() (سطر 174)
   • fs.readFile(file, 'utf8') (سطر 178)
   • content.split('\n') (سطر 179)
   • lines.forEach((line, index) => {
            // فحص عناصر img بدون alt
            if (line.includes('<img') && !line.includes('alt=')) {
              result.issues.push({
                file,
                line: index + 1,
                issue: 'صورة بدون نص بديل (alt)',
                severity: 'medium',
                fix: 'أضف خاصية alt للصورة'
              });
            }

            // فحص أزرار بدون aria-label
            if (line.includes('<button') && !line.includes('aria-label') && !line.includes('children')) {
              result.issues.push({
                file,
                line: index + 1,
                issue: 'زر قد يحتاج تسمية للوصولية',
                severity: 'low',
                fix: 'أضف aria-label أو نص واضح للزر'
              });
            }

            // فحص form inputs بدون labels
            if (line.includes('<input') && !line.includes('aria-label') && !line.includes('placeholder')) {
              result.issues.push({
                file,
                line: index + 1,
                issue: 'حقل إدخال قد يحتاج تسمية',
                severity: 'medium',
                fix: 'أضف aria-label أو label للحقل'
              });
            }
          }) (سطر 181)
   • line.includes('<img') (سطر 183)
   • line.includes('alt=') (سطر 183)
   • result.issues.push({
                file,
                line: index + 1,
                issue: 'صورة بدون نص بديل (alt)',
                severity: 'medium',
                fix: 'أضف خاصية alt للصورة'
              }) (سطر 184)
   • line.includes('<button') (سطر 194)
   • line.includes('aria-label') (سطر 194)
   • line.includes('children') (سطر 194)
   • result.issues.push({
                file,
                line: index + 1,
                issue: 'زر قد يحتاج تسمية للوصولية',
                severity: 'low',
                fix: 'أضف aria-label أو نص واضح للزر'
              }) (سطر 195)
   • line.includes('<input') (سطر 205)
   • line.includes('aria-label') (سطر 205)
   • line.includes('placeholder') (سطر 205)
   • result.issues.push({
                file,
                line: index + 1,
                issue: 'حقل إدخال قد يحتاج تسمية',
                severity: 'medium',
                fix: 'أضف aria-label أو label للحقل'
              }) (سطر 206)
   • result.issues.filter(i => i.severity === 'high') (سطر 222)
   • result.issues.filter(i => i.severity === 'medium') (سطر 223)
   • result.issues.filter(i => i.severity === 'low') (سطر 224)
   • Math.max(0, 100 - (criticalIssues * 20) - (mediumIssues * 10) - (lowIssues * 5)) (سطر 226)
   • console.error('خطأ في فحص الوصولية:', error) (سطر 229)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/auditHelpers.ts
🏷️ الدالة: AuditHelpers.getReactFiles
🔢 الأسطر: 235-246
⚡ Async: نعم
📞 الاستدعاءات:
   • execAsync('find client/src -name "*.tsx" -o -name "*.jsx"') (سطر 239)
   • files.push(...stdout.trim().split('\n').filter(f => f.trim())) (سطر 240)
   • stdout.trim().split('\n').filter(f => f.trim()) (سطر 240)
   • stdout.trim().split('\n') (سطر 240)
   • stdout.trim() (سطر 240)
   • f.trim() (سطر 240)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/auditHelpers.ts
🏷️ الدالة: AuditHelpers.generateMarkdownReport
🔢 الأسطر: 248-361
⚡ Async: نعم
🔑 الوسائط:
   • auditData: any
📞 الاستدعاءات:
   • new Date().toLocaleString('ar-SA') (سطر 249)
   • Object.entries(auditData.checklist).forEach(([item, status]) => {
      const icon = status === 'PASS' ? '✅' : '❌';
      report += `- ${icon} ${item}\n`;
    }) (سطر 273)
   • Object.entries(auditData.checklist) (سطر 273)
   • auditData.issues.forEach((issue: any, index: number) => {
      const severityIcons: Record<string, string> = {
        'Critical': '🔴',
        'High': '🟠',
        'Medium': '🟡',
        'Low': '🔵'
      };
      const severityIcon = severityIcons[issue.severity] || '⚪';

      report += `### ${index + 1}. ${issue.title}

**الشدة:** ${severityIcon} ${issue.severity}  
**الفئة:** ${issue.category}

**الوصف:** ${issue.description}

**خطوات إعادة الإنتاج:**
${issue.reproductionSteps.map((step: string, i: number) => `${i + 1}. ${step}`).join('\n')}

${issue.affectedFiles.length > 0 ? `**الملفات المتأثرة:** ${issue.affectedFiles.join(', ')}` : ''}

**الحل المقترح:** ${issue.suggestedFix}

---

`;
    }) (سطر 280)
   • issue.reproductionSteps.map((step: string, i: number) => `${i + 1}. ${step}`).join('\n') (سطر 297)
   • issue.reproductionSteps.map((step: string, i: number) => `${i + 1}. ${step}`) (سطر 297)
   • issue.affectedFiles.join(', ') (سطر 299)
   • new Date().toISOString() (سطر 338)
🩺 التشخيص:
   ⚠️ دالة async لكن لا تستخدم await

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/env-loader.ts
🏷️ الدالة: initializeEnvironment
🔢 الأسطر: 112-118
⚡ Async: لا
📞 الاستدعاءات:
   • envLoader['initialize']() (سطر 115)
   • console.log('🔧 تم تهيئة متغيرات البيئة') (سطر 117)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/env-loader.ts
🏷️ الدالة: EnvLoader.initialize
🔢 الأسطر: 21-34
⚡ Async: لا
📞 الاستدعاءات:
   • this.loadEnvFile() (سطر 28)
   • this.loadEcosystemConfig() (سطر 31)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/env-loader.ts
🏷️ الدالة: EnvLoader.loadEnvFile
🔢 الأسطر: 36-64
⚡ Async: لا
📞 الاستدعاءات:
   • path.join(process.cwd(), '.env') (سطر 37)
   • process.cwd() (سطر 37)
   • fs.existsSync(envPath) (سطر 39)
   • fs.readFileSync(envPath, 'utf8') (سطر 41)
   • envContent.split('\n') (سطر 42)
   • line.trim() (سطر 45)
   • trimmedLine.startsWith('#') (سطر 46)
   • trimmedLine.split('=') (سطر 47)
   • key.trim() (سطر 49)
   • valueParts.join('=').replace(/^["']|["']$/g, '') (سطر 50)
   • valueParts.join('=') (سطر 50)
   • console.log('✅ تم تحميل ملف .env') (سطر 59)
   • console.warn('⚠️ خطأ في قراءة ملف .env:', error) (سطر 61)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/env-loader.ts
🏷️ الدالة: EnvLoader.loadEcosystemConfig
🔢 الأسطر: 66-82
⚡ Async: لا
📞 الاستدعاءات:
   • path.join(process.cwd(), 'ecosystem.config.json') (سطر 67)
   • process.cwd() (سطر 67)
   • fs.existsSync(ecosystemPath) (سطر 69)
   • fs.readFileSync(ecosystemPath, 'utf8') (سطر 71)
   • JSON.parse(ecosystemContent) (سطر 72)
   • Object.assign(this.envConfig, config.apps[0].env) (سطر 75)
   • console.log('✅ تم تحميل ecosystem.config.json') (سطر 76)
   • console.warn('⚠️ خطأ في قراءة ecosystem.config.json:', error) (سطر 79)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/env-loader.ts
🏷️ الدالة: EnvLoader.get
🔢 الأسطر: 84-86
⚡ Async: لا
🔑 الوسائط:
   • key: string
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/env-loader.ts
🏷️ الدالة: EnvLoader.getRequired
🔢 الأسطر: 88-94
⚡ Async: لا
🔑 الوسائط:
   • key: string
📞 الاستدعاءات:
   • this.get(key) (سطر 89)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/env-loader.ts
🏷️ الدالة: EnvLoader.set
🔢 الأسطر: 96-99
⚡ Async: لا
🔑 الوسائط:
   • key: string
   • value: string
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/env-loader.ts
🏷️ الدالة: EnvLoader.has
🔢 الأسطر: 101-103
⚡ Async: لا
🔑 الوسائط:
   • key: string
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/env-loader.ts
🏷️ الدالة: EnvLoader.getAll
🔢 الأسطر: 105-107
⚡ Async: لا
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/logger.ts
🏷️ الدالة: Logger.formatMessage
🔢 الأسطر: 15-18
⚡ Async: لا
🔑 الوسائط:
   • level: import("/home/administrator/Panel/server/utils/logger").LogLevel
   • source: import("/home/administrator/Panel/server/utils/logger").LogSource
   • message: string
📞 الاستدعاءات:
   • new Date().toISOString() (سطر 16)
   • level.toUpperCase() (سطر 17)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/logger.ts
🏷️ الدالة: Logger.log
🔢 الأسطر: 20-62
⚡ Async: نعم
🔑 الوسائط:
   • message: string
   • options: import("/home/administrator/Panel/server/utils/logger").LogOptions
📞 الاستدعاءات:
   • this.formatMessage(level, source, message) (سطر 30)
   • console.error(formattedMessage) (سطر 34)
   • console.warn(formattedMessage) (سطر 37)
   • console.debug(formattedMessage) (سطر 40)
   • console.log(formattedMessage) (سطر 43)
   • storage.createSystemLog({
          source,
          level,
          message,
          applicationId,
          metadata: metadata ? JSON.stringify(metadata) : null,
          timestamp: new Date()
        }) (سطر 49)
   • JSON.stringify(metadata) (سطر 54)
   • console.error(`Failed to save log to database: ${error instanceof Error ? error.message : 'Unknown error'}`) (سطر 59)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/logger.ts
🏷️ الدالة: Logger.info
🔢 الأسطر: 64-66
⚡ Async: نعم
🔑 الوسائط:
   • message: string
   • source: import("/home/administrator/Panel/server/utils/logger").LogSource
   • options: Omit<import("/home/administrator/Panel/server/utils/logger").LogOptions, "level" | "source"> | undefined
📞 الاستدعاءات:
   • this.log(message, { ...options, level: 'info', source }) (سطر 65)
🩺 التشخيص:
   ⚠️ دالة async لكن لا تستخدم await

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/logger.ts
🏷️ الدالة: Logger.warn
🔢 الأسطر: 68-70
⚡ Async: نعم
🔑 الوسائط:
   • message: string
   • source: import("/home/administrator/Panel/server/utils/logger").LogSource
   • options: Omit<import("/home/administrator/Panel/server/utils/logger").LogOptions, "level" | "source"> | undefined
📞 الاستدعاءات:
   • this.log(message, { ...options, level: 'warn', source }) (سطر 69)
🩺 التشخيص:
   ⚠️ دالة async لكن لا تستخدم await

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/logger.ts
🏷️ الدالة: Logger.error
🔢 الأسطر: 72-74
⚡ Async: نعم
🔑 الوسائط:
   • message: string
   • source: import("/home/administrator/Panel/server/utils/logger").LogSource
   • options: Omit<import("/home/administrator/Panel/server/utils/logger").LogOptions, "level" | "source"> | undefined
📞 الاستدعاءات:
   • this.log(message, { ...options, level: 'error', source }) (سطر 73)
🩺 التشخيص:
   ⚠️ دالة async لكن لا تستخدم await

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/logger.ts
🏷️ الدالة: Logger.debug
🔢 الأسطر: 76-78
⚡ Async: نعم
🔑 الوسائط:
   • message: string
   • source: import("/home/administrator/Panel/server/utils/logger").LogSource
   • options: Omit<import("/home/administrator/Panel/server/utils/logger").LogOptions, "level" | "source"> | undefined
📞 الاستدعاءات:
   • this.log(message, { ...options, level: 'debug', source }) (سطر 77)
🩺 التشخيص:
   ⚠️ دالة async لكن لا تستخدم await

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/logger.ts
🏷️ الدالة: Logger.apiLog
🔢 الأسطر: 81-83
⚡ Async: نعم
🔑 الوسائط:
   • message: string
   • level: import("/home/administrator/Panel/server/utils/logger").LogLevel
   • metadata: Record<string, any> | undefined
📞 الاستدعاءات:
   • this.log(message, { level, source: 'api', metadata }) (سطر 82)
🩺 التشخيص:
   ⚠️ دالة async لكن لا تستخدم await

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/logger.ts
🏷️ الدالة: Logger.apiError
🔢 الأسطر: 85-93
⚡ Async: نعم
🔑 الوسائط:
   • message: string
   • error: Error | undefined
📞 الاستدعاءات:
   • this.log(message, { level: 'error', source: 'api', metadata }) (سطر 92)
🩺 التشخيص:
   ⚠️ دالة async لكن لا تستخدم await

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/logger.ts
🏷️ الدالة: Logger.applicationLog
🔢 الأسطر: 95-97
⚡ Async: نعم
🔑 الوسائط:
   • message: string
   • applicationId: string
   • level: import("/home/administrator/Panel/server/utils/logger").LogLevel
📞 الاستدعاءات:
   • this.log(message, { level, source: 'application', applicationId }) (سطر 96)
🩺 التشخيص:
   ⚠️ دالة async لكن لا تستخدم await

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/logger.ts
🏷️ الدالة: Logger.applicationError
🔢 الأسطر: 99-107
⚡ Async: نعم
🔑 الوسائط:
   • message: string
   • applicationId: string
   • error: Error | undefined
📞 الاستدعاءات:
   • this.log(message, { level: 'error', source: 'application', applicationId, metadata }) (سطر 106)
🩺 التشخيص:
   ⚠️ دالة async لكن لا تستخدم await

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/logger.ts
🏷️ الدالة: Logger.systemError
🔢 الأسطر: 109-117
⚡ Async: نعم
🔑 الوسائط:
   • message: string
   • error: Error | undefined
📞 الاستدعاءات:
   • this.log(message, { level: 'error', source: 'system', metadata }) (سطر 116)
🩺 التشخيص:
   ⚠️ دالة async لكن لا تستخدم await

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/logger.ts
🏷️ الدالة: Logger.authLog
🔢 الأسطر: 119-122
⚡ Async: نعم
🔑 الوسائط:
   • message: string
   • level: import("/home/administrator/Panel/server/utils/logger").LogLevel
   • userId: string | undefined
📞 الاستدعاءات:
   • this.log(message, { level, source: 'auth', metadata }) (سطر 121)
🩺 التشخيص:
   ⚠️ دالة async لكن لا تستخدم await

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/logger.ts
🏷️ الدالة: Logger.databaseError
🔢 الأسطر: 124-133
⚡ Async: نعم
🔑 الوسائط:
   • message: string
   • error: Error | undefined
📞 الاستدعاءات:
   • this.log(message, { level: 'error', source: 'database', metadata, skipDatabase: true }) (سطر 132)
🩺 التشخيص:
   ⚠️ دالة async لكن لا تستخدم await

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/logger.ts
🏷️ الدالة: logInfo
🔢 الأسطر: 139-139
⚡ Async: لا
🔑 الوسائط:
   • message: string
   • source: import("/home/administrator/Panel/server/utils/logger").LogSource | undefined
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/logger.ts
🏷️ الدالة: logWarn
🔢 الأسطر: 140-140
⚡ Async: لا
🔑 الوسائط:
   • message: string
   • source: import("/home/administrator/Panel/server/utils/logger").LogSource | undefined
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/logger.ts
🏷️ الدالة: logError
🔢 الأسطر: 141-141
⚡ Async: لا
🔑 الوسائط:
   • message: string
   • source: import("/home/administrator/Panel/server/utils/logger").LogSource | undefined
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/logger.ts
🏷️ الدالة: logDebug
🔢 الأسطر: 142-142
⚡ Async: لا
🔑 الوسائط:
   • message: string
   • source: import("/home/administrator/Panel/server/utils/logger").LogSource | undefined
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/pathManager.ts
🏷️ الدالة: PathManager.getInstance
🔢 الأسطر: 11-16
⚡ Async: لا
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/pathManager.ts
🏷️ الدالة: PathManager.getValidPath
🔢 الأسطر: 19-58
⚡ Async: لا
🔑 الوسائط:
   • pathType: "root" | "logs" | "uploads" | "config" | "ssl" | "nginx" | "pm2"
   • fallbackPath: string | undefined
📞 الاستدعاءات:
   • getPath(pathType) (سطر 20)
   • fs.existsSync(primaryPath) (سطر 24)
   • fs.mkdirSync(primaryPath, { recursive: true }) (سطر 25)
   • console.log(`📁 تم إنشاء المسار: ${primaryPath}`) (سطر 26)
   • console.warn(`⚠️ فشل في إنشاء المسار الأساسي: ${primaryPath}`) (سطر 30)
   • fs.existsSync(fallbackPath) (سطر 35)
   • fs.mkdirSync(fallbackPath, { recursive: true }) (سطر 36)
   • console.log(`🔄 استخدام المسار الاحتياطي: ${fallbackPath}`) (سطر 38)
   • console.error(`❌ فشل في استخدام المسار الاحتياطي: ${fallbackPath}`) (سطر 41)
   • fs.existsSync(relativePath) (سطر 48)
   • fs.mkdirSync(relativePath, { recursive: true }) (سطر 49)
   • console.log(`🏠 استخدام المسار النسبي: ${relativePath}`) (سطر 51)
   • console.error(`❌ فشل في جميع المسارات، استخدام المجلد الحالي`) (سطر 54)
   • process.cwd() (سطر 55)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/pathManager.ts
🏷️ الدالة: PathManager.getLogsPath
🔢 الأسطر: 61-63
⚡ Async: لا
📞 الاستدعاءات:
   • this.getValidPath('logs', './logs') (سطر 62)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/pathManager.ts
🏷️ الدالة: PathManager.getUploadsPath
🔢 الأسطر: 66-68
⚡ Async: لا
📞 الاستدعاءات:
   • this.getValidPath('uploads', './uploads') (سطر 67)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/pathManager.ts
🏷️ الدالة: PathManager.getConfigPath
🔢 الأسطر: 71-73
⚡ Async: لا
📞 الاستدعاءات:
   • this.getValidPath('config', './.config') (سطر 72)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/pathManager.ts
🏷️ الدالة: PathManager.getSSLPath
🔢 الأسطر: 76-78
⚡ Async: لا
📞 الاستدعاءات:
   • this.getValidPath('ssl', './ssl') (سطر 77)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/pathManager.ts
🏷️ الدالة: PathManager.getNginxPath
🔢 الأسطر: 81-107
⚡ Async: لا
📞 الاستدعاءات:
   • getPath('nginx') (سطر 84)
   • fs.existsSync(nginxPath) (سطر 92)
   • fs.existsSync(localNginxPath) (سطر 100)
   • fs.mkdirSync(localNginxPath, { recursive: true }) (سطر 101)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/pathManager.ts
🏷️ الدالة: PathManager.getPM2Path
🔢 الأسطر: 110-112
⚡ Async: لا
📞 الاستدعاءات:
   • this.getValidPath('pm2', './.pm2') (سطر 111)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/pathManager.ts
🏷️ الدالة: PathManager.getFilePath
🔢 الأسطر: 115-118
⚡ Async: لا
🔑 الوسائط:
   • pathType: "root" | "logs" | "uploads" | "config" | "ssl" | "nginx" | "pm2"
   • filename: string
📞 الاستدعاءات:
   • this.getValidPath(pathType) (سطر 116)
   • path.join(basePath, filename) (سطر 117)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/pathManager.ts
🏷️ الدالة: PathManager.isWritable
🔢 الأسطر: 121-128
⚡ Async: لا
🔑 الوسائط:
   • dirPath: string
📞 الاستدعاءات:
   • fs.accessSync(dirPath, fs.constants.W_OK) (سطر 123)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/pathManager.ts
🏷️ الدالة: PathManager.isReadable
🔢 الأسطر: 131-138
⚡ Async: لا
🔑 الوسائط:
   • dirPath: string
📞 الاستدعاءات:
   • fs.accessSync(dirPath, fs.constants.R_OK) (سطر 133)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/pathManager.ts
🏷️ الدالة: PathManager.getPathInfo
🔢 الأسطر: 141-150
⚡ Async: لا
🔑 الوسائط:
   • pathType: "root" | "logs" | "uploads" | "config" | "ssl" | "nginx" | "pm2"
📞 الاستدعاءات:
   • this.getValidPath(pathType) (سطر 142)
   • fs.existsSync(path) (سطر 145)
   • this.isWritable(path) (سطر 146)
   • this.isReadable(path) (سطر 147)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/pathManager.ts
🏷️ الدالة: PathManager.logPathsDiagnostic
🔢 الأسطر: 153-167
⚡ Async: لا
📞 الاستدعاءات:
   • console.log('📁 تشخيص المسارات:') (سطر 154)
   • console.log(`🌍 البيئة: ${ENV_CONFIG.name}`) (سطر 155)
   • console.log(`🔧 نوع الخادم: ${ENV_CONFIG.isReplit ? 'Replit' : 'External/Local'}`) (سطر 156)
   • pathTypes.forEach(pathType => {
      const info = this.getPathInfo(pathType);
      console.log(`   📂 ${pathType}: ${info.path}`);
      console.log(`      - موجود: ${info.exists ? '✅' : '❌'}`);
      console.log(`      - قابل للقراءة: ${info.isReadable ? '✅' : '❌'}`);
      console.log(`      - قابل للكتابة: ${info.isWritable ? '✅' : '❌'}`);
    }) (سطر 160)
   • this.getPathInfo(pathType) (سطر 161)
   • console.log(`   📂 ${pathType}: ${info.path}`) (سطر 162)
   • console.log(`      - موجود: ${info.exists ? '✅' : '❌'}`) (سطر 163)
   • console.log(`      - قابل للقراءة: ${info.isReadable ? '✅' : '❌'}`) (سطر 164)
   • console.log(`      - قابل للكتابة: ${info.isWritable ? '✅' : '❌'}`) (سطر 165)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/pathManager.ts
🏷️ الدالة: getLogsPath
🔢 الأسطر: 174-174
⚡ Async: لا
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/pathManager.ts
🏷️ الدالة: getUploadsPath
🔢 الأسطر: 175-175
⚡ Async: لا
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/pathManager.ts
🏷️ الدالة: getConfigPath
🔢 الأسطر: 176-176
⚡ Async: لا
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/pathManager.ts
🏷️ الدالة: getSSLPath
🔢 الأسطر: 177-177
⚡ Async: لا
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/pathManager.ts
🏷️ الدالة: getNginxPath
🔢 الأسطر: 178-178
⚡ Async: لا
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: server/utils/pathManager.ts
🏷️ الدالة: getPM2Path
🔢 الأسطر: 179-179
⚡ Async: لا
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/ActivityTracking.tsx
🏷️ الدالة: withActivityTracking
🔢 الأسطر: 18-105
⚡ Async: لا
🔑 الوسائط:
   • WrappedComponent: React.ComponentType<P>
   • options: import("/home/administrator/Panel/client/src/components/ActivityTracking").WithActivityTrackingOptions
📞 الاستدعاءات:
   • forwardRef<any, P & WithActivityTrackingOptions>((props, ref) => {
    const { isTracking } = useActivityContext();
    const { trackUserAction } = useUserAction(options.actionContext);
    
    const finalOptions = {
      trackClicks: true,
      trackFocus: false,
      trackHover: false,
      trackVisibility: false,
      ...options,
      ...props // السماح بتخصيص الخيارات لكل instance
    };

    const elementId = finalOptions.elementId || `tracked-${WrappedComponent.displayName || WrappedComponent.name || 'component'}`;
    
    const {
      trackClick,
      trackHover,
      trackFocus
    } = useElementInteraction(elementId, {
      trackClicks: finalOptions.trackClicks,
      trackHovers: finalOptions.trackHover,
      trackFocus: finalOptions.trackFocus,
      trackVisibility: finalOptions.trackVisibility,
      metadata: finalOptions.metadata
    });

    // إذا كان التتبع معطل أو مستبعد، ارجع المكون الأصلي
    if (!isTracking || finalOptions.excludeFromTracking) {
      return <WrappedComponent {...props} ref={ref} />;
    }

    // إضافة معالجات الأحداث للتتبع
    const enhancedProps = {
      ...props,
      onClick: (event: any) => {
        if (finalOptions.trackClicks) {
          trackClick(event, { componentName: WrappedComponent.displayName || WrappedComponent.name });
          trackUserAction('component_click', {
            componentName: WrappedComponent.displayName || WrappedComponent.name,
            elementId,
            ...finalOptions.metadata
          });
        }
        // استدعاء onClick الأصلي إذا وجد
        if (props.onClick) {
          (props as any).onClick(event);
        }
      },
      onMouseEnter: finalOptions.trackHover ? (event: any) => {
        trackHover(true, event);
        if (props.onMouseEnter) {
          (props as any).onMouseEnter(event);
        }
      } : props.onMouseEnter,
      onMouseLeave: finalOptions.trackHover ? (event: any) => {
        trackHover(false, event);
        if (props.onMouseLeave) {
          (props as any).onMouseLeave(event);
        }
      } : props.onMouseLeave,
      onFocus: finalOptions.trackFocus ? (event: any) => {
        trackFocus(true, event);
        if (props.onFocus) {
          (props as any).onFocus(event);
        }
      } : props.onFocus,
      onBlur: finalOptions.trackFocus ? (event: any) => {
        trackFocus(false, event);
        if (props.onBlur) {
          (props as any).onBlur(event);
        }
      } : props.onBlur,
      'data-tracked': true,
      'data-tracking-id': elementId
    };

    return <WrappedComponent {...enhancedProps} ref={ref} />;
  }) (سطر 22)
   • useActivityContext() (سطر 23)
   • useUserAction(options.actionContext) (سطر 24)
   • useElementInteraction(elementId, {
      trackClicks: finalOptions.trackClicks,
      trackHovers: finalOptions.trackHover,
      trackFocus: finalOptions.trackFocus,
      trackVisibility: finalOptions.trackVisibility,
      metadata: finalOptions.metadata
    }) (سطر 41)
   • trackClick(event, { componentName: WrappedComponent.displayName || WrappedComponent.name }) (سطر 59)
   • trackUserAction('component_click', {
            componentName: WrappedComponent.displayName || WrappedComponent.name,
            elementId,
            ...finalOptions.metadata
          }) (سطر 60)
   • (props as any).onClick(event) (سطر 68)
   • trackHover(true, event) (سطر 72)
   • (props as any).onMouseEnter(event) (سطر 74)
   • trackHover(false, event) (سطر 78)
   • (props as any).onMouseLeave(event) (سطر 80)
   • trackFocus(true, event) (سطر 84)
   • (props as any).onFocus(event) (سطر 86)
   • trackFocus(false, event) (سطر 90)
   • (props as any).onBlur(event) (سطر 92)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/ActivityTracking.tsx
🏷️ الدالة: withPageTracking
🔢 الأسطر: 318-359
⚡ Async: لا
🔑 الوسائط:
   • WrappedComponent: React.ComponentType<P>
   • options: import("/home/administrator/Panel/client/src/components/ActivityTracking").WithPageTrackingOptions
📞 الاستدعاءات:
   • usePageView(pageName, {
      componentName: WrappedComponent.displayName || WrappedComponent.name,
      ...options.pageMetadata
    }) (سطر 325)
   • useUserAction('page') (سطر 330)
   • trackPageEvent('page_loaded', {
            componentName: WrappedComponent.displayName || WrappedComponent.name
          }) (سطر 337)
   • trackUserAction('page_loaded', {
            pageName,
            componentName: WrappedComponent.displayName || WrappedComponent.name
          }) (سطر 341)
   • (props as any).onLoad(event) (سطر 348)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/ActivityTracking.tsx
🏷️ الدالة: useTrackingProps
🔢 الأسطر: 495-556
⚡ Async: لا
🔑 الوسائط:
   • elementId: string
   • options: { trackClicks?: boolean | undefined; trackHover?: boolean | undefined; trackFocus?: boolean | undefined; metadata?: Record<string, any> | undefined; } | undefined
📞 الاستدعاءات:
   • useActivityContext() (سطر 501)
   • useUserAction() (سطر 502)
   • trackUserAction('element_click', {
        elementId,
        ...finalOptions.metadata
      }) (سطر 513)
   • trackUserAction('element_hover', {
        elementId,
        hoverType: 'enter',
        ...finalOptions.metadata
      }) (سطر 520)
   • trackUserAction('element_hover', {
        elementId,
        hoverType: 'leave',
        ...finalOptions.metadata
      }) (سطر 528)
   • trackUserAction('element_focus', {
        elementId,
        focusType: 'enter',
        ...finalOptions.metadata
      }) (سطر 536)
   • trackUserAction('element_focus', {
        elementId,
        focusType: 'leave',
        ...finalOptions.metadata
      }) (سطر 544)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/ActivityTracking.tsx
🏷️ الدالة: mergeTrackingProps
🔢 الأسطر: 559-584
⚡ Async: لا
🔑 الوسائط:
   • originalProps: any
   • trackingProps: any
   • options: { preserveOriginal?: boolean | undefined; } | undefined
📞 الاستدعاءات:
   • Object.keys(trackingProps).forEach(key => {
    if (key.startsWith('on') && preserveOriginal && originalProps[key]) {
      // دمج event handlers
      const originalHandler = originalProps[key];
      const trackingHandler = trackingProps[key];
      
      mergedProps[key] = (event: any) => {
        trackingHandler(event);
        originalHandler(event);
      };
    } else {
      mergedProps[key] = trackingProps[key];
    }
  }) (سطر 568)
   • Object.keys(trackingProps) (سطر 568)
   • key.startsWith('on') (سطر 569)
   • trackingHandler(event) (سطر 575)
   • originalHandler(event) (سطر 576)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/contexts/ActivityContext.tsx
🏷️ الدالة: useActivityContext
🔢 الأسطر: 110-116
⚡ Async: لا
📞 الاستدعاءات:
   • useContext(ActivityContext) (سطر 111)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/contexts/ActivityContext.tsx
🏷️ الدالة: ActivityProvider
🔢 الأسطر: 127-425
⚡ Async: لا
🔑 الوسائط:
   • { 
  children, 
  initialConfig = {}, 
  initialSettings = {},
  user = null,
  enableByDefault = true
}: import("/home/administrator/Panel/client/src/contexts/ActivityContext").ActivityProviderProps
📞 الاستدعاءات:
   • useState(false) (سطر 136)
   • useState(false) (سطر 137)
   • useState(navigator.onLine) (سطر 138)
   • useState<UserActivityTracker | null>(null) (سطر 139)
   • useState<SessionInfo | null>(null) (سطر 140)
   • useState<User | null>(user) (سطر 141)
   • useState<TrackingSettings>({
    ...DEFAULT_SETTINGS,
    ...initialSettings
  }) (سطر 144)
   • useState<ActivityStats>({
    totalActivities: 0,
    activitiesThisSession: 0,
    queueSize: 0,
    averageActivitiesPerMinute: 0,
    topPages: [],
    topActions: []
  }) (سطر 149)
   • useEffect(() => {
    const handleOnline = () => setIsOnline(true);
    const handleOffline = () => setIsOnline(false);

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);

    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []) (سطر 159)
   • setIsOnline(true) (سطر 160)
   • setIsOnline(false) (سطر 161)
   • window.addEventListener('online', handleOnline) (سطر 163)
   • window.addEventListener('offline', handleOffline) (سطر 164)
   • window.removeEventListener('online', handleOnline) (سطر 167)
   • window.removeEventListener('offline', handleOffline) (سطر 168)
   • useEffect(() => {
    let statsInterval: NodeJS.Timeout;

    if (isTracking && tracker) {
      statsInterval = setInterval(() => {
        updateStats();
      }, 5000); // تحديث كل 5 ثوانِ
    }

    return () => {
      if (statsInterval) {
        clearInterval(statsInterval);
      }
    };
  }, [isTracking, tracker]) (سطر 173)
   • setInterval(() => {
        updateStats();
      }, 5000) (سطر 177)
   • updateStats() (سطر 178)
   • clearInterval(statsInterval) (سطر 184)
   • useCallback((config: Partial<ActivityTrackerConfig> = {}) => {
    try {
      // إنشاء إعدادات متكاملة
      const fullConfig: Partial<ActivityTrackerConfig> = {
        apiEndpoint: '/api/user-activities',
        batchEndpoint: '/api/user-activities/batch',
        enableConsoleLogging: settings.enableConsoleLogging,
        enableLocalStorage: settings.enableLocalStorage,
        batchSize: settings.batchSize,
        batchTimeout: settings.batchTimeout,
        enableDebouncing: settings.enableDebouncing,
        trackScrollEvents: settings.trackScrolling,
        trackMouseMovements: settings.trackMouseMovements,
        trackKeystrokes: settings.trackKeystrokes,
        trackClipboardEvents: settings.trackClipboardEvents,
        trackFileOperations: settings.trackFileOperations,
        enableOfflineSupport: settings.enableOfflineSupport,
        excludePages: settings.excludePages,
        excludeElements: settings.excludeElements,
        sensitiveFields: settings.sensitiveFields,
        ...initialConfig,
        ...config
      };

      const newTracker = createActivityTracker(fullConfig);
      setTracker(newTracker);

      // إنشاء جلسة جديدة
      const newSession: SessionInfo = {
        sessionId: newTracker.getSessionId(),
        startTime: Date.now(),
        isActive: true,
        userId: currentUser?.id,
        userInfo: currentUser || undefined
      };
      setSession(newSession);

      setIsInitialized(true);
      
      if (enableByDefault && settings.enabled) {
        setIsTracking(true);
      }

      if (settings.enableConsoleLogging) {
        console.log('🎯 Activity tracking initialized successfully');
      }
      
    } catch (error) {
      console.error('Failed to initialize activity tracking:', error);
    }
  }, [settings, currentUser, initialConfig, enableByDefault]) (سطر 190)
   • createActivityTracker(fullConfig) (سطر 214)
   • setTracker(newTracker) (سطر 215)
   • newTracker.getSessionId() (سطر 219)
   • Date.now() (سطر 220)
   • setSession(newSession) (سطر 225)
   • setIsInitialized(true) (سطر 227)
   • setIsTracking(true) (سطر 230)
   • console.log('🎯 Activity tracking initialized successfully') (سطر 234)
   • console.error('Failed to initialize activity tracking:', error) (سطر 238)
   • useCallback(() => {
    if (!isInitialized) {
      initializeTracking();
      return;
    }
    setIsTracking(true);
  }, [isInitialized, initializeTracking]) (سطر 243)
   • initializeTracking() (سطر 245)
   • setIsTracking(true) (سطر 248)
   • useCallback(() => {
    setIsTracking(false);
    if (tracker) {
      tracker.flush();
    }
  }, [tracker]) (سطر 252)
   • setIsTracking(false) (سطر 253)
   • tracker.flush() (سطر 255)
   • useCallback(() => {
    setIsTracking(false);
  }, []) (سطر 260)
   • setIsTracking(false) (سطر 261)
   • useCallback(() => {
    if (isInitialized) {
      setIsTracking(true);
    }
  }, [isInitialized]) (سطر 265)
   • setIsTracking(true) (سطر 267)
   • useCallback((newSettings: Partial<TrackingSettings>) => {
    setSettings(prev => ({ ...prev, ...newSettings }));
    
    // إذا كان التتبع مفعل، أعد التهيئة بالإعدادات الجديدة
    if (isInitialized && isTracking) {
      setTimeout(() => {
        initializeTracking();
      }, 100);
    }
  }, [isInitialized, isTracking, initializeTracking]) (سطر 272)
   • setSettings(prev => ({ ...prev, ...newSettings })) (سطر 273)
   • setTimeout(() => {
        initializeTracking();
      }, 100) (سطر 277)
   • initializeTracking() (سطر 278)
   • useCallback((user: User | null) => {
    setCurrentUser(user);
    
    if (session) {
      setSession(prev => prev ? {
        ...prev,
        userId: user?.id,
        userInfo: user || undefined
      } : null);
    }
  }, [session]) (سطر 284)
   • setCurrentUser(user) (سطر 285)
   • setSession(prev => prev ? {
        ...prev,
        userId: user?.id,
        userInfo: user || undefined
      } : null) (سطر 288)
   • useCallback((action: string, metadata?: Record<string, any>) => {
    if (isTracking && tracker) {
      tracker.trackCustomAction(action, metadata);
    }
  }, [isTracking, tracker]) (سطر 297)
   • tracker.trackCustomAction(action, metadata) (سطر 299)
   • useCallback((query: string, results?: number) => {
    if (isTracking && tracker) {
      tracker.trackSearch(query, results);
    }
  }, [isTracking, tracker]) (سطر 303)
   • tracker.trackSearch(query, results) (سطر 305)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/contexts/ActivityContext.tsx
🏷️ الدالة: useActivityTracker
🔢 الأسطر: 428-435
⚡ Async: لا
📞 الاستدعاءات:
   • useActivityContext() (سطر 429)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/contexts/ActivityContext.tsx
🏷️ الدالة: useCustomTracking
🔢 الأسطر: 438-456
⚡ Async: لا
📞 الاستدعاءات:
   • useActivityContext() (سطر 446)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/contexts/ActivityContext.tsx
🏷️ الدالة: useSession
🔢 الأسطر: 459-472
⚡ Async: لا
📞 الاستدعاءات:
   • useActivityContext() (سطر 460)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/contexts/ActivityContext.tsx
🏷️ الدالة: useActivityStats
🔢 الأسطر: 475-486
⚡ Async: لا
📞 الاستدعاءات:
   • useActivityContext() (سطر 476)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/contexts/ErrorContext.tsx
🏷️ الدالة: ErrorProvider
🔢 الأسطر: 106-138
⚡ Async: لا
🔑 الوسائط:
   • { children }: ErrorProviderProps
📞 الاستدعاءات:
   • errorLogger.logComponentError(message, component || 'Unknown', error) (سطر 109)
   • errorLogger.logUserActionError(action, error, component) (سطر 113)
   • errorLogger.updateAppState(state) (سطر 117)
   • errorLogger.logComponentError(error.message, component || 'Manual Report', error, 'high') (سطر 121)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/contexts/ErrorContext.tsx
🏷️ الدالة: useErrorContext
🔢 الأسطر: 141-147
⚡ Async: لا
📞 الاستدعاءات:
   • useContext(ErrorContext) (سطر 142)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/contexts/ErrorContext.tsx
🏷️ الدالة: ErrorBoundary.getDerivedStateFromError
🔢 الأسطر: 30-32
⚡ Async: لا
🔑 الوسائط:
   • error: Error
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/contexts/ErrorContext.tsx
🏷️ الدالة: ErrorBoundary.componentDidCatch
🔢 الأسطر: 34-55
⚡ Async: لا
🔑 الوسائط:
   • error: Error
   • errorInfo: React.ErrorInfo
📞 الاستدعاءات:
   • console.error('🚨 React Error Boundary caught error:', error) (سطر 35)
   • console.error('📍 Component Stack:', errorInfo.componentStack) (سطر 36)
   • logReactError(error, errorInfo, 'ErrorBoundary') (سطر 40)
   • updateAppState({
        errorBoundary: true,
        lastError: {
          message: error.message,
          stack: error.stack,
          componentStack: errorInfo.componentStack,
          timestamp: new Date().toISOString()
        }
      }) (سطر 43)
   • new Date().toISOString() (سطر 49)
   • console.error('Failed to log error:', logError) (سطر 53)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/contexts/ErrorContext.tsx
🏷️ الدالة: ErrorBoundary.render
🔢 الأسطر: 57-102
⚡ Async: لا
📞 الاستدعاءات:
   • this.setState({ hasError: false, error: undefined }) (سطر 88)
   • window.location.reload() (سطر 89)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/contexts/NotificationContext.tsx
🏷️ الدالة: NotificationProvider
🔢 الأسطر: 16-139
⚡ Async: لا
🔑 الوسائط:
   • { children }: { children: React.ReactNode; }
📞 الاستدعاءات:
   • useState<Notification[]>([]) (سطر 17)
   • useState(0) (سطر 18)
   • useWebSocket() (سطر 19)
   • useToast() (سطر 20)
   • fetch('/api/notifications', {
        credentials: 'include'
      }) (سطر 24)
   • response.json() (سطر 29)
   • setNotifications(data) (سطر 30)
   • setUnreadCount(data.filter((n: Notification) => !n.acknowledged).length) (سطر 31)
   • data.filter((n: Notification) => !n.acknowledged) (سطر 31)
   • console.error('Failed to fetch notifications:', error) (سطر 34)
   • fetch(`/api/notifications/${id}/acknowledge`, {
        method: 'PATCH',
        credentials: 'include'
      }) (سطر 40)
   • setNotifications(prev => 
          prev.map(n => n.id === id ? { ...n, acknowledged: true } : n)
        ) (سطر 46)
   • prev.map(n => n.id === id ? { ...n, acknowledged: true } : n) (سطر 47)
   • setUnreadCount(prev => Math.max(0, prev - 1)) (سطر 49)
   • Math.max(0, prev - 1) (سطر 49)
   • console.error('Failed to mark notification as read:', error) (سطر 52)
   • fetch(`/api/notifications/${id}/resolve`, {
        method: 'PATCH',
        credentials: 'include'
      }) (سطر 58)
   • setNotifications(prev => 
          prev.map(n => n.id === id ? { ...n, resolved: true } : n)
        ) (سطر 64)
   • prev.map(n => n.id === id ? { ...n, resolved: true } : n) (سطر 65)
   • console.error('Failed to mark notification as resolved:', error) (سطر 69)
   • useEffect(() => {
    if (!lastMessage) return;

    switch (lastMessage.type) {
      case 'NOTIFICATION_CREATED':
        const newNotification = lastMessage.data as Notification;
        setNotifications(prev => [newNotification, ...prev]);
        setUnreadCount(prev => prev + 1);

        // Show toast notification
        toast({
          title: newNotification.title,
          description: newNotification.message,
          variant: newNotification.type === 'error' ? 'destructive' : 'default',
        });
        break;

      case 'APPLICATION_STATUS_CHANGED':
      case 'APPLICATION_CREATED':
      case 'APPLICATION_UPDATED':
      case 'APPLICATION_DELETED':
        // Refresh notifications when applications change
        refreshNotifications();
        break;
    }
  }, [lastMessage, toast]) (سطر 74)
   • setNotifications(prev => [newNotification, ...prev]) (سطر 80)
   • setUnreadCount(prev => prev + 1) (سطر 81)
   • toast({
          title: newNotification.title,
          description: newNotification.message,
          variant: newNotification.type === 'error' ? 'destructive' : 'default',
        }) (سطر 84)
   • refreshNotifications() (سطر 96)
   • useEffect(() => {
    refreshNotifications();
  }, []) (سطر 102)
   • refreshNotifications() (سطر 103)
   • useEffect(() => {
    try {
      // احتفظ بآخر 50 إشعار فقط لتوفير المساحة
      const notificationsToSave = notifications.slice(0, 50);
      localStorage.setItem('notifications', JSON.stringify(notificationsToSave));
    } catch (error) {
      console.warn('Failed to save notifications to localStorage:', error);

      // في حالة امتلاء localStorage، احذف البيانات القديمة
      try {
        localStorage.removeItem('notifications');
        const essentialNotifications = notifications.slice(0, 20);
        localStorage.setItem('notifications', JSON.stringify(essentialNotifications));
      } catch (fallbackError) {
        console.error('Failed to save even essential notifications:', fallbackError);
      }
    }
  }, [notifications]) (سطر 107)
   • notifications.slice(0, 50) (سطر 110)
   • localStorage.setItem('notifications', JSON.stringify(notificationsToSave)) (سطر 111)
   • JSON.stringify(notificationsToSave) (سطر 111)
   • console.warn('Failed to save notifications to localStorage:', error) (سطر 113)
   • localStorage.removeItem('notifications') (سطر 117)
   • notifications.slice(0, 20) (سطر 118)
   • localStorage.setItem('notifications', JSON.stringify(essentialNotifications)) (سطر 119)
   • JSON.stringify(essentialNotifications) (سطر 119)
   • console.error('Failed to save even essential notifications:', fallbackError) (سطر 121)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/contexts/NotificationContext.tsx
🏷️ الدالة: useNotifications
🔢 الأسطر: 141-147
⚡ Async: لا
📞 الاستدعاءات:
   • useContext(NotificationContext) (سطر 142)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/contexts/ThemeContext.tsx
🏷️ الدالة: ThemeProvider
🔢 الأسطر: 18-84
⚡ Async: لا
🔑 الوسائط:
   • { children, defaultTheme = 'light' }: ThemeProviderProps
📞 الاستدعاءات:
   • useState<Theme>(() => {
    // محاولة الحصول على الثيم من localStorage
    try {
      const stored = localStorage.getItem('theme');
      if (stored === 'light' || stored === 'dark') {
        return stored as Theme;
      }
    } catch (error) {
      console.warn('Failed to read theme from localStorage:', error);
    }
    
    // إذا لم يوجد أو فشل، استخدم الافتراضي
    return defaultTheme;
  }) (سطر 19)
   • localStorage.getItem('theme') (سطر 22)
   • console.warn('Failed to read theme from localStorage:', error) (سطر 27)
   • setThemeState(newTheme) (سطر 35)
   • localStorage.setItem('theme', newTheme) (سطر 39)
   • console.warn('Failed to save theme to localStorage:', error) (سطر 41)
   • root.classList.remove('light', 'dark') (سطر 46)
   • root.classList.add(newTheme) (سطر 47)
   • setTheme(theme === 'light' ? 'dark' : 'light') (سطر 51)
   • useEffect(() => {
    const root = document.documentElement;
    root.classList.remove('light', 'dark');
    root.classList.add(theme);
  }, [theme]) (سطر 55)
   • root.classList.remove('light', 'dark') (سطر 57)
   • root.classList.add(theme) (سطر 58)
   • useEffect(() => {
    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
    
    const handleSystemThemeChange = (e: MediaQueryListEvent) => {
      // يمكن إضافة منطق للتبديل التلقائي هنا إذا لزم الأمر
    };

    mediaQuery.addEventListener('change', handleSystemThemeChange);
    return () => mediaQuery.removeEventListener('change', handleSystemThemeChange);
  }, []) (سطر 62)
   • window.matchMedia('(prefers-color-scheme: dark)') (سطر 63)
   • mediaQuery.addEventListener('change', handleSystemThemeChange) (سطر 69)
   • mediaQuery.removeEventListener('change', handleSystemThemeChange) (سطر 70)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/contexts/ThemeContext.tsx
🏷️ الدالة: useTheme
🔢 الأسطر: 86-92
⚡ Async: لا
📞 الاستدعاءات:
   • useContext(ThemeContext) (سطر 87)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/hooks/use-mobile.tsx
🏷️ الدالة: useIsMobile
🔢 الأسطر: 5-19
⚡ Async: لا
📞 الاستدعاءات:
   • useState<boolean | undefined>(undefined) (سطر 6)
   • useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, []) (سطر 8)
   • window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`) (سطر 9)
   • setIsMobile(window.innerWidth < MOBILE_BREAKPOINT) (سطر 11)
   • mql.addEventListener("change", onChange) (سطر 13)
   • setIsMobile(window.innerWidth < MOBILE_BREAKPOINT) (سطر 14)
   • mql.removeEventListener("change", onChange) (سطر 15)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/hooks/use-toast.ts
🏷️ الدالة: genId
🔢 الأسطر: 27-30
⚡ Async: لا
📞 الاستدعاءات:
   • count.toString() (سطر 29)
🩺 التشخيص:
   ⚠️ استدعاء count.toString() بدون تحديد الترميز (قد يسبب مشاكل)

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/hooks/use-toast.ts
🏷️ الدالة: dispatch
🔢 الأسطر: 133-138
⚡ Async: لا
🔑 الوسائط:
   • action: Action
📞 الاستدعاءات:
   • reducer(memoryState, action) (سطر 134)
   • listeners.forEach((listener) => {
    listener(memoryState)
  }) (سطر 135)
   • listener(memoryState) (سطر 136)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/hooks/use-toast.ts
🏷️ الدالة: toast
🔢 الأسطر: 142-169
⚡ Async: لا
🔑 الوسائط:
   • { ...props }: Toast
📞 الاستدعاءات:
   • genId() (سطر 143)
   • dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    }) (سطر 146)
   • dispatch({ type: "DISMISS_TOAST", toastId: id }) (سطر 150)
   • dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  }) (سطر 152)
   • dismiss() (سطر 159)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/hooks/use-toast.ts
🏷️ الدالة: useToast
🔢 الأسطر: 171-189
⚡ Async: لا
📞 الاستدعاءات:
   • React.useState<State>(memoryState) (سطر 172)
   • React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state]) (سطر 174)
   • listeners.push(setState) (سطر 175)
   • listeners.indexOf(setState) (سطر 177)
   • listeners.splice(index, 1) (سطر 179)
   • dispatch({ type: "DISMISS_TOAST", toastId }) (سطر 187)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/hooks/use-toast.ts
🏷️ الدالة: addToRemoveQueue
🔢 الأسطر: 58-72
⚡ Async: لا
🔑 الوسائط:
   • toastId: string
📞 الاستدعاءات:
   • toastTimeouts.has(toastId) (سطر 59)
   • setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY) (سطر 63)
   • toastTimeouts.delete(toastId) (سطر 64)
   • dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    }) (سطر 65)
   • toastTimeouts.set(toastId, timeout) (سطر 71)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/hooks/use-toast.ts
🏷️ الدالة: reducer
🔢 الأسطر: 74-127
⚡ Async: لا
🔑 الوسائط:
   • state: State
   • action: Action
📞 الاستدعاءات:
   • [action.toast, ...state.toasts].slice(0, TOAST_LIMIT) (سطر 79)
   • state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ) (سطر 85)
   • addToRemoveQueue(toastId) (سطر 96)
   • state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        }) (سطر 98)
   • addToRemoveQueue(toast.id) (سطر 99)
   • state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ) (سطر 105)
   • state.toasts.filter((t) => t.id !== action.toastId) (سطر 124)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/hooks/useActivityTracker.ts
🏷️ الدالة: usePageView
🔢 الأسطر: 6-87
⚡ Async: لا
🔑 الوسائط:
   • pageName: string | undefined
   • metadata: Record<string, any> | undefined
📞 الاستدعاءات:
   • useActivityContext() (سطر 7)
   • useRef<number>(Date.now()) (سطر 8)
   • Date.now() (سطر 8)
   • useRef<string>(pageName || window.location.pathname) (سطر 9)
   • useEffect(() => {
    if (!isTracking || !tracker) return;

    // تسجيل بداية زيارة الصفحة
    const currentPage = pageName || window.location.pathname;
    pageNameRef.current = currentPage;
    pageStartTimeRef.current = Date.now();

    tracker.trackActivity({
      activityType: 'page_view',
      page: currentPage,
      metadata: {
        ...metadata,
        pageTitle: document.title,
        referrer: document.referrer,
        timestamp: new Date().toISOString(),
        userAgent: navigator.userAgent
      }
    });

    // دالة لتسجيل مغادرة الصفحة
    const handlePageLeave = () => {
      const duration = Date.now() - pageStartTimeRef.current;
      tracker.trackActivity({
        activityType: 'navigation',
        page: currentPage,
        metadata: {
          ...metadata,
          pageTitle: document.title,
          pageDuration: duration,
          exitTimestamp: new Date().toISOString(),
          exitReason: 'page_change'
        }
      });
    };

    // مراقبة تغيير الصفحة
    const handlePopState = () => {
      handlePageLeave();
    };

    const handleBeforeUnload = () => {
      handlePageLeave();
    };

    window.addEventListener('popstate', handlePopState);
    window.addEventListener('beforeunload', handleBeforeUnload);

    // تنظيف عند إلغاء التحميل
    return () => {
      handlePageLeave();
      window.removeEventListener('popstate', handlePopState);
      window.removeEventListener('beforeunload', handleBeforeUnload);
    };
  }, [pageName, metadata, isTracking, tracker]) (سطر 11)
   • Date.now() (سطر 17)
   • tracker.trackActivity({
      activityType: 'page_view',
      page: currentPage,
      metadata: {
        ...metadata,
        pageTitle: document.title,
        referrer: document.referrer,
        timestamp: new Date().toISOString(),
        userAgent: navigator.userAgent
      }
    }) (سطر 19)
   • new Date().toISOString() (سطر 26)
   • Date.now() (سطر 33)
   • tracker.trackActivity({
        activityType: 'navigation',
        page: currentPage,
        metadata: {
          ...metadata,
          pageTitle: document.title,
          pageDuration: duration,
          exitTimestamp: new Date().toISOString(),
          exitReason: 'page_change'
        }
      }) (سطر 34)
   • new Date().toISOString() (سطر 41)
   • handlePageLeave() (سطر 49)
   • handlePageLeave() (سطر 53)
   • window.addEventListener('popstate', handlePopState) (سطر 56)
   • window.addEventListener('beforeunload', handleBeforeUnload) (سطر 57)
   • handlePageLeave() (سطر 61)
   • window.removeEventListener('popstate', handlePopState) (سطر 62)
   • window.removeEventListener('beforeunload', handleBeforeUnload) (سطر 63)
   • useCallback((eventType: string, eventData?: Record<string, any>) => {
      if (isTracking && tracker) {
        tracker.trackActivity({
          activityType: 'click',
          page: pageNameRef.current,
          targetElement: eventType,
          metadata: {
            pageEvent: eventType,
            pageDuration: Date.now() - pageStartTimeRef.current,
            ...eventData
          }
        });
      }
    }, [isTracking, tracker]) (سطر 68)
   • tracker.trackActivity({
          activityType: 'click',
          page: pageNameRef.current,
          targetElement: eventType,
          metadata: {
            pageEvent: eventType,
            pageDuration: Date.now() - pageStartTimeRef.current,
            ...eventData
          }
        }) (سطر 70)
   • Date.now() (سطر 76)
   • useCallback(() => {
      return Date.now() - pageStartTimeRef.current;
    }, []) (سطر 83)
   • Date.now() (سطر 84)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/hooks/useActivityTracker.ts
🏷️ الدالة: useButtonClick
🔢 الأسطر: 90-224
⚡ Async: لا
🔑 الوسائط:
   • buttonId: string | undefined
   • options: { trackHover?: boolean | undefined; trackFocus?: boolean | undefined; includeCoordinates?: boolean | undefined; metadata?: Record<string, any> | undefined; } | undefined
📞 الاستدعاءات:
   • useActivityContext() (سطر 96)
   • useState(false) (سطر 97)
   • useState(false) (سطر 98)
   • useRef<number>(0) (سطر 99)
   • useRef<number>(0) (سطر 100)
   • useCallback((event: React.MouseEvent<HTMLElement>, customMetadata?: Record<string, any>) => {
    if (!isTracking || !tracker) return;

    const target = event.currentTarget;
    const elementId = buttonId || target.id || target.className || 'unknown-button';

    const coordinates = options?.includeCoordinates ? {
      x: event.clientX,
      y: event.clientY,
      pageX: event.pageX,
      pageY: event.pageY
    } : undefined;

    tracker.trackActivity({
      activityType: 'click',
      page: window.location.pathname,
      targetElement: elementId,
      targetText: target.textContent?.trim() || '',
      targetType: target.tagName.toLowerCase(),
      interactionMode: 'mouse',
      coordinates,
      metadata: {
        buttonId: elementId,
        buttonText: target.textContent?.trim(),
        buttonType: target.getAttribute('type'),
        wasHovered: isHovered,
        wasFocused: isFocused,
        hoverDuration: isHovered ? Date.now() - hoverStartTime.current : 0,
        focusDuration: isFocused ? Date.now() - focusStartTime.current : 0,
        ...options?.metadata,
        ...customMetadata
      }
    });
  }, [isTracking, tracker, buttonId, options, isHovered, isFocused]) (سطر 102)
   • tracker.trackActivity({
      activityType: 'click',
      page: window.location.pathname,
      targetElement: elementId,
      targetText: target.textContent?.trim() || '',
      targetType: target.tagName.toLowerCase(),
      interactionMode: 'mouse',
      coordinates,
      metadata: {
        buttonId: elementId,
        buttonText: target.textContent?.trim(),
        buttonType: target.getAttribute('type'),
        wasHovered: isHovered,
        wasFocused: isFocused,
        hoverDuration: isHovered ? Date.now() - hoverStartTime.current : 0,
        focusDuration: isFocused ? Date.now() - focusStartTime.current : 0,
        ...options?.metadata,
        ...customMetadata
      }
    }) (سطر 115)
   • target.textContent?.trim() (سطر 119)
   • target.tagName.toLowerCase() (سطر 120)
   • target.textContent?.trim() (سطر 125)
   • target.getAttribute('type') (سطر 126)
   • Date.now() (سطر 129)
   • Date.now() (سطر 130)
   • useCallback((isEntering: boolean, event: React.MouseEvent<HTMLElement>) => {
    if (!isTracking || !tracker || !options?.trackHover) return;

    const target = event.currentTarget;
    const elementId = buttonId || target.id || target.className || 'unknown-button';

    if (isEntering) {
      setIsHovered(true);
      hoverStartTime.current = Date.now();
    } else {
      setIsHovered(false);
      const hoverDuration = Date.now() - hoverStartTime.current;

      tracker.trackActivity({
        activityType: 'hover',
        page: window.location.pathname,
        targetElement: elementId,
        targetType: target.tagName.toLowerCase(),
        interactionMode: 'mouse',
        metadata: {
          buttonId: elementId,
          hoverDuration,
          hoverType: 'exit',
          ...options?.metadata
        }
      });
    }
  }, [isTracking, tracker, buttonId, options]) (سطر 137)
   • setIsHovered(true) (سطر 144)
   • Date.now() (سطر 145)
   • setIsHovered(false) (سطر 147)
   • Date.now() (سطر 148)
   • tracker.trackActivity({
        activityType: 'hover',
        page: window.location.pathname,
        targetElement: elementId,
        targetType: target.tagName.toLowerCase(),
        interactionMode: 'mouse',
        metadata: {
          buttonId: elementId,
          hoverDuration,
          hoverType: 'exit',
          ...options?.metadata
        }
      }) (سطر 150)
   • target.tagName.toLowerCase() (سطر 154)
   • useCallback((isFocusing: boolean, event: React.FocusEvent<HTMLElement>) => {
    if (!isTracking || !tracker || !options?.trackFocus) return;

    const target = event.currentTarget;
    const elementId = buttonId || target.id || target.className || 'unknown-button';

    if (isFocusing) {
      setIsFocused(true);
      focusStartTime.current = Date.now();

      tracker.trackActivity({
        activityType: 'focus',
        page: window.location.pathname,
        targetElement: elementId,
        targetType: target.tagName.toLowerCase(),
        interactionMode: 'keyboard',
        metadata: {
          buttonId: elementId,
          focusType: 'enter',
          ...options?.metadata
        }
      });
    } else {
      setIsFocused(false);
      const focusDuration = Date.now() - focusStartTime.current;

      tracker.trackActivity({
        activityType: 'blur',
        page: window.location.pathname,
        targetElement: elementId,
        targetType: target.tagName.toLowerCase(),
        interactionMode: 'keyboard',
        metadata: {
          buttonId: elementId,
          focusDuration,
          focusType: 'exit',
          ...options?.metadata
        }
      });
    }
  }, [isTracking, tracker, buttonId, options]) (سطر 166)
   • setIsFocused(true) (سطر 173)
   • Date.now() (سطر 174)
   • tracker.trackActivity({
        activityType: 'focus',
        page: window.location.pathname,
        targetElement: elementId,
        targetType: target.tagName.toLowerCase(),
        interactionMode: 'keyboard',
        metadata: {
          buttonId: elementId,
          focusType: 'enter',
          ...options?.metadata
        }
      }) (سطر 176)
   • target.tagName.toLowerCase() (سطر 180)
   • setIsFocused(false) (سطر 189)
   • Date.now() (سطر 190)
   • tracker.trackActivity({
        activityType: 'blur',
        page: window.location.pathname,
        targetElement: elementId,
        targetType: target.tagName.toLowerCase(),
        interactionMode: 'keyboard',
        metadata: {
          buttonId: elementId,
          focusDuration,
          focusType: 'exit',
          ...options?.metadata
        }
      }) (سطر 192)
   • target.tagName.toLowerCase() (سطر 196)
   • useCallback((customMetadata?: Record<string, any>) => ({
      onClick: (event: React.MouseEvent<HTMLElement>) => trackClick(event, customMetadata),
      onMouseEnter: options?.trackHover ? (event: React.MouseEvent<HTMLElement>) => trackHover(true, event) : undefined,
      onMouseLeave: options?.trackHover ? (event: React.MouseEvent<HTMLElement>) => trackHover(false, event) : undefined,
      onFocus: options?.trackFocus ? (event: React.FocusEvent<HTMLElement>) => trackFocus(true, event) : undefined,
      onBlur: options?.trackFocus ? (event: React.FocusEvent<HTMLElement>) => trackFocus(false, event) : undefined,
    }), [trackClick, trackHover, trackFocus, options]) (سطر 216)
   • trackClick(event, customMetadata) (سطر 217)
   • trackHover(true, event) (سطر 218)
   • trackHover(false, event) (سطر 219)
   • trackFocus(true, event) (سطر 220)
   • trackFocus(false, event) (سطر 221)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/hooks/useActivityTracker.ts
🏷️ الدالة: useFormTracking
🔢 الأسطر: 227-419
⚡ Async: لا
🔑 الوسائط:
   • formId: string | undefined
   • options: { trackIndividualFields?: boolean | undefined; trackValidation?: boolean | undefined; excludeFields?: string[] | undefined; sensitiveFields?: string[] | undefined; onSubmitTracking?: boolean | undefined; metadata?: Record<string, any> | undefined; } | undefined
📞 الاستدعاءات:
   • useActivityContext() (سطر 235)
   • useState<Record<string, any>>({}) (سطر 236)
   • useState<Record<string, number>>({}) (سطر 237)
   • useState<Record<string, string>>({}) (سطر 238)
   • useRef<number>(Date.now()) (سطر 239)
   • Date.now() (سطر 239)
   • useCallback((fieldName: string, value: any, event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    if (!isTracking || !tracker || !options?.trackIndividualFields) return;

    const target = event.target;
    const isExcluded = options?.excludeFields?.includes(fieldName);
    const isSensitive = options?.sensitiveFields?.includes(fieldName) || 
                       ['password', 'creditCard', 'ssn'].includes(fieldName.toLowerCase());

    if (isExcluded) return;

    const processedValue = isSensitive ? '[REDACTED]' : value;

    // تحديث الحالة المحلية
    setFormData(prev => ({ ...prev, [fieldName]: processedValue }));
    setFieldInteractions(prev => ({ ...prev, [fieldName]: (prev[fieldName] || 0) + 1 }));

    tracker.trackActivity({
      activityType: 'form_input',
      page: window.location.pathname,
      targetElement: fieldName,
      targetType: target.tagName.toLowerCase(),
      interactionMode: 'keyboard',
      value: processedValue,
      metadata: {
        formId: formId || 'unknown-form',
        fieldName,
        fieldType: target.type || 'unknown',
        fieldRequired: target.hasAttribute('required'),
        valueLength: isSensitive ? 0 : String(value).length,
        interactionCount: fieldInteractions[fieldName] || 1,
        formDuration: Date.now() - formStartTime.current,
        ...options?.metadata
      }
    });
  }, [isTracking, tracker, formId, options, fieldInteractions]) (سطر 241)
   • options?.excludeFields?.includes(fieldName) (سطر 245)
   • options?.sensitiveFields?.includes(fieldName) (سطر 246)
   • ['password', 'creditCard', 'ssn'].includes(fieldName.toLowerCase()) (سطر 247)
   • fieldName.toLowerCase() (سطر 247)
   • setFormData(prev => ({ ...prev, [fieldName]: processedValue })) (سطر 254)
   • setFieldInteractions(prev => ({ ...prev, [fieldName]: (prev[fieldName] || 0) + 1 })) (سطر 255)
   • tracker.trackActivity({
      activityType: 'form_input',
      page: window.location.pathname,
      targetElement: fieldName,
      targetType: target.tagName.toLowerCase(),
      interactionMode: 'keyboard',
      value: processedValue,
      metadata: {
        formId: formId || 'unknown-form',
        fieldName,
        fieldType: target.type || 'unknown',
        fieldRequired: target.hasAttribute('required'),
        valueLength: isSensitive ? 0 : String(value).length,
        interactionCount: fieldInteractions[fieldName] || 1,
        formDuration: Date.now() - formStartTime.current,
        ...options?.metadata
      }
    }) (سطر 257)
   • target.tagName.toLowerCase() (سطر 261)
   • target.hasAttribute('required') (سطر 268)
   • String(value) (سطر 269)
   • Date.now() (سطر 271)
   • useCallback((fieldName: string, event: React.FocusEvent<HTMLElement>) => {
    if (!isTracking || !tracker) return;

    const target = event.target;

    tracker.trackActivity({
      activityType: 'focus',
      page: window.location.pathname,
      targetElement: fieldName,
      targetType: target.tagName.toLowerCase(),
      interactionMode: 'keyboard',
      metadata: {
        formId: formId || 'unknown-form',
        fieldName,
        fieldType: (target as HTMLInputElement).type || 'unknown',
        formDuration: Date.now() - formStartTime.current,
        ...options?.metadata
      }
    });
  }, [isTracking, tracker, formId, options]) (سطر 277)
   • tracker.trackActivity({
      activityType: 'focus',
      page: window.location.pathname,
      targetElement: fieldName,
      targetType: target.tagName.toLowerCase(),
      interactionMode: 'keyboard',
      metadata: {
        formId: formId || 'unknown-form',
        fieldName,
        fieldType: (target as HTMLInputElement).type || 'unknown',
        formDuration: Date.now() - formStartTime.current,
        ...options?.metadata
      }
    }) (سطر 282)
   • target.tagName.toLowerCase() (سطر 286)
   • Date.now() (سطر 292)
   • useCallback((fieldName: string, event: React.FocusEvent<HTMLElement>) => {
    if (!isTracking || !tracker) return;

    const target = event.target;

    tracker.trackActivity({
      activityType: 'blur',
      page: window.location.pathname,
      targetElement: fieldName,
      targetType: target.tagName.toLowerCase(),
      interactionMode: 'keyboard',
      metadata: {
        formId: formId || 'unknown-form',
        fieldName,
        fieldType: (target as HTMLInputElement).type || 'unknown',
        formDuration: Date.now() - formStartTime.current,
        ...options?.metadata
      }
    });
  }, [isTracking, tracker, formId, options]) (سطر 298)
   • tracker.trackActivity({
      activityType: 'blur',
      page: window.location.pathname,
      targetElement: fieldName,
      targetType: target.tagName.toLowerCase(),
      interactionMode: 'keyboard',
      metadata: {
        formId: formId || 'unknown-form',
        fieldName,
        fieldType: (target as HTMLInputElement).type || 'unknown',
        formDuration: Date.now() - formStartTime.current,
        ...options?.metadata
      }
    }) (سطر 303)
   • target.tagName.toLowerCase() (سطر 307)
   • Date.now() (سطر 313)
   • useCallback((event: React.FormEvent<HTMLFormElement>, isValid: boolean = true, errors?: Record<string, string>) => {
    if (!isTracking || !tracker) return;

    const target = event.currentTarget;
    const formDataForTracking = new FormData(target);
    const fields: Array<{name: string, type: string, hasValue: boolean, isRequired: boolean}> = [];

    // جمع معلومات الحقول
    for (const [key, value] of formDataForTracking.entries()) {
      const field = target.querySelector(`[name="${key}"]`) as HTMLInputElement;
      if (field) {
        fields.push({
          name: key,
          type: field.type || 'unknown',
          hasValue: value !== null && value !== '',
          isRequired: field.hasAttribute('required')
        });
      }
    }

    const formDuration = Date.now() - formStartTime.current;

    tracker.trackActivity({
      activityType: 'form_submit',
      page: window.location.pathname,
      targetElement: formId || target.id || 'unknown-form',
      targetType: 'form',
      interactionMode: 'mouse',
      metadata: {
        formId: formId || target.id || 'unknown-form',
        formAction: target.action,
        formMethod: target.method,
        isValid,
        fieldCount: fields.length,
        fields,
        errors: errors || validationErrors,
        formDuration,
        totalInteractions: Object.values(fieldInteractions).reduce((sum, count) => sum + count, 0),
        ...options?.metadata
      }
    });

    // إعادة تعيين الحالة بعد الإرسال
    if (isValid) {
      setFormData({});
      setFieldInteractions({});
      setValidationErrors({});
      formStartTime.current = Date.now();
    }
  }, [isTracking, tracker, formId, validationErrors, fieldInteractions, options]) (سطر 319)
   • formDataForTracking.entries() (سطر 327)
   • target.querySelector(`[name="${key}"]`) (سطر 328)
   • fields.push({
          name: key,
          type: field.type || 'unknown',
          hasValue: value !== null && value !== '',
          isRequired: field.hasAttribute('required')
        }) (سطر 330)
   • field.hasAttribute('required') (سطر 334)
   • Date.now() (سطر 339)
   • tracker.trackActivity({
      activityType: 'form_submit',
      page: window.location.pathname,
      targetElement: formId || target.id || 'unknown-form',
      targetType: 'form',
      interactionMode: 'mouse',
      metadata: {
        formId: formId || target.id || 'unknown-form',
        formAction: target.action,
        formMethod: target.method,
        isValid,
        fieldCount: fields.length,
        fields,
        errors: errors || validationErrors,
        formDuration,
        totalInteractions: Object.values(fieldInteractions).reduce((sum, count) => sum + count, 0),
        ...options?.metadata
      }
    }) (سطر 341)
   • Object.values(fieldInteractions).reduce((sum, count) => sum + count, 0) (سطر 356)
   • Object.values(fieldInteractions) (سطر 356)
   • setFormData({}) (سطر 363)
   • setFieldInteractions({}) (سطر 364)
   • setValidationErrors({}) (سطر 365)
   • Date.now() (سطر 366)
   • useCallback((fieldName: string, errorMessage: string) => {
    if (!isTracking || !tracker || !options?.trackValidation) return;

    setValidationErrors(prev => ({ ...prev, [fieldName]: errorMessage }));

    tracker.trackActivity({
      activityType: 'form_input',
      page: window.location.pathname,
      targetElement: fieldName,
      targetType: 'validation_error',
      interactionMode: 'other',
      value: errorMessage,
      metadata: {
        formId: formId || 'unknown-form',
        fieldName,
        errorType: 'validation',
        errorMessage,
        formDuration: Date.now() - formStartTime.current,
        ...options?.metadata
      }
    });
  }, [isTracking, tracker, formId, options]) (سطر 370)
   • setValidationErrors(prev => ({ ...prev, [fieldName]: errorMessage })) (سطر 373)
   • tracker.trackActivity({
      activityType: 'form_input',
      page: window.location.pathname,
      targetElement: fieldName,
      targetType: 'validation_error',
      interactionMode: 'other',
      value: errorMessage,
      metadata: {
        formId: formId || 'unknown-form',
        fieldName,
        errorType: 'validation',
        errorMessage,
        formDuration: Date.now() - formStartTime.current,
        ...options?.metadata
      }
    }) (سطر 375)
   • Date.now() (سطر 387)
   • useCallback((fieldName: string) => ({
      onChange: (event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => 
        trackFieldChange(fieldName, event.target.value, event),
      onFocus: (event: React.FocusEvent<HTMLElement>) => trackFieldFocus(fieldName, event),
      onBlur: (event: React.FocusEvent<HTMLElement>) => trackFieldBlur(fieldName, event),
    }), [trackFieldChange, trackFieldFocus, trackFieldBlur]) (سطر 404)
   • trackFieldChange(fieldName, event.target.value, event) (سطر 406)
   • trackFieldFocus(fieldName, event) (سطر 407)
   • trackFieldBlur(fieldName, event) (سطر 408)
   • useCallback((isValid?: boolean, errors?: Record<string, string>) => ({
      onSubmit: (event: React.FormEvent<HTMLFormElement>) => {
        if (options?.onSubmitTracking !== false) {
          trackFormSubmit(event, isValid, errors);
        }
      }
    }), [trackFormSubmit, options]) (سطر 411)
   • trackFormSubmit(event, isValid, errors) (سطر 414)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/hooks/useActivityTracker.ts
🏷️ الدالة: useUserAction
🔢 الأسطر: 422-517
⚡ Async: لا
🔑 الوسائط:
   • actionContext: string | undefined
📞 الاستدعاءات:
   • useCustomTracking() (سطر 423)
   • useState<Array<{action: string, timestamp: number, metadata?: Record<string, any>}>>([]) (سطر 424)
   • useCallback((action: string, metadata?: Record<string, any>) => {
    if (!isActive) return;

    const actionData = {
      action,
      timestamp: Date.now(),
      metadata: {
        context: actionContext,
        ...metadata
      }
    };

    // تتبع الفعل
    trackAction(action, actionData.metadata);

    // إضافة للتاريخ المحلي
    setActionHistory(prev => [...prev, actionData].slice(-50)); // الاحتفاظ بآخر 50 فعل

  }, [isActive, trackAction, actionContext]) (سطر 426)
   • Date.now() (سطر 431)
   • trackAction(action, actionData.metadata) (سطر 439)
   • setActionHistory(prev => [...prev, actionData].slice(-50)) (سطر 442)
   • [...prev, actionData].slice(-50) (سطر 442)
   • useCallback((buttonText: string, buttonId?: string, metadata?: Record<string, any>) => {
    trackUserAction('button_click', {
      buttonText,
      buttonId,
      actionType: 'button_interaction',
      ...metadata
    });
  }, [trackUserAction]) (سطر 446)
   • trackUserAction('button_click', {
      buttonText,
      buttonId,
      actionType: 'button_interaction',
      ...metadata
    }) (سطر 447)
   • useCallback((linkText: string, linkUrl: string, metadata?: Record<string, any>) => {
    trackUserAction('link_click', {
      linkText,
      linkUrl,
      actionType: 'navigation',
      ...metadata
    });
  }, [trackUserAction]) (سطر 455)
   • trackUserAction('link_click', {
      linkText,
      linkUrl,
      actionType: 'navigation',
      ...metadata
    }) (سطر 456)
   • useCallback((menuItem: string, menuPath?: string[], metadata?: Record<string, any>) => {
    trackUserAction('menu_interaction', {
      menuItem,
      menuPath,
      actionType: 'menu_navigation',
      ...metadata
    });
  }, [trackUserAction]) (سطر 464)
   • trackUserAction('menu_interaction', {
      menuItem,
      menuPath,
      actionType: 'menu_navigation',
      ...metadata
    }) (سطر 465)
   • useCallback((modalId: string, action: 'open' | 'close' | 'interact', metadata?: Record<string, any>) => {
    trackUserAction('modal_interaction', {
      modalId,
      modalAction: action,
      actionType: 'modal',
      ...metadata
    });
  }, [trackUserAction]) (سطر 473)
   • trackUserAction('modal_interaction', {
      modalId,
      modalAction: action,
      actionType: 'modal',
      ...metadata
    }) (سطر 474)
   • useCallback((tabId: string, tabLabel: string, metadata?: Record<string, any>) => {
    trackUserAction('tab_change', {
      tabId,
      tabLabel,
      actionType: 'tab_navigation',
      ...metadata
    });
  }, [trackUserAction]) (سطر 482)
   • trackUserAction('tab_change', {
      tabId,
      tabLabel,
      actionType: 'tab_navigation',
      ...metadata
    }) (سطر 483)
   • useCallback((action?: string) => {
      if (action) {
        return actionHistory.filter(a => a.action === action).length;
      }
      return actionHistory.length;
    }, [actionHistory]) (سطر 502)
   • actionHistory.filter(a => a.action === action) (سطر 504)
   • useCallback((count: number = 10) => {
      return actionHistory.slice(-count);
    }, [actionHistory]) (سطر 509)
   • actionHistory.slice(-count) (سطر 510)
   • useCallback(() => {
      setActionHistory([]);
    }, []) (سطر 513)
   • setActionHistory([]) (سطر 514)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/hooks/useActivityTracker.ts
🏷️ الدالة: useElementInteraction
🔢 الأسطر: 520-618
⚡ Async: لا
🔑 الوسائط:
   • elementId: string
   • options: { trackClicks?: boolean | undefined; trackHovers?: boolean | undefined; trackFocus?: boolean | undefined; trackVisibility?: boolean | undefined; metadata?: Record<string, any> | undefined; } | undefined
📞 الاستدعاءات:
   • useActivityContext() (سطر 527)
   • useState(false) (سطر 528)
   • useState(false) (سطر 529)
   • useRef(0) (سطر 530)
   • useCallback((interactionType: string, event?: any, customMetadata?: Record<string, any>) => {
    if (!isTracking || !tracker) return;

    interactionCount.current += 1;
    setIsInteracted(true);

    tracker.trackActivity({
      activityType: 'click',
      page: window.location.pathname,
      targetElement: elementId,
      interactionMode: 'mouse',
      metadata: {
        elementId,
        interactionType,
        interactionCount: interactionCount.current,
        isFirstInteraction: interactionCount.current === 1,
        ...options?.metadata,
        ...customMetadata
      }
    });
  }, [isTracking, tracker, elementId, options]) (سطر 532)
   • setIsInteracted(true) (سطر 536)
   • tracker.trackActivity({
      activityType: 'click',
      page: window.location.pathname,
      targetElement: elementId,
      interactionMode: 'mouse',
      metadata: {
        elementId,
        interactionType,
        interactionCount: interactionCount.current,
        isFirstInteraction: interactionCount.current === 1,
        ...options?.metadata,
        ...customMetadata
      }
    }) (سطر 538)
   • useEffect(() => {
    if (!options?.trackVisibility) return;

    const observer = new IntersectionObserver(
      ([entry]) => {
        const isNowVisible = entry.isIntersecting;
        setIsVisible(isNowVisible);

        if (isTracking && tracker) {
          tracker.trackActivity({
            activityType: 'hover',
            page: window.location.pathname,
            targetElement: elementId,
            interactionMode: 'other',
            metadata: {
              elementId,
              visibilityChange: isNowVisible ? 'visible' : 'hidden',
              intersectionRatio: entry.intersectionRatio,
              ...options?.metadata
            }
          });
        }
      },
      { threshold: [0, 0.5, 1] }
    );

    const element = document.getElementById(elementId);
    if (element) {
      observer.observe(element);
    }

    return () => {
      if (element) {
        observer.unobserve(element);
      }
    };
  }, [elementId, isTracking, tracker, options]) (سطر 555)
   • setIsVisible(isNowVisible) (سطر 561)
   • tracker.trackActivity({
            activityType: 'hover',
            page: window.location.pathname,
            targetElement: elementId,
            interactionMode: 'other',
            metadata: {
              elementId,
              visibilityChange: isNowVisible ? 'visible' : 'hidden',
              intersectionRatio: entry.intersectionRatio,
              ...options?.metadata
            }
          }) (سطر 564)
   • document.getElementById(elementId) (سطر 581)
   • observer.observe(element) (سطر 583)
   • observer.unobserve(element) (سطر 588)
   • useCallback((event: React.MouseEvent, metadata?: Record<string, any>) => {
      if (options?.trackClicks !== false) {
        trackInteraction('click', event, metadata);
      }
    }, [trackInteraction, options]) (سطر 600)
   • trackInteraction('click', event, metadata) (سطر 602)
   • useCallback((isEntering: boolean, event: React.MouseEvent, metadata?: Record<string, any>) => {
      if (options?.trackHovers !== false) {
        trackInteraction(isEntering ? 'hover_enter' : 'hover_exit', event, metadata);
      }
    }, [trackInteraction, options]) (سطر 606)
   • trackInteraction(isEntering ? 'hover_enter' : 'hover_exit', event, metadata) (سطر 608)
   • useCallback((isFocusing: boolean, event: React.FocusEvent, metadata?: Record<string, any>) => {
      if (options?.trackFocus !== false) {
        trackInteraction(isFocusing ? 'focus' : 'blur', event, metadata);
      }
    }, [trackInteraction, options]) (سطر 612)
   • trackInteraction(isFocusing ? 'focus' : 'blur', event, metadata) (سطر 614)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/hooks/useActivityTracker.ts
🏷️ الدالة: useSessionTracking
🔢 الأسطر: 621-669
⚡ Async: لا
📞 الاستدعاءات:
   • useActivityContext() (سطر 622)
   • useState({
    duration: 0,
    activitiesCount: 0,
    pagesVisited: new Set<string>(),
    lastActivity: Date.now()
  }) (سطر 623)
   • Date.now() (سطر 627)
   • useEffect(() => {
    const interval = setInterval(() => {
      if (session) {
        setSessionStats(prev => ({
          ...prev,
          duration: Date.now() - session.startTime,
          lastActivity: Date.now()
        }));
      }
    }, 1000);

    return () => clearInterval(interval);
  }, [session]) (سطر 631)
   • setInterval(() => {
      if (session) {
        setSessionStats(prev => ({
          ...prev,
          duration: Date.now() - session.startTime,
          lastActivity: Date.now()
        }));
      }
    }, 1000) (سطر 632)
   • setSessionStats(prev => ({
          ...prev,
          duration: Date.now() - session.startTime,
          lastActivity: Date.now()
        })) (سطر 634)
   • Date.now() (سطر 636)
   • Date.now() (سطر 637)
   • clearInterval(interval) (سطر 642)
   • useCallback(async () => {
    await flushActivities();
    const data = exportSessionData();
    return data;
  }, [flushActivities, exportSessionData]) (سطر 645)
   • flushActivities() (سطر 646)
   • exportSessionData() (سطر 647)
   • useCallback(() => {
      return Math.floor(sessionStats.duration / (1000 * 60));
    }, [sessionStats.duration]) (سطر 659)
   • Math.floor(sessionStats.duration / (1000 * 60)) (سطر 660)
   • useCallback(() => {
      const minutes = Math.floor(sessionStats.duration / (1000 * 60));
      const seconds = Math.floor((sessionStats.duration % (1000 * 60)) / 1000);
      return `${minutes}:${seconds.toString().padStart(2, '0')}`;
    }, [sessionStats.duration]) (سطر 663)
   • Math.floor(sessionStats.duration / (1000 * 60)) (سطر 664)
   • Math.floor((sessionStats.duration % (1000 * 60)) / 1000) (سطر 665)
   • seconds.toString().padStart(2, '0') (سطر 666)
   • seconds.toString() (سطر 666)
🩺 التشخيص:
   ⚠️ استدعاء seconds.toString().padStart(2, '0') بدون تحديد الترميز (قد يسبب مشاكل)
   ⚠️ استدعاء seconds.toString() بدون تحديد الترميز (قد يسبب مشاكل)

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/hooks/useAuth.ts
🏷️ الدالة: useAuth
🔢 الأسطر: 24-154
⚡ Async: لا
📞 الاستدعاءات:
   • useState(true) (سطر 25)
   • useLocation() (سطر 26)
   • useQueryClient() (سطر 27)
   • useQuery({
    queryKey: ["/api/user"],
    queryFn: async (): Promise<User | null> => {
      try {
        const response = await fetch("/api/user", {
          method: "GET",
          credentials: "include",
          headers: {
            "Content-Type": "application/json",
          },
        });

        if (response.status === 401) {
          // غير مصادق عليه
          return null;
        }

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const userData = await response.json();
        console.log('Auth check result:', userData);
        return userData;
      } catch (error) {
        console.error('Auth error:', error);
        return null;
      }
    },
    retry: (failureCount, error) => {
      // عدم إعادة المحاولة في حالة 401 (غير مصادق عليه)
      if (error && error.message.includes('401')) {
        return false;
      }
      return failureCount < 2;
    },
    staleTime: 2 * 60 * 1000, // دقيقتان
    refetchOnWindowFocus: false,
  }) (سطر 30)
   • fetch("/api/user", {
          method: "GET",
          credentials: "include",
          headers: {
            "Content-Type": "application/json",
          },
        }) (سطر 34)
   • response.json() (سطر 51)
   • console.log('Auth check result:', userData) (سطر 52)
   • console.error('Auth error:', error) (سطر 55)
   • error.message.includes('401') (سطر 61)
   • useEffect(() => {
    setIsLoading(isAuthLoading);
  }, [isAuthLoading]) (سطر 73)
   • setIsLoading(isAuthLoading) (سطر 74)
   • useEffect(() => {
    if (!isLoading && user && isAuthenticated) {
      const currentPath = window.location.pathname;
      console.log('Authenticated user detected, current path:', currentPath);

      // إعادة التوجيه للـ dashboard إذا كان المستخدم في صفحة landing أو auth
      if (currentPath === '/' || currentPath === '/login' || currentPath === '/auth') {
        console.log('Redirecting to dashboard...');
        navigate('/dashboard');
      }
    } else if (!isLoading && !user && !isAuthenticated) {
      const currentPath = window.location.pathname;
      // إعادة التوجيه لصفحة تسجيل الدخول إذا كان المستخدم غير مصادق عليه وفي صفحة محمية
      if (currentPath !== '/' && currentPath !== '/login' && currentPath !== '/auth') {
        console.log('Unauthenticated user detected, redirecting to login...');
        navigate('/');
      }
    }
  }, [isAuthenticated, user, isLoading, navigate]) (سطر 78)
   • console.log('Authenticated user detected, current path:', currentPath) (سطر 81)
   • console.log('Redirecting to dashboard...') (سطر 85)
   • navigate('/dashboard') (سطر 86)
   • console.log('Unauthenticated user detected, redirecting to login...') (سطر 92)
   • navigate('/') (سطر 93)
   • fetch("/api/logout", {
        method: "POST",
        credentials: "include",
      }) (سطر 100)
   • queryClient.setQueryData(["/api/user"], null) (سطر 104)
   • navigate('/') (سطر 105)
   • console.error('Logout error:', error) (سطر 107)
   • queryClient.setQueryData(["/api/user"], null) (سطر 109)
   • navigate('/') (سطر 110)
   • requiredRoles.some(role => hasRole(role)) (سطر 121)
   • hasRole(role) (سطر 121)
   • hasRole('moderator') (سطر 129)
   • hasRole('user') (سطر 133)
   • hasRole('viewer') (سطر 137)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/hooks/useErrorLogger.ts
🏷️ الدالة: useErrorLogger
🔢 الأسطر: 6-138
⚡ Async: لا
🔑 الوسائط:
   • componentName: string | undefined
📞 الاستدعاءات:
   • useErrorContext() (سطر 7)
   • useRef(componentName || 'UnknownComponent') (سطر 8)
   • useEffect(() => {
    if (componentName) {
      componentRef.current = componentName;
    }
  }, [componentName]) (سطر 11)
   • useCallback((message: string, error?: Error, severity: ErrorSeverity = 'medium') => {
    errorContext.logError(`[${componentRef.current}] ${message}`, error, componentRef.current);
  }, [errorContext]) (سطر 18)
   • errorContext.logError(`[${componentRef.current}] ${message}`, error, componentRef.current) (سطر 19)
   • useCallback((action: string, error: Error, severity: ErrorSeverity = 'medium') => {
    errorContext.logUserAction(`${action} in ${componentRef.current}`, error, componentRef.current);
  }, [errorContext]) (سطر 23)
   • errorContext.logUserAction(`${action} in ${componentRef.current}`, error, componentRef.current) (سطر 24)
   • useCallback((action: string, data?: Record<string, any>) => {
    errorLogger.updateAppState({
      lastUserAction: {
        action,
        component: componentRef.current,
        timestamp: new Date().toISOString(),
        data
      }
    });
  }, []) (سطر 28)
   • errorLogger.updateAppState({
      lastUserAction: {
        action,
        component: componentRef.current,
        timestamp: new Date().toISOString(),
        data
      }
    }) (سطر 29)
   • new Date().toISOString() (سطر 33)
   • useCallback(async <T>(
    fn: () => T | Promise<T>,
    errorMessage?: string,
    onError?: (error: Error) => void
  ): Promise<T | null> => {
    try {
      const result = await fn();
      return result;
    } catch (error) {
      const errorObj = error instanceof Error ? error : new Error(String(error));
      logError(errorMessage || 'Execution failed', errorObj);
      
      if (onError) {
        try {
          onError(errorObj);
        } catch (handlerError) {
          logError('Error handler failed', handlerError instanceof Error ? handlerError : new Error(String(handlerError)));
        }
      }
      
      return null;
    }
  }, [logError]) (سطر 40)
   • fn() (سطر 46)
   • String(error) (سطر 49)
   • logError(errorMessage || 'Execution failed', errorObj) (سطر 50)
   • onError(errorObj) (سطر 54)
   • logError('Error handler failed', handlerError instanceof Error ? handlerError : new Error(String(handlerError))) (سطر 56)
   • String(handlerError) (سطر 56)
   • useCallback(<T extends (...args: any[]) => any>(
    handler: T,
    eventName?: string
  ): T => {
    return ((...args: any[]) => {
      return safeExecute(
        () => handler(...args),
        `Event handler failed: ${eventName || 'unknown event'}`,
        (error) => {
          logUserAction(eventName || 'unknown_event', error);
        }
      );
    }) as T;
  }, [safeExecute, logUserAction]) (سطر 65)
   • safeExecute(
        () => handler(...args),
        `Event handler failed: ${eventName || 'unknown event'}`,
        (error) => {
          logUserAction(eventName || 'unknown_event', error);
        }
      ) (سطر 70)
   • handler(...args) (سطر 71)
   • logUserAction(eventName || 'unknown_event', error) (سطر 74)
   • useCallback(<T extends (...args: any[]) => Promise<any>>(
    asyncFn: T,
    operationName?: string
  ): T => {
    return (async (...args: any[]) => {
      try {
        const result = await asyncFn(...args);
        return result;
      } catch (error) {
        const errorObj = error instanceof Error ? error : new Error(String(error));
        logError(`Async operation failed: ${operationName || 'unknown operation'}`, errorObj);
        throw error; // Re-throw للسماح للمستدعي بمعالجة الخطأ
      }
    }) as T;
  }, [logError]) (سطر 81)
   • asyncFn(...args) (سطر 87)
   • String(error) (سطر 90)
   • logError(`Async operation failed: ${operationName || 'unknown operation'}`, errorObj) (سطر 91)
   • useCallback((info: Record<string, any>, message?: string) => {
    if (process.env.NODE_ENV === 'development') {
      console.log(`🔍 [${componentRef.current}] ${message || 'Debug Info'}:`, info);
    }
    
    errorLogger.updateAppState({
      [`debug_${componentRef.current}`]: {
        ...info,
        timestamp: new Date().toISOString()
      }
    });
  }, []) (سطر 98)
   • console.log(`🔍 [${componentRef.current}] ${message || 'Debug Info'}:`, info) (سطر 100)
   • errorLogger.updateAppState({
      [`debug_${componentRef.current}`]: {
        ...info,
        timestamp: new Date().toISOString()
      }
    }) (سطر 103)
   • new Date().toISOString() (سطر 106)
   • useEffect(() => {
    errorLogger.updateAppState({
      currentComponent: componentRef.current,
      componentLoadTime: new Date().toISOString()
    });

    // تنظيف عند إلغاء تحميل المكون
    return () => {
      errorLogger.updateAppState({
        lastComponent: componentRef.current,
        componentUnloadTime: new Date().toISOString()
      });
    };
  }, []) (سطر 112)
   • errorLogger.updateAppState({
      currentComponent: componentRef.current,
      componentLoadTime: new Date().toISOString()
    }) (سطر 113)
   • new Date().toISOString() (سطر 115)
   • errorLogger.updateAppState({
        lastComponent: componentRef.current,
        componentUnloadTime: new Date().toISOString()
      }) (سطر 120)
   • new Date().toISOString() (سطر 122)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/hooks/useErrorLogger.ts
🏷️ الدالة: useErrorStats
🔢 الأسطر: 141-149
⚡ Async: لا
📞 الاستدعاءات:
   • errorLogger.getStats() (سطر 142)
   • errorLogger.flushErrors() (سطر 147)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/hooks/useErrorLogger.ts
🏷️ الدالة: usePerformanceLogger
🔢 الأسطر: 152-194
⚡ Async: لا
🔑 الوسائط:
   • componentName: string | undefined
📞 الاستدعاءات:
   • useErrorLogger(componentName) (سطر 153)
   • useCallback((operationName: string, fn: () => void | Promise<void>) => {
    const startTime = performance.now();
    
    const cleanup = () => {
      const endTime = performance.now();
      const duration = endTime - startTime;
      
      logDebugInfo({
        operation: operationName,
        duration: `${duration.toFixed(2)}ms`,
        performance: {
          start: startTime,
          end: endTime,
          duration
        }
      }, `Performance: ${operationName}`);
      
      // تحذير إذا كانت العملية بطيئة
      if (duration > 1000) {
        console.warn(`⚠️ Slow operation detected: ${operationName} took ${duration.toFixed(2)}ms`);
      }
    };

    try {
      const result = fn();
      
      if (result instanceof Promise) {
        return result.finally(cleanup);
      } else {
        cleanup();
        return result;
      }
    } catch (error) {
      cleanup();
      throw error;
    }
  }, [logDebugInfo]) (سطر 155)
   • performance.now() (سطر 156)
   • performance.now() (سطر 159)
   • logDebugInfo({
        operation: operationName,
        duration: `${duration.toFixed(2)}ms`,
        performance: {
          start: startTime,
          end: endTime,
          duration
        }
      }, `Performance: ${operationName}`) (سطر 162)
   • duration.toFixed(2) (سطر 164)
   • console.warn(`⚠️ Slow operation detected: ${operationName} took ${duration.toFixed(2)}ms`) (سطر 174)
   • duration.toFixed(2) (سطر 174)
   • fn() (سطر 179)
   • result.finally(cleanup) (سطر 182)
   • cleanup() (سطر 184)
   • cleanup() (سطر 188)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/hooks/useWebSocket.ts
🏷️ الدالة: useWebSocket
🔢 الأسطر: 13-308
⚡ Async: لا
📞 الاستدعاءات:
   • useState(false) (سطر 14)
   • useState<WebSocketMessage | null>(null) (سطر 15)
   • useRef<WebSocket | null>(null) (سطر 16)
   • useRef<NodeJS.Timeout | null>(null) (سطر 17)
   • useRef(0) (سطر 18)
   • useRef(true) (سطر 19)
   • Math.pow(2, attempt - 1) (سطر 51)
   • Math.random() (سطر 52)
   • Math.min(exponentialDelay + jitter, maxReconnectInterval) (سطر 53)
   • console.error('🤝 WebSocket handshake failed for URL:', wsUrl) (سطر 58)
   • console.error('💡 This might indicate:') (سطر 59)
   • console.error('   - Server returned HTTP 200 instead of 101 (Switching Protocols)') (سطر 60)
   • console.error('   - CORS issues') (سطر 61)
   • console.error('   - Server doesn\'t support WebSocket protocol') (سطر 62)
   • console.error('   - Firewall or proxy blocking WebSocket connections') (سطر 63)
   • setLastMessage({
      type: 'HANDSHAKE_ERROR',
      message: 'فشل في مصافحة WebSocket - قد يكون السيرفر لا يدعم WebSocket أو مشكلة في CORS',
      url: wsUrl,
      timestamp: Date.now()
    }) (سطر 65)
   • Date.now() (سطر 69)
   • useCallback(() => {
    // منع الاتصالات المتعددة بشكل أكثر صرامة
    if (wsRef.current?.readyState === WebSocket.CONNECTING ||
        wsRef.current?.readyState === WebSocket.OPEN) {
      console.log('WebSocket already connecting/connected, skipping...');
      return;
    }

    // إلغاء أي محاولة إعادة اتصال سابقة
    if (reconnectTimeoutRef.current) {
      clearTimeout(reconnectTimeoutRef.current);
      reconnectTimeoutRef.current = null;
    }

    try {
      // Use the current domain for WebSocket connection with proper error handling
      const wsUrl = getWebSocketUrl();

      // تحسين التحقق من صحة URL مع fallback ذكي
      if (!wsUrl || 
          wsUrl.includes('undefined') || 
          wsUrl.includes('NaN') || 
          wsUrl.includes('null') ||
          wsUrl === 'wss:///ws' ||
          wsUrl === 'ws:///ws' ||
          wsUrl.length < 10) {
        console.error('❌ Invalid WebSocket URL detected:', wsUrl);
        console.error('❌ Environment config:', ENV_CONFIG);
        console.error('❌ Current location:', typeof window !== 'undefined' ? window.location : 'server');
        
        // محاولة إنشاء URL احتياطي ذكي
        if (typeof window !== 'undefined') {
          const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
          const hostname = window.location.hostname;
          
          // تحديد المنفذ بناءً على البيئة
          let fallbackUrl;
          if (hostname.includes('replit.dev') || hostname.includes('repl.co')) {
            fallbackUrl = `${protocol}//${hostname}/ws`;
          } else {
            const port = window.location.port || (protocol === 'wss:' ? '443' : '6000');
            fallbackUrl = `${protocol}//${hostname}:${port}/ws`;
          }
          
          console.log('🔄 Trying fallback URL:', fallbackUrl);
          console.log('🔑 WebSocket token:', token);
          const url = `${ENV_CONFIG.websocket.protocol}://${ENV_CONFIG.websocket.host}:${ENV_CONFIG.websocket.port}/ws?token=${token}`;
          wsRef.current = new WebSocket(url);
          //wsRef.current = new WebSocket(fallbackUrl);
        } else {
          console.error('❌ Cannot create fallback URL in server environment');
          return;
        }
      } else {
        console.log('🔌 Connecting to WebSocket:', wsUrl);
        wsRef.current = new WebSocket(wsUrl);
      }

      wsRef.current.onopen = () => {
        console.log('WebSocket connected');
        if (isMountedRef.current) {
          setIsConnected(true);
          reconnectAttemptsRef.current = 0;

          // مسح أي timeout لإعادة الاتصال
          if (reconnectTimeoutRef.current) {
            clearTimeout(reconnectTimeoutRef.current);
            reconnectTimeoutRef.current = null;
          }
        }
      };

      wsRef.current.onmessage = (event) => {
        if (!isMountedRef.current) return;
        
        try {
          const message: WebSocketMessage = JSON.parse(event.data);
          setLastMessage(message);
        } catch (error) {
          console.error('Error parsing WebSocket message:', error);
        }
      };

      wsRef.current.onclose = (event) => {
        const closeReasonMap: { [key: number]: string } = {
          1000: 'إغلاق طبيعي',
          1001: 'انتهى الاتصال - الصفحة يتم تحديثها أو إغلاقها',
          1002: 'خطأ في البروتوكول',
          1003: 'نوع بيانات غير مدعوم',
          1005: 'لم يتم استلام رمز الحالة',
          1006: 'إغلاق غير طبيعي - انقطاع الاتصال المفاجئ',
          1007: 'بيانات غير صالحة',
          1008: 'انتهاك السياسة',
          1009: 'رسالة كبيرة جداً',
          1010: 'امتداد مطلوب',
          1011: 'خطأ خادم داخلي',
          1015: 'فشل تشفير TLS'
        };

        const closeReason = closeReasonMap[event.code] || `كود غير معروف: ${event.code}`;
        console.log(`🔌 WebSocket disconnected - Code: ${event.code}, Reason: ${closeReason}`);
        
        if (event.reason) {
          console.log(`📝 Additional info: ${event.reason}`);
        }

        // Special handling for specific error codes
        if (event.code === 1006) {
          console.warn('⚠️ Abnormal closure detected - this might indicate network issues or server problems');
        } else if (event.code === 1005) {
          console.warn('⚠️ No status code received - connection may have been dropped unexpectedly');
        }

        setIsConnected(false);
        wsRef.current = null;

        // Clear last message to reset any authentication state
        setLastMessage({
          type: 'CONNECTION_CLOSED',
          message: `Connection closed: ${closeReason}`,
          code: event.code,
          reason: event.reason,
          timestamp: Date.now()
        });

        // تحسين منطق إعادة الاتصال بناءً على كود الخطأ
        const shouldReconnect = shouldAttemptReconnect(event.code, reconnectAttemptsRef.current);
        
        if (shouldReconnect) {
          reconnectAttemptsRef.current++;
          const delay = calculateReconnectDelay(reconnectAttemptsRef.current);

          console.log(`🔄 Attempting to reconnect in ${Math.round(delay)}ms (attempt ${reconnectAttemptsRef.current}/${maxReconnectAttempts})`);
          console.log(`📊 Connection failure type: ${closeReason}`);

          reconnectTimeoutRef.current = setTimeout(() => {
            if (!wsRef.current || wsRef.current.readyState === WebSocket.CLOSED) {
              connect();
            }
          }, delay);
        } else if (!shouldReconnect && reconnectAttemptsRef.current < maxReconnectAttempts) {
          console.log(`❌ Not attempting reconnect for code ${event.code}: ${closeReason}`);
        } else {
          console.log(`❌ Max reconnection attempts (${maxReconnectAttempts}) reached`);
        }
      };

      wsRef.current.onerror = (error) => {
        console.error('🚨 WebSocket error occurred:');
        console.error('📍 Error details:', error);
        console.error('📊 WebSocket state:', wsRef.current?.readyState);
        console.error('🔗 Current URL:', wsRef.current?.url);
        
        // تسجيل معلومات إضافية للتشخيص
        if (typeof window !== 'undefined') {
          console.error('🌐 Current location:', window.location.href);
          console.error('🔌 Network status:', navigator.onLine ? 'Online' : 'Offline');
          console.error('🕒 Timestamp:', new Date().toISOString());
        }
        
        // Check if this might be a handshake error (status 200)
        if (wsRef.current?.url) {
          handleHandshakeError(wsRef.current.url);
        }
        
        setIsConnected(false);
        
        // إرسال رسالة خطأ مفصلة
        setLastMessage({
          type: 'CONNECTION_ERROR',
          message: 'خطأ في اتصال WebSocket - يتم المحاولة مرة أخرى',
          error: true,
          timestamp: Date.now(),
          networkOnline: typeof window !== 'undefined' ? navigator.onLine : undefined
        });
      };

    } catch (error) {
      console.error('Failed to create WebSocket connection:', error);
      setIsConnected(false);
    }
  }, []) (سطر 73)
   • console.log('WebSocket already connecting/connected, skipping...') (سطر 77)
   • clearTimeout(reconnectTimeoutRef.current) (سطر 83)
   • getWebSocketUrl() (سطر 89)
   • wsUrl.includes('undefined') (سطر 93)
   • wsUrl.includes('NaN') (سطر 94)
   • wsUrl.includes('null') (سطر 95)
   • console.error('❌ Invalid WebSocket URL detected:', wsUrl) (سطر 99)
   • console.error('❌ Environment config:', ENV_CONFIG) (سطر 100)
   • console.error('❌ Current location:', typeof window !== 'undefined' ? window.location : 'server') (سطر 101)
   • hostname.includes('replit.dev') (سطر 110)
   • hostname.includes('repl.co') (سطر 110)
   • console.log('🔄 Trying fallback URL:', fallbackUrl) (سطر 117)
   • console.log('🔑 WebSocket token:', token) (سطر 118)
   • console.error('❌ Cannot create fallback URL in server environment') (سطر 123)
   • console.log('🔌 Connecting to WebSocket:', wsUrl) (سطر 127)
   • console.log('WebSocket connected') (سطر 132)
   • setIsConnected(true) (سطر 134)
   • clearTimeout(reconnectTimeoutRef.current) (سطر 139)
   • JSON.parse(event.data) (سطر 149)
   • setLastMessage(message) (سطر 150)
   • console.error('Error parsing WebSocket message:', error) (سطر 152)
   • console.log(`🔌 WebSocket disconnected - Code: ${event.code}, Reason: ${closeReason}`) (سطر 173)
   • console.log(`📝 Additional info: ${event.reason}`) (سطر 176)
   • console.warn('⚠️ Abnormal closure detected - this might indicate network issues or server problems') (سطر 181)
   • console.warn('⚠️ No status code received - connection may have been dropped unexpectedly') (سطر 183)
   • setIsConnected(false) (سطر 186)
   • setLastMessage({
          type: 'CONNECTION_CLOSED',
          message: `Connection closed: ${closeReason}`,
          code: event.code,
          reason: event.reason,
          timestamp: Date.now()
        }) (سطر 190)
   • Date.now() (سطر 195)
   • shouldAttemptReconnect(event.code, reconnectAttemptsRef.current) (سطر 199)
   • calculateReconnectDelay(reconnectAttemptsRef.current) (سطر 203)
   • console.log(`🔄 Attempting to reconnect in ${Math.round(delay)}ms (attempt ${reconnectAttemptsRef.current}/${maxReconnectAttempts})`) (سطر 205)
   • Math.round(delay) (سطر 205)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/authUtils.ts
🏷️ الدالة: isUnauthorizedError
🔢 الأسطر: 1-3
⚡ Async: لا
🔑 الوسائط:
   • error: Error
📞 الاستدعاءات:
   • /^401: .*Unauthorized/.test(error.message) (سطر 2)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/errorLogger.ts
🏷️ الدالة: ErrorLogger.generateSessionId
🔢 الأسطر: 81-83
⚡ Async: لا
📞 الاستدعاءات:
   • nanoid() (سطر 82)
   • Date.now() (سطر 82)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/errorLogger.ts
🏷️ الدالة: ErrorLogger.init
🔢 الأسطر: 85-114
⚡ Async: لا
📞 الاستدعاءات:
   • window.addEventListener('error', this.handleWindowError.bind(this)) (سطر 92)
   • this.handleWindowError.bind(this) (سطر 92)
   • window.addEventListener('unhandledrejection', this.handleUnhandledRejection.bind(this)) (سطر 95)
   • this.handleUnhandledRejection.bind(this) (سطر 95)
   • this.setupNavigationErrorHandling() (سطر 98)
   • this.setupNetworkErrorHandling() (سطر 101)
   • this.restoreFromLocalStorage() (سطر 104)
   • console.log('🔍 ErrorLogger initialized successfully') (سطر 109)
   • console.error('Failed to initialize ErrorLogger:', error) (سطر 112)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/errorLogger.ts
🏷️ الدالة: ErrorLogger.handleWindowError
🔢 الأسطر: 116-131
⚡ Async: لا
🔑 الوسائط:
   • event: ErrorEvent
📞 الاستدعاءات:
   • this.getBrowserInfo() (سطر 124)
   • this.getCurrentAppState() (سطر 125)
   • this.logError(errorData) (سطر 130)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/errorLogger.ts
🏷️ الدالة: ErrorLogger.handleUnhandledRejection
🔢 الأسطر: 133-148
⚡ Async: لا
🔑 الوسائط:
   • event: PromiseRejectionEvent
📞 الاستدعاءات:
   • this.getBrowserInfo() (سطر 141)
   • this.getCurrentAppState() (سطر 142)
   • this.logError(errorData) (سطر 147)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/errorLogger.ts
🏷️ الدالة: ErrorLogger.setupNavigationErrorHandling
🔢 الأسطر: 150-178
⚡ Async: لا
📞 الاستدعاءات:
   • originalPushState.apply(history, args) (سطر 157)
   • this.logNavigationError('pushState', error as Error) (سطر 159)
   • originalReplaceState.apply(history, args) (سطر 165)
   • this.logNavigationError('replaceState', error as Error) (سطر 167)
   • window.addEventListener('popstate', (event) => {
      try {
        // يمكن إضافة معالجة إضافية هنا
      } catch (error) {
        this.logNavigationError('popstate', error as Error);
      }
    }) (سطر 171)
   • this.logNavigationError('popstate', error as Error) (سطر 175)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/errorLogger.ts
🏷️ الدالة: ErrorLogger.setupNetworkErrorHandling
🔢 الأسطر: 180-212
⚡ Async: لا
📞 الاستدعاءات:
   • originalFetch(...args) (سطر 185)
   • this.logNetworkError('fetch', args[0] as string, response.status, response.statusText) (سطر 189)
   • this.logNetworkError('fetch', args[0] as string, 0, (error as Error).message) (سطر 194)
   • this.addEventListener('error', () => {
        errorLogger.logNetworkError('xhr', args[1] as string, this.status, this.statusText);
      }) (سطر 202)
   • errorLogger.logNetworkError('xhr', args[1] as string, this.status, this.statusText) (سطر 203)
   • this.addEventListener('timeout', () => {
        errorLogger.logNetworkError('xhr', args[1] as string, 0, 'Request timeout');
      }) (سطر 206)
   • errorLogger.logNetworkError('xhr', args[1] as string, 0, 'Request timeout') (سطر 207)
   • originalXHROpen.apply(this, args) (سطر 210)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/errorLogger.ts
🏷️ الدالة: ErrorLogger.logNavigationError
🔢 الأسطر: 214-230
⚡ Async: لا
🔑 الوسائط:
   • action: string
   • error: Error
📞 الاستدعاءات:
   • this.getBrowserInfo() (سطر 223)
   • this.getCurrentAppState() (سطر 224)
   • this.logError(errorData) (سطر 229)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/errorLogger.ts
🏷️ الدالة: ErrorLogger.logNetworkError
🔢 الأسطر: 232-251
⚡ Async: لا
🔑 الوسائط:
   • type: string
   • url: string
   • status: number
   • message: string
📞 الاستدعاءات:
   • this.getBrowserInfo() (سطر 240)
   • this.getCurrentAppState() (سطر 242)
   • this.logError(errorData) (سطر 250)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/errorLogger.ts
🏷️ الدالة: ErrorLogger.logReactError
🔢 الأسطر: 254-275
⚡ Async: لا
🔑 الوسائط:
   • error: Error
   • errorInfo: any
   • componentName: string | undefined
📞 الاستدعاءات:
   • this.getBrowserInfo() (سطر 264)
   • this.getCurrentAppState() (سطر 266)
   • this.logError(errorData) (سطر 274)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/errorLogger.ts
🏷️ الدالة: ErrorLogger.logUserActionError
🔢 الأسطر: 278-295
⚡ Async: لا
🔑 الوسائط:
   • action: string
   • error: Error
   • component: string | undefined
   • severity: import("/home/administrator/Panel/client/src/lib/errorLogger").ErrorSeverity
📞 الاستدعاءات:
   • this.getBrowserInfo() (سطر 288)
   • this.getCurrentAppState() (سطر 289)
   • this.logError(errorData) (سطر 294)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/errorLogger.ts
🏷️ الدالة: ErrorLogger.logComponentError
🔢 الأسطر: 298-314
⚡ Async: لا
🔑 الوسائط:
   • message: string
   • component: string
   • error: Error | undefined
   • severity: import("/home/administrator/Panel/client/src/lib/errorLogger").ErrorSeverity
📞 الاستدعاءات:
   • this.getBrowserInfo() (سطر 307)
   • this.getCurrentAppState() (سطر 308)
   • this.logError(errorData) (سطر 313)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/errorLogger.ts
🏷️ الدالة: ErrorLogger.updateAppState
🔢 الأسطر: 317-319
⚡ Async: لا
🔑 الوسائط:
   • newState: Record<string, any>
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/errorLogger.ts
🏷️ الدالة: ErrorLogger.removeFromAppState
🔢 الأسطر: 322-326
⚡ Async: لا
🔑 الوسائط:
   • keys: string[]
📞 الاستدعاءات:
   • keys.forEach(key => {
      delete this.currentAppState[key];
    }) (سطر 323)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/errorLogger.ts
🏷️ الدالة: ErrorLogger.getCurrentAppState
🔢 الأسطر: 328-336
⚡ Async: لا
📞 الاستدعاءات:
   • new Date().toISOString() (سطر 332)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/errorLogger.ts
🏷️ الدالة: ErrorLogger.getBrowserInfo
🔢 الأسطر: 338-355
⚡ Async: لا
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/errorLogger.ts
🏷️ الدالة: ErrorLogger.logError
🔢 الأسطر: 357-380
⚡ Async: لا
🔑 الوسائط:
   • errorData: import("/home/administrator/Panel/client/src/lib/errorLogger").ErrorData
📞 الاستدعاءات:
   • console.error(`🚨 [ErrorLogger] ${errorData.type}:`, errorData.message, errorData) (سطر 360)
   • this.errorQueue.push(errorData) (سطر 364)
   • this.saveToLocalStorage(errorData) (سطر 368)
   • this.scheduleBatchSend() (سطر 373)
   • this.sendError(errorData) (سطر 375)
   • console.error('Failed to log error:', error) (سطر 378)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/errorLogger.ts
🏷️ الدالة: ErrorLogger.scheduleBatchSend
🔢 الأسطر: 382-394
⚡ Async: لا
📞 الاستدعاءات:
   • clearTimeout(this.batchTimer) (سطر 384)
   • this.sendBatch() (سطر 388)
   • setTimeout(() => {
        this.sendBatch();
      }, this.config.batchTimeout) (سطر 390)
   • this.sendBatch() (سطر 391)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/errorLogger.ts
🏷️ الدالة: ErrorLogger.sendBatch
🔢 الأسطر: 396-414
⚡ Async: نعم
📞 الاستدعاءات:
   • clearTimeout(this.batchTimer) (سطر 403)
   • this.sendToAPI('/api/frontend-errors/batch', batch) (سطر 408)
   • console.error('Failed to send error batch:', error) (سطر 410)
   • this.errorQueue.unshift(...batch) (سطر 412)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/errorLogger.ts
🏷️ الدالة: ErrorLogger.sendError
🔢 الأسطر: 416-428
⚡ Async: نعم
🔑 الوسائط:
   • errorData: import("/home/administrator/Panel/client/src/lib/errorLogger").ErrorData
   • retryCount: number
📞 الاستدعاءات:
   • this.sendToAPI(this.config.apiEndpoint, errorData) (سطر 418)
   • setTimeout(() => {
          this.sendError(errorData, retryCount + 1);
        }, this.config.retryDelay * Math.pow(2, retryCount)) (سطر 421)
   • this.sendError(errorData, retryCount + 1) (سطر 422)
   • Math.pow(2, retryCount) (سطر 423)
   • console.error('Failed to send error after max retries:', error) (سطر 425)
🩺 التشخيص:
   ⚠️ الوسيط 'retryCount' بدون نوع صريح (implicit any)

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/errorLogger.ts
🏷️ الدالة: ErrorLogger.sendToAPI
🔢 الأسطر: 430-443
⚡ Async: نعم
🔑 الوسائط:
   • endpoint: string
   • data: import("/home/administrator/Panel/client/src/lib/errorLogger").ErrorData | import("/home/administrator/Panel/client/src/lib/errorLogger").ErrorData[]
📞 الاستدعاءات:
   • fetch(endpoint, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data),
      credentials: 'include'
    }) (سطر 431)
   • JSON.stringify(data) (سطر 436)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/errorLogger.ts
🏷️ الدالة: ErrorLogger.saveToLocalStorage
🔢 الأسطر: 445-462
⚡ Async: لا
🔑 الوسائط:
   • errorData: import("/home/administrator/Panel/client/src/lib/errorLogger").ErrorData
📞 الاستدعاءات:
   • localStorage.getItem(key) (سطر 448)
   • JSON.parse(stored) (سطر 449)
   • errors.push(errorData) (سطر 451)
   • errors.splice(0, errors.length - this.config.maxLocalStorageEntries) (سطر 455)
   • localStorage.setItem(key, JSON.stringify(errors)) (سطر 458)
   • JSON.stringify(errors) (سطر 458)
   • console.error('Failed to save error to localStorage:', error) (سطر 460)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/errorLogger.ts
🏷️ الدالة: ErrorLogger.restoreFromLocalStorage
🔢 الأسطر: 464-484
⚡ Async: لا
📞 الاستدعاءات:
   • localStorage.getItem(key) (سطر 467)
   • JSON.parse(stored) (سطر 470)
   • errors.forEach(error => this.errorQueue.push(error)) (سطر 472)
   • this.errorQueue.push(error) (سطر 472)
   • localStorage.removeItem(key) (سطر 475)
   • console.log(`🔄 Restored ${errors.length} errors from localStorage`) (سطر 478)
   • console.error('Failed to restore errors from localStorage:', error) (سطر 482)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/errorLogger.ts
🏷️ الدالة: ErrorLogger.flushErrors
🔢 الأسطر: 487-491
⚡ Async: نعم
📞 الاستدعاءات:
   • this.sendBatch() (سطر 489)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/errorLogger.ts
🏷️ الدالة: ErrorLogger.getStats
🔢 الأسطر: 494-499
⚡ Async: لا
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/errorLogger.ts
🏷️ الدالة: logError
🔢 الأسطر: 509-511
⚡ Async: لا
🔑 الوسائط:
   • message: string
   • error: Error | undefined
   • component: string | undefined
📞 الاستدعاءات:
   • errorLogger.logComponentError(message, component || 'Unknown', error) (سطر 510)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/errorLogger.ts
🏷️ الدالة: logUserAction
🔢 الأسطر: 513-515
⚡ Async: لا
🔑 الوسائط:
   • action: string
   • error: Error
   • component: string | undefined
📞 الاستدعاءات:
   • errorLogger.logUserActionError(action, error, component) (سطر 514)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/errorLogger.ts
🏷️ الدالة: logReactError
🔢 الأسطر: 517-519
⚡ Async: لا
🔑 الوسائط:
   • error: Error
   • errorInfo: any
   • componentName: string | undefined
📞 الاستدعاءات:
   • errorLogger.logReactError(error, errorInfo, componentName) (سطر 518)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/errorLogger.ts
🏷️ الدالة: updateAppState
🔢 الأسطر: 521-523
⚡ Async: لا
🔑 الوسائط:
   • state: Record<string, any>
📞 الاستدعاءات:
   • errorLogger.updateAppState(state) (سطر 522)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/queryClient.ts
🏷️ الدالة: throwIfResNotOk
🔢 الأسطر: 7-12
⚡ Async: نعم
🔑 الوسائط:
   • res: Response
📞 الاستدعاءات:
   • res.text() (سطر 9)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/queryClient.ts
🏷️ الدالة: apiRequest
🔢 الأسطر: 14-59
⚡ Async: نعم
🔑 الوسائط:
   • method: string
   • endpoint: string
   • data: any
📞 الاستدعاءات:
   • JSON.stringify(data) (سطر 28)
   • fetch(endpoint, options) (سطر 32)
   • response.json() (سطر 39)
   • error.message.includes('fetch') (سطر 53)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/queryClient.ts
🏷️ الدالة: getQueryFn
🔢 الأسطر: 65-80
⚡ Async: لا
🔑 الوسائط:
   • { on401: unauthorizedBehavior }: { on401: UnauthorizedBehavior; }
📞 الاستدعاءات:
   • queryKey.join("/") (سطر 67)
   • url.startsWith('http') (سطر 68)
   • fetch(fullUrl, {
      credentials: "include",
    }) (سطر 70)
   • throwIfResNotOk(res) (سطر 78)
   • res.json() (سطر 79)
🩺 التشخيص:
   ⚠️ الوسيط '{ on401: unauthorizedBehavior }' بدون نوع صريح (implicit any)

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: createActivityTracker
🔢 الأسطر: 1074-1081
⚡ Async: لا
🔑 الوسائط:
   • config: Partial<import("/home/administrator/Panel/client/src/lib/userActivityTracker").ActivityTrackerConfig> | undefined
📞 الاستدعاءات:
   • globalTracker.destroy() (سطر 1076)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: getActivityTracker
🔢 الأسطر: 1083-1085
⚡ Async: لا
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: destroyActivityTracker
🔢 الأسطر: 1087-1092
⚡ Async: لا
📞 الاستدعاءات:
   • globalTracker.destroy() (سطر 1089)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: ActivityQueue.add
🔢 الأسطر: 93-103
⚡ Async: لا
🔑 الوسائط:
   • activity: import("/home/administrator/Panel/client/src/lib/userActivityTracker").ActivityData
📞 الاستدعاءات:
   • this.queue.push(activity) (سطر 94)
   • this.saveToLocalStorage() (سطر 97)
   • this.flush() (سطر 101)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: ActivityQueue.saveToLocalStorage
🔢 الأسطر: 105-114
⚡ Async: لا
📞 الاستدعاءات:
   • localStorage.getItem('userActivitiesQueue') (سطر 107)
   • JSON.parse(stored) (سطر 108)
   • [...storedQueue, ...this.queue].slice(-this.config.maxLocalStorageEntries) (سطر 109)
   • localStorage.setItem('userActivitiesQueue', JSON.stringify(combined)) (سطر 110)
   • JSON.stringify(combined) (سطر 110)
   • console.warn('Failed to save activities to localStorage:', error) (سطر 112)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: ActivityQueue.loadFromLocalStorage
🔢 الأسطر: 116-128
⚡ Async: لا
📞 الاستدعاءات:
   • localStorage.getItem('userActivitiesQueue') (سطر 118)
   • JSON.parse(stored) (سطر 120)
   • localStorage.removeItem('userActivitiesQueue') (سطر 121)
   • console.warn('Failed to load activities from localStorage:', error) (سطر 125)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: ActivityQueue.flush
🔢 الأسطر: 130-157
⚡ Async: نعم
📞 الاستدعاءات:
   • this.loadFromLocalStorage() (سطر 140)
   • activitiesToSend.unshift(...storedActivities) (سطر 142)
   • this.sendBatch(activitiesToSend) (سطر 146)
   • console.error('Failed to send activities batch:', error) (سطر 148)
   • this.queue.unshift(...activitiesToSend) (سطر 151)
   • this.saveToLocalStorage() (سطر 152)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: ActivityQueue.sendBatch
🔢 الأسطر: 159-193
⚡ Async: نعم
🔑 الوسائط:
   • activities: import("/home/administrator/Panel/client/src/lib/userActivityTracker").ActivityData[]
📞 الاستدعاءات:
   • fetch(endpoint, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          credentials: 'include',
          body: JSON.stringify(activities),
        }) (سطر 165)
   • JSON.stringify(activities) (سطر 171)
   • console.log(`📊 Sent ${activities.length} activities to server`) (سطر 176)
   • console.warn(`Attempt ${attempts} failed:`, error) (سطر 184)
   • setTimeout(resolve, this.config.retryDelay) (سطر 187)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: ActivityQueue.getQueueSize
🔢 الأسطر: 195-197
⚡ Async: لا
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: ActivityQueue.clear
🔢 الأسطر: 199-204
⚡ Async: لا
📞 الاستدعاءات:
   • localStorage.removeItem('userActivitiesQueue') (سطر 202)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: UserActivityTracker.generateSessionId
🔢 الأسطر: 255-257
⚡ Async: لا
📞 الاستدعاءات:
   • nanoid() (سطر 256)
   • Date.now() (سطر 256)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: UserActivityTracker.init
🔢 الأسطر: 259-280
⚡ Async: لا
📞 الاستدعاءات:
   • this.setupEventListeners() (سطر 265)
   • this.startFlushTimer() (سطر 266)
   • this.trackPageView() (سطر 267)
   • this.trackSessionStart() (سطر 268)
   • this.setupVisibilityHandling() (سطر 269)
   • this.setupBeforeUnload() (سطر 270)
   • console.log('🎯 UserActivityTracker initialized successfully') (سطر 275)
   • console.error('Failed to initialize UserActivityTracker:', error) (سطر 278)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: UserActivityTracker.setupEventListeners
🔢 الأسطر: 282-325
⚡ Async: لا
📞 الاستدعاءات:
   • document.addEventListener('click', this.handleClick.bind(this), true) (سطر 284)
   • this.handleClick.bind(this) (سطر 284)
   • document.addEventListener('input', this.handleInput.bind(this), true) (سطر 287)
   • this.handleInput.bind(this) (سطر 287)
   • document.addEventListener('change', this.handleChange.bind(this), true) (سطر 288)
   • this.handleChange.bind(this) (سطر 288)
   • document.addEventListener('submit', this.handleSubmit.bind(this), true) (سطر 289)
   • this.handleSubmit.bind(this) (سطر 289)
   • document.addEventListener('focus', this.handleFocus.bind(this), true) (سطر 292)
   • this.handleFocus.bind(this) (سطر 292)
   • document.addEventListener('blur', this.handleBlur.bind(this), true) (سطر 293)
   • this.handleBlur.bind(this) (سطر 293)
   • document.addEventListener('mousemove', this.debounce('mousemove', this.handleMouseMove.bind(this))) (سطر 297)
   • this.debounce('mousemove', this.handleMouseMove.bind(this)) (سطر 297)
   • this.handleMouseMove.bind(this) (سطر 297)
   • document.addEventListener('mouseenter', this.handleHover.bind(this), true) (سطر 299)
   • this.handleHover.bind(this) (سطر 299)
   • document.addEventListener('mouseleave', this.handleHover.bind(this), true) (سطر 300)
   • this.handleHover.bind(this) (سطر 300)
   • window.addEventListener('scroll', this.debounce('scroll', this.handleScroll.bind(this))) (سطر 304)
   • this.debounce('scroll', this.handleScroll.bind(this)) (سطر 304)
   • this.handleScroll.bind(this) (سطر 304)
   • document.addEventListener('keydown', this.handleKeyPress.bind(this), true) (سطر 309)
   • this.handleKeyPress.bind(this) (سطر 309)
   • document.addEventListener('copy', this.handleCopy.bind(this), true) (سطر 314)
   • this.handleCopy.bind(this) (سطر 314)
   • document.addEventListener('paste', this.handlePaste.bind(this), true) (سطر 315)
   • this.handlePaste.bind(this) (سطر 315)
   • document.addEventListener('dragstart', this.handleDrag.bind(this), true) (سطر 319)
   • this.handleDrag.bind(this) (سطر 319)
   • document.addEventListener('drop', this.handleDrop.bind(this), true) (سطر 320)
   • this.handleDrop.bind(this) (سطر 320)
   • window.addEventListener('popstate', this.handleNavigation.bind(this)) (سطر 323)
   • this.handleNavigation.bind(this) (سطر 323)
   • this.interceptNavigationMethods() (سطر 324)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: UserActivityTracker.handleClick
🔢 الأسطر: 327-361
⚡ Async: لا
🔑 الوسائط:
   • event: MouseEvent
📞 الاستدعاءات:
   • this.shouldExcludeElement(target) (سطر 329)
   • this.getElementIdentifier(target) (سطر 336)
   • this.getElementText(target) (سطر 337)
   • target.tagName.toLowerCase() (سطر 338)
   • this.getBrowserInfo() (سطر 340)
   • this.getViewportInfo() (سطر 341)
   • Date.now() (سطر 348)
   • this.trackActivity(activityData) (سطر 360)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: UserActivityTracker.handleInput
🔢 الأسطر: 363-390
⚡ Async: لا
🔑 الوسائط:
   • event: Event
📞 الاستدعاءات:
   • this.shouldExcludeElement(target) (سطر 365)
   • this.isSensitiveField(target) (سطر 365)
   • this.getElementIdentifier(target) (سطر 372)
   • target.value?.slice(0, 100) (سطر 375)
   • this.getBrowserInfo() (سطر 376)
   • this.getViewportInfo() (سطر 377)
   • Date.now() (سطر 378)
   • this.trackActivity(activityData) (سطر 389)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: UserActivityTracker.handleChange
🔢 الأسطر: 392-419
⚡ Async: لا
🔑 الوسائط:
   • event: Event
📞 الاستدعاءات:
   • this.shouldExcludeElement(target) (سطر 394)
   • this.getElementIdentifier(target) (سطر 401)
   • target.tagName.toLowerCase() (سطر 402)
   • target.tagName.toLowerCase() (سطر 403)
   • this.isSensitiveField(target) (سطر 404)
   • target.value?.slice(0, 100) (سطر 404)
   • this.getBrowserInfo() (سطر 405)
   • this.getViewportInfo() (سطر 406)
   • Date.now() (سطر 407)
   • this.trackActivity(activityData) (سطر 418)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: UserActivityTracker.handleSubmit
🔢 الأسطر: 421-456
⚡ Async: لا
🔑 الوسائط:
   • event: SubmitEvent
📞 الاستدعاءات:
   • this.shouldExcludeElement(target) (سطر 423)
   • Array.from(formData.keys()).map(key => ({
      name: key,
      type: (target.querySelector(`[name="${key}"]`) as HTMLInputElement)?.type || 'unknown',
      hasValue: formData.get(key) !== null && formData.get(key) !== ''
    })) (سطر 428)
   • Array.from(formData.keys()) (سطر 428)
   • formData.keys() (سطر 428)
   • target.querySelector(`[name="${key}"]`) (سطر 430)
   • formData.get(key) (سطر 431)
   • formData.get(key) (سطر 431)
   • this.getElementIdentifier(target) (سطر 437)
   • this.getBrowserInfo() (سطر 440)
   • this.getViewportInfo() (سطر 441)
   • Date.now() (سطر 442)
   • this.trackActivity(activityData) (سطر 455)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: UserActivityTracker.handleFocus
🔢 الأسطر: 458-479
⚡ Async: لا
🔑 الوسائط:
   • event: FocusEvent
📞 الاستدعاءات:
   • this.shouldExcludeElement(target) (سطر 460)
   • this.getElementIdentifier(target) (سطر 467)
   • target.tagName.toLowerCase() (سطر 468)
   • this.getBrowserInfo() (سطر 470)
   • this.getViewportInfo() (سطر 471)
   • Date.now() (سطر 472)
   • this.trackActivity(activityData) (سطر 478)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: UserActivityTracker.handleBlur
🔢 الأسطر: 481-502
⚡ Async: لا
🔑 الوسائط:
   • event: FocusEvent
📞 الاستدعاءات:
   • this.shouldExcludeElement(target) (سطر 483)
   • this.getElementIdentifier(target) (سطر 490)
   • target.tagName.toLowerCase() (سطر 491)
   • this.getBrowserInfo() (سطر 493)
   • this.getViewportInfo() (سطر 494)
   • Date.now() (سطر 495)
   • this.trackActivity(activityData) (سطر 501)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: UserActivityTracker.handleMouseMove
🔢 الأسطر: 504-525
⚡ Async: لا
🔑 الوسائط:
   • event: MouseEvent
📞 الاستدعاءات:
   • this.getBrowserInfo() (سطر 510)
   • this.getViewportInfo() (سطر 511)
   • Date.now() (سطر 518)
   • this.trackActivity(activityData) (سطر 524)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: UserActivityTracker.handleHover
🔢 الأسطر: 527-557
⚡ Async: لا
🔑 الوسائط:
   • event: MouseEvent
📞 الاستدعاءات:
   • this.shouldExcludeElement(target) (سطر 529)
   • this.getElementIdentifier(target) (سطر 536)
   • target.tagName.toLowerCase() (سطر 537)
   • this.getBrowserInfo() (سطر 539)
   • this.getViewportInfo() (سطر 540)
   • Date.now() (سطر 547)
   • this.trackActivity(activityData) (سطر 556)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: UserActivityTracker.handleScroll
🔢 الأسطر: 559-580
⚡ Async: لا
📞 الاستدعاءات:
   • this.getBrowserInfo() (سطر 564)
   • this.getViewportInfo() (سطر 565)
   • Date.now() (سطر 566)
   • Math.round((window.pageYOffset / (document.documentElement.scrollHeight - window.innerHeight)) * 100) (سطر 575)
   • this.trackActivity(activityData) (سطر 579)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: UserActivityTracker.handleKeyPress
🔢 الأسطر: 582-614
⚡ Async: لا
🔑 الوسائط:
   • event: KeyboardEvent
📞 الاستدعاءات:
   • this.isSensitiveKeyPress(event) (سطر 586)
   • this.isSensitiveField(target) (سطر 586)
   • this.getElementIdentifier(target) (سطر 593)
   • target?.tagName.toLowerCase() (سطر 594)
   • this.getBrowserInfo() (سطر 597)
   • this.getViewportInfo() (سطر 598)
   • Date.now() (سطر 599)
   • this.trackActivity(activityData) (سطر 613)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: UserActivityTracker.handleCopy
🔢 الأسطر: 616-638
⚡ Async: لا
🔑 الوسائط:
   • event: ClipboardEvent
📞 الاستدعاءات:
   • this.getElementIdentifier(target) (سطر 622)
   • target?.tagName.toLowerCase() (سطر 623)
   • this.getBrowserInfo() (سطر 625)
   • this.getViewportInfo() (سطر 626)
   • Date.now() (سطر 627)
   • Array.from(event.clipboardData.types) (سطر 633)
   • this.trackActivity(activityData) (سطر 637)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: UserActivityTracker.handlePaste
🔢 الأسطر: 640-662
⚡ Async: لا
🔑 الوسائط:
   • event: ClipboardEvent
📞 الاستدعاءات:
   • this.getElementIdentifier(target) (سطر 646)
   • target?.tagName.toLowerCase() (سطر 647)
   • this.getBrowserInfo() (سطر 649)
   • this.getViewportInfo() (سطر 650)
   • Date.now() (سطر 651)
   • Array.from(event.clipboardData.types) (سطر 657)
   • this.trackActivity(activityData) (سطر 661)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: UserActivityTracker.handleDrag
🔢 الأسطر: 664-688
⚡ Async: لا
🔑 الوسائط:
   • event: DragEvent
📞 الاستدعاءات:
   • this.getElementIdentifier(target) (سطر 670)
   • target?.tagName.toLowerCase() (سطر 671)
   • this.getBrowserInfo() (سطر 673)
   • this.getViewportInfo() (سطر 674)
   • Date.now() (سطر 681)
   • this.trackActivity(activityData) (سطر 687)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: UserActivityTracker.handleDrop
🔢 الأسطر: 690-718
⚡ Async: لا
🔑 الوسائط:
   • event: DragEvent
📞 الاستدعاءات:
   • this.getElementIdentifier(target) (سطر 696)
   • target?.tagName.toLowerCase() (سطر 697)
   • this.getBrowserInfo() (سطر 699)
   • this.getViewportInfo() (سطر 700)
   • Date.now() (سطر 707)
   • Array.from(event.dataTransfer.types) (سطر 712)
   • Array.from(event.dataTransfer.files).map(f => ({ name: f.name, size: f.size, type: f.type })) (سطر 713)
   • Array.from(event.dataTransfer.files) (سطر 713)
   • this.trackActivity(activityData) (سطر 717)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: UserActivityTracker.handleNavigation
🔢 الأسطر: 720-749
⚡ Async: لا
📞 الاستدعاءات:
   • this.getBrowserInfo() (سطر 728)
   • this.getViewportInfo() (سطر 729)
   • Date.now() (سطر 730)
   • this.trackActivity(activityData) (سطر 742)
   • Date.now() (سطر 746)
   • this.trackPageView() (سطر 747)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: UserActivityTracker.interceptNavigationMethods
🔢 الأسطر: 751-765
⚡ Async: لا
📞 الاستدعاءات:
   • originalPushState.apply(history, args) (سطر 757)
   • setTimeout(() => this.handleNavigation(), 0) (سطر 758)
   • this.handleNavigation() (سطر 758)
   • originalReplaceState.apply(history, args) (سطر 762)
   • setTimeout(() => this.handleNavigation(), 0) (سطر 763)
   • this.handleNavigation() (سطر 763)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: UserActivityTracker.setupVisibilityHandling
🔢 الأسطر: 767-779
⚡ Async: لا
📞 الاستدعاءات:
   • document.addEventListener('visibilitychange', () => {
      this.isVisible = !document.hidden;
      
      if (this.isVisible) {
        // المستخدم عاد للصفحة
        this.lastActivityTime = Date.now();
      } else {
        // المستخدم غادر الصفحة - إرسال البيانات
        this.queue.flush();
      }
    }) (سطر 768)
   • Date.now() (سطر 773)
   • this.queue.flush() (سطر 776)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: UserActivityTracker.setupBeforeUnload
🔢 الأسطر: 781-786
⚡ Async: لا
📞 الاستدعاءات:
   • window.addEventListener('beforeunload', () => {
      this.trackSessionEnd();
      this.queue.flush();
    }) (سطر 782)
   • this.trackSessionEnd() (سطر 783)
   • this.queue.flush() (سطر 784)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: UserActivityTracker.trackPageView
🔢 الأسطر: 788-811
⚡ Async: لا
📞 الاستدعاءات:
   • this.shouldExcludePage(this.currentPage) (سطر 789)
   • this.getBrowserInfo() (سطر 797)
   • this.getViewportInfo() (سطر 798)
   • new Date().toISOString() (سطر 806)
   • this.trackActivity(activityData) (سطر 810)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: UserActivityTracker.trackSessionStart
🔢 الأسطر: 813-831
⚡ Async: لا
📞 الاستدعاءات:
   • this.getBrowserInfo() (سطر 818)
   • this.getViewportInfo() (سطر 819)
   • new Date().toISOString() (سطر 825)
   • this.trackActivity(activityData) (سطر 830)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: UserActivityTracker.trackSessionEnd
🔢 الأسطر: 833-851
⚡ Async: لا
📞 الاستدعاءات:
   • this.getBrowserInfo() (سطر 838)
   • this.getViewportInfo() (سطر 839)
   • Date.now() (سطر 840)
   • new Date().toISOString() (سطر 845)
   • Date.now() (سطر 846)
   • this.trackActivity(activityData) (سطر 850)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: UserActivityTracker.debounce
🔢 الأسطر: 854-873
⚡ Async: لا
🔑 الوسائط:
   • key: string
   • func: Function
📞 الاستدعاءات:
   • func(...args) (سطر 857)
   • this.debounceTimers.get(key) (سطر 861)
   • clearTimeout(existingTimer) (سطر 863)
   • setTimeout(() => {
        func(...args);
        this.debounceTimers.delete(key);
      }, this.config.debounceDelay) (سطر 866)
   • func(...args) (سطر 867)
   • this.debounceTimers.delete(key) (سطر 868)
   • this.debounceTimers.set(key, timer) (سطر 871)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: UserActivityTracker.startFlushTimer
🔢 الأسطر: 875-879
⚡ Async: لا
📞 الاستدعاءات:
   • setInterval(() => {
      this.queue.flush();
    }, this.config.batchTimeout) (سطر 876)
   • this.queue.flush() (سطر 877)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: UserActivityTracker.getElementIdentifier
🔢 الأسطر: 881-901
⚡ Async: لا
🔑 الوسائط:
   • element: HTMLElement
📞 الاستدعاءات:
   • element.className.split(' ').join('.') (سطر 887)
   • element.className.split(' ') (سطر 887)
   • element.tagName.toLowerCase() (سطر 891)
   • Array.from(parent.children) (سطر 895)
   • siblings.indexOf(element) (سطر 896)
   • parent.tagName.toLowerCase() (سطر 897)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: UserActivityTracker.getElementText
🔢 الأسطر: 903-906
⚡ Async: لا
🔑 الوسائط:
   • element: HTMLElement
📞 الاستدعاءات:
   • text.trim().slice(0, 100) (سطر 905)
   • text.trim() (سطر 905)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: UserActivityTracker.getBrowserInfo
🔢 الأسطر: 908-923
⚡ Async: لا
📞 الاستدعاءات:
   • Intl.DateTimeFormat().resolvedOptions() (سطر 920)
   • Intl.DateTimeFormat() (سطر 920)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: UserActivityTracker.getViewportInfo
🔢 الأسطر: 925-931
⚡ Async: لا
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: UserActivityTracker.shouldExcludePage
🔢 الأسطر: 933-937
⚡ Async: لا
🔑 الوسائط:
   • page: string
📞 الاستدعاءات:
   • this.config.excludePages.some(excludedPage => 
      page.includes(excludedPage)
    ) (سطر 934)
   • page.includes(excludedPage) (سطر 935)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: UserActivityTracker.shouldExcludeElement
🔢 الأسطر: 939-947
⚡ Async: لا
🔑 الوسائط:
   • element: HTMLElement
📞 الاستدعاءات:
   • this.config.excludeElements.some(selector => {
      try {
        return element.matches(selector) || element.closest(selector);
      } catch {
        return false;
      }
    }) (سطر 940)
   • element.matches(selector) (سطر 942)
   • element.closest(selector) (سطر 942)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: UserActivityTracker.isSensitiveField
🔢 الأسطر: 949-959
⚡ Async: لا
🔑 الوسائط:
   • element: HTMLElement
📞 الاستدعاءات:
   • (element as HTMLInputElement).name?.toLowerCase() (سطر 950)
   • (element as HTMLInputElement).type?.toLowerCase() (سطر 951)
   • element.id?.toLowerCase() (سطر 952)
   • this.config.sensitiveFields.some(sensitive => 
      fieldName.includes(sensitive) || 
      fieldType.includes(sensitive) || 
      fieldId.includes(sensitive)
    ) (سطر 954)
   • fieldName.includes(sensitive) (سطر 955)
   • fieldType.includes(sensitive) (سطر 956)
   • fieldId.includes(sensitive) (سطر 957)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: UserActivityTracker.isSensitiveKeyPress
🔢 الأسطر: 961-964
⚡ Async: لا
🔑 الوسائط:
   • event: KeyboardEvent
📞 الاستدعاءات:
   • ['c', 'v', 'x', 'a'].includes(event.key.toLowerCase()) (سطر 963)
   • event.key.toLowerCase() (سطر 963)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: UserActivityTracker.trackActivity
🔢 الأسطر: 967-984
⚡ Async: لا
🔑 الوسائط:
   • activityData: Partial<import("/home/administrator/Panel/client/src/lib/userActivityTracker").ActivityData>
📞 الاستدعاءات:
   • this.getBrowserInfo() (سطر 976)
   • this.queue.add(fullActivityData) (سطر 982)
   • Date.now() (سطر 983)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: UserActivityTracker.trackCustomAction
🔢 الأسطر: 986-995
⚡ Async: لا
🔑 الوسائط:
   • action: string
   • metadata: Record<string, any> | undefined
📞 الاستدعاءات:
   • this.trackActivity({
      activityType: 'click',
      targetElement: action,
      metadata: {
        customAction: action,
        ...metadata
      }
    }) (سطر 987)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: UserActivityTracker.trackSearch
🔢 الأسطر: 997-1007
⚡ Async: لا
🔑 الوسائط:
   • query: string
   • results: number | undefined
📞 الاستدعاءات:
   • this.trackActivity({
      activityType: 'search',
      value: query,
      metadata: {
        query,
        resultsCount: results,
        searchType: 'user_search'
      }
    }) (سطر 998)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: UserActivityTracker.trackFilter
🔢 الأسطر: 1009-1018
⚡ Async: لا
🔑 الوسائط:
   • filterType: string
   • filterValue: string
📞 الاستدعاءات:
   • this.trackActivity({
      activityType: 'filter',
      value: filterValue,
      metadata: {
        filterType,
        filterValue
      }
    }) (سطر 1010)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: UserActivityTracker.trackFileUpload
🔢 الأسطر: 1020-1030
⚡ Async: لا
🔑 الوسائط:
   • fileName: string
   • fileSize: number
   • fileType: string
📞 الاستدعاءات:
   • this.trackActivity({
      activityType: 'file_upload',
      value: fileName,
      metadata: {
        fileName,
        fileSize,
        fileType
      }
    }) (سطر 1021)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: UserActivityTracker.trackFileDownload
🔢 الأسطر: 1032-1041
⚡ Async: لا
🔑 الوسائط:
   • fileName: string
   • downloadUrl: string | undefined
📞 الاستدعاءات:
   • this.trackActivity({
      activityType: 'file_download',
      value: fileName,
      metadata: {
        fileName,
        downloadUrl
      }
    }) (سطر 1033)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: UserActivityTracker.flush
🔢 الأسطر: 1043-1045
⚡ Async: لا
📞 الاستدعاءات:
   • this.queue.flush() (سطر 1044)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: UserActivityTracker.getSessionId
🔢 الأسطر: 1047-1049
⚡ Async: لا
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: UserActivityTracker.getQueueSize
🔢 الأسطر: 1051-1053
⚡ Async: لا
📞 الاستدعاءات:
   • this.queue.getQueueSize() (سطر 1052)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/userActivityTracker.ts
🏷️ الدالة: UserActivityTracker.destroy
🔢 الأسطر: 1055-1068
⚡ Async: لا
📞 الاستدعاءات:
   • clearInterval(this.flushTimer) (سطر 1057)
   • this.debounceTimers.forEach(timer => clearTimeout(timer)) (سطر 1060)
   • clearTimeout(timer) (سطر 1060)
   • this.debounceTimers.clear() (سطر 1061)
   • this.trackSessionEnd() (سطر 1063)
   • this.queue.flush() (سطر 1064)
   • this.queue.clear() (سطر 1065)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/lib/utils.ts
🏷️ الدالة: cn
🔢 الأسطر: 4-6
⚡ Async: لا
🔑 الوسائط:
   • inputs: import("/home/administrator/Panel/node_modules/clsx/clsx").ClassValue[]
📞 الاستدعاءات:
   • twMerge(clsx(inputs)) (سطر 5)
   • clsx(inputs) (سطر 5)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/pages/ApplicationLogs.tsx
🏷️ الدالة: ApplicationLogs
🔢 الأسطر: 9-115
⚡ Async: لا
📞 الاستدعاءات:
   • useParams<{ id: string }>() (سطر 10)
   • useLocation() (سطر 11)
   • setLocation("/applications") (سطر 15)
   • useQuery<LogEntry[]>({
    queryKey: [`/api/applications/${id}/logs`],
    enabled: !!id,
    refetchInterval: 30000, // Refresh every 30 seconds
    staleTime: 20000, // Data is considered fresh for 20 seconds
    gcTime: 180000, // Keep in cache for 3 minutes
  }) (سطر 19)
   • useQuery<Application>({
    queryKey: [`/api/applications/${id}`],
    enabled: !!id,
    staleTime: 60000, // Data is considered fresh for 1 minute
    gcTime: 300000, // Keep in cache for 5 minutes
  }) (سطر 27)
   • logs.join('\n') (سطر 36)
   • URL.createObjectURL(blob) (سطر 38)
   • document.createElement('a') (سطر 39)
   • a.click() (سطر 42)
   • URL.revokeObjectURL(url) (سطر 43)
   • navigate(-1) (سطر 54)
   • refetch() (سطر 69)
   • logs.map((log, index) => (
                <div key={index} className="mb-1">
                  <span className="text-gray-500 mr-2">[{log.timestamp}]</span>
                  <span className="text-yellow-400 mr-2">[{log.level.toUpperCase()}]</span>
                  {log.message}
                </div>
              )) (سطر 98)
   • log.level.toUpperCase() (سطر 101)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/pages/Applications.tsx
🏷️ الدالة: Applications
🔢 الأسطر: 17-305
⚡ Async: لا
📞 الاستدعاءات:
   • useState(false) (سطر 18)
   • useState(false) (سطر 19)
   • useState<string | null>(null) (سطر 20)
   • useToast() (سطر 21)
   • useQueryClient() (سطر 22)
   • useAuth() (سطر 23)
   • usePageView('/applications', {
    pageName: 'Applications Management',
    pageType: 'management',
    requiresAuth: true
  }) (سطر 26)
   • useUserAction('applications') (سطر 33)
   • useEffect(() => {
    if (!authLoading && !isAuthenticated) {
      toast({
        title: "غير مخول",
        description: "أنت غير مسجل دخول. جاري تسجيل الدخول مرة أخرى...",
        variant: "destructive",
      });
      setTimeout(() => {
        window.location.href = "/api/login";
      }, 500);
      return;
    }
  }, [isAuthenticated, authLoading, toast]) (سطر 35)
   • toast({
        title: "غير مخول",
        description: "أنت غير مسجل دخول. جاري تسجيل الدخول مرة أخرى...",
        variant: "destructive",
      }) (سطر 37)
   • setTimeout(() => {
        window.location.href = "/api/login";
      }, 500) (سطر 42)
   • useQuery<Application[]>({
    queryKey: ["/api/applications"],
    enabled: isAuthenticated,
    refetchInterval: 60000, // Refresh every 60 seconds
    staleTime: 45000, // Data is considered fresh for 45 seconds
    gcTime: 300000, // Keep in cache for 5 minutes
  }) (سطر 49)
   • useMutation({
    mutationFn: async (id: string) => {
      // تتبع بداية عملية تشغيل التطبيق
      trackUserAction('application_start_attempt', {
        applicationId: id,
        action: 'start',
        timestamp: new Date().toISOString()
      });
      
      await apiRequest("POST", `/api/applications/${id}/start`);
    },
    onSuccess: (_, id) => {
      queryClient.invalidateQueries({ queryKey: ["/api/applications"] });
      
      // تتبع نجاح تشغيل التطبيق
      trackUserAction('application_start_success', {
        applicationId: id,
        action: 'start',
        result: 'success',
        timestamp: new Date().toISOString()
      });
      
      toast({
        title: "تم التشغيل",
        description: "تم تشغيل التطبيق بنجاح",
      });
    },
    onError: (error, id) => {
      // تتبع فشل تشغيل التطبيق
      trackUserAction('application_start_error', {
        applicationId: id,
        action: 'start',
        result: 'error',
        error: error instanceof Error ? error.message : 'Unknown error',
        timestamp: new Date().toISOString()
      });

      if (isUnauthorizedError(error)) {
        toast({
          title: "غير مخول",
          description: "أنت غير مسجل دخول. جاري تسجيل الدخول مرة أخرى...",
          variant: "destructive",
        });
        setTimeout(() => {
          window.location.href = "/api/login";
        }, 500);
        return;
      }
      const errorMessage = error instanceof Error ? error.message : "فشل في تشغيل التطبيق";
      toast({
        title: "خطأ في التشغيل",
        description: errorMessage,
        variant: "destructive",
      });
      console.error("Application start error:", error);
    },
  }) (سطر 57)
   • trackUserAction('application_start_attempt', {
        applicationId: id,
        action: 'start',
        timestamp: new Date().toISOString()
      }) (سطر 60)
   • new Date().toISOString() (سطر 63)
   • apiRequest("POST", `/api/applications/${id}/start`) (سطر 66)
   • queryClient.invalidateQueries({ queryKey: ["/api/applications"] }) (سطر 69)
   • trackUserAction('application_start_success', {
        applicationId: id,
        action: 'start',
        result: 'success',
        timestamp: new Date().toISOString()
      }) (سطر 72)
   • new Date().toISOString() (سطر 76)
   • toast({
        title: "تم التشغيل",
        description: "تم تشغيل التطبيق بنجاح",
      }) (سطر 79)
   • trackUserAction('application_start_error', {
        applicationId: id,
        action: 'start',
        result: 'error',
        error: error instanceof Error ? error.message : 'Unknown error',
        timestamp: new Date().toISOString()
      }) (سطر 86)
   • new Date().toISOString() (سطر 91)
   • isUnauthorizedError(error) (سطر 94)
   • toast({
          title: "غير مخول",
          description: "أنت غير مسجل دخول. جاري تسجيل الدخول مرة أخرى...",
          variant: "destructive",
        }) (سطر 95)
   • setTimeout(() => {
          window.location.href = "/api/login";
        }, 500) (سطر 100)
   • toast({
        title: "خطأ في التشغيل",
        description: errorMessage,
        variant: "destructive",
      }) (سطر 106)
   • console.error("Application start error:", error) (سطر 111)
   • useMutation({
    mutationFn: async (id: string) => {
      trackUserAction('application_stop_attempt', {
        applicationId: id,
        action: 'stop',
        timestamp: new Date().toISOString()
      });
      await apiRequest("POST", `/api/applications/${id}/stop`);
    },
    onSuccess: (_, id) => {
      queryClient.invalidateQueries({ queryKey: ["/api/applications"] });
      trackUserAction('application_stop_success', {
        applicationId: id,
        action: 'stop',
        result: 'success',
        timestamp: new Date().toISOString()
      });
      toast({
        title: "تم الإيقاف",
        description: "تم إيقاف التطبيق بنجاح",
      });
    },
    onError: (error, id) => {
      trackUserAction('application_stop_error', {
        applicationId: id,
        action: 'stop',
        result: 'error',
        error: error instanceof Error ? error.message : 'Unknown error',
        timestamp: new Date().toISOString()
      });
      if (isUnauthorizedError(error)) {
        toast({
          title: "غير مخول",
          description: "أنت غير مسجل دخول. جاري تسجيل الدخول مرة أخرى...",
          variant: "destructive",
        });
        setTimeout(() => {
          window.location.href = "/api/login";
        }, 500);
        return;
      }
      toast({
        title: "خطأ في الإيقاف",
        description: "فشل في إيقاف التطبيق",
        variant: "destructive",
      });
    },
  }) (سطر 115)
   • trackUserAction('application_stop_attempt', {
        applicationId: id,
        action: 'stop',
        timestamp: new Date().toISOString()
      }) (سطر 117)
   • new Date().toISOString() (سطر 120)
   • apiRequest("POST", `/api/applications/${id}/stop`) (سطر 122)
   • queryClient.invalidateQueries({ queryKey: ["/api/applications"] }) (سطر 125)
   • trackUserAction('application_stop_success', {
        applicationId: id,
        action: 'stop',
        result: 'success',
        timestamp: new Date().toISOString()
      }) (سطر 126)
   • new Date().toISOString() (سطر 130)
   • toast({
        title: "تم الإيقاف",
        description: "تم إيقاف التطبيق بنجاح",
      }) (سطر 132)
   • trackUserAction('application_stop_error', {
        applicationId: id,
        action: 'stop',
        result: 'error',
        error: error instanceof Error ? error.message : 'Unknown error',
        timestamp: new Date().toISOString()
      }) (سطر 138)
   • new Date().toISOString() (سطر 143)
   • isUnauthorizedError(error) (سطر 145)
   • toast({
          title: "غير مخول",
          description: "أنت غير مسجل دخول. جاري تسجيل الدخول مرة أخرى...",
          variant: "destructive",
        }) (سطر 146)
   • setTimeout(() => {
          window.location.href = "/api/login";
        }, 500) (سطر 151)
   • toast({
        title: "خطأ في الإيقاف",
        description: "فشل في إيقاف التطبيق",
        variant: "destructive",
      }) (سطر 156)
   • useMutation({
    mutationFn: async (id: string) => {
      trackUserAction('application_restart_attempt', {
        applicationId: id,
        action: 'restart',
        timestamp: new Date().toISOString()
      });
      await apiRequest("POST", `/api/applications/${id}/restart`);
    },
    onSuccess: (_, id) => {
      queryClient.invalidateQueries({ queryKey: ["/api/applications"] });
      trackUserAction('application_restart_success', {
        applicationId: id,
        action: 'restart',
        result: 'success',
        timestamp: new Date().toISOString()
      });
      toast({
        title: "تم إعادة التشغيل",
        description: "تم إعادة تشغيل التطبيق بنجاح",
      });
    },
    onError: (error, id) => {
      trackUserAction('application_restart_error', {
        applicationId: id,
        action: 'restart',
        result: 'error',
        error: error instanceof Error ? error.message : 'Unknown error',
        timestamp: new Date().toISOString()
      });
      if (isUnauthorizedError(error)) {
        toast({
          title: "غير مخول",
          description: "أنت غير مسجل دخول. جاري تسجيل الدخول مرة أخرى...",
          variant: "destructive",
        });
        setTimeout(() => {
          window.location.href = "/api/login";
        }, 500);
        return;
      }
      toast({
        title: "خطأ في إعادة التشغيل",
        description: "فشل في إعادة تشغيل التطبيق",
        variant: "destructive",
      });
    },
  }) (سطر 164)
   • trackUserAction('application_restart_attempt', {
        applicationId: id,
        action: 'restart',
        timestamp: new Date().toISOString()
      }) (سطر 166)
   • new Date().toISOString() (سطر 169)
   • apiRequest("POST", `/api/applications/${id}/restart`) (سطر 171)
   • queryClient.invalidateQueries({ queryKey: ["/api/applications"] }) (سطر 174)
   • trackUserAction('application_restart_success', {
        applicationId: id,
        action: 'restart',
        result: 'success',
        timestamp: new Date().toISOString()
      }) (سطر 175)
   • new Date().toISOString() (سطر 179)
   • toast({
        title: "تم إعادة التشغيل",
        description: "تم إعادة تشغيل التطبيق بنجاح",
      }) (سطر 181)
   • trackUserAction('application_restart_error', {
        applicationId: id,
        action: 'restart',
        result: 'error',
        error: error instanceof Error ? error.message : 'Unknown error',
        timestamp: new Date().toISOString()
      }) (سطر 187)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/pages/AuthPage.tsx
🏷️ الدالة: AuthPage
🔢 الأسطر: 29-234
⚡ Async: لا
📞 الاستدعاءات:
   • useState(false) (سطر 30)
   • useState(false) (سطر 31)
   • useLocation() (سطر 32)
   • useToast() (سطر 33)
   • useEffect(() => {
    const timer = setTimeout(() => setIsLoaded(true), 100);
    return () => clearTimeout(timer);
  }, []) (سطر 36)
   • setTimeout(() => setIsLoaded(true), 100) (سطر 37)
   • setIsLoaded(true) (سطر 37)
   • clearTimeout(timer) (سطر 38)
   • useForm<LoginData>({
    resolver: zodResolver(loginSchema),
    defaultValues: {
      username: "binarjoinanalytic", // القيمة الافتراضية لسهولة الاختبار
      password: "",
    },
  }) (سطر 42)
   • zodResolver(loginSchema) (سطر 43)
   • useMutation({
    mutationFn: async (credentials: LoginData) => {
      try {
        const response = await fetch("/api/login", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          credentials: "include",
          body: JSON.stringify(credentials),
        });

        if (!response.ok) {
          const errorText = await response.text();
          throw new Error(errorText || "فشل في تسجيل الدخول");
        }

        return await response.json();
      } catch (error) {
        console.error('Login error:', error);
        throw error;
      }
    },
    onSuccess: (user) => {
      console.log('Login successful:', user);
      queryClient.setQueryData(["/api/user"], user);
      queryClient.invalidateQueries({ queryKey: ["/api/user"] });
      
      toast({
        title: "تم تسجيل الدخول بنجاح",
        description: `أهلاً بك ${user.firstName || user.username}`,
      });
      
      // انتظار قصير قبل التوجيه للتأكد من تحديث البيانات
      setTimeout(() => {
        navigate("/dashboard");
      }, 100);
    },
    onError: (error: Error) => {
      console.error('Login mutation error:', error);
      toast({
        title: "خطأ في تسجيل الدخول",
        description: error.message || "فشل في تسجيل الدخول",
        variant: "destructive",
      });
    },
  }) (سطر 51)
   • fetch("/api/login", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          credentials: "include",
          body: JSON.stringify(credentials),
        }) (سطر 54)
   • JSON.stringify(credentials) (سطر 60)
   • response.text() (سطر 64)
   • response.json() (سطر 68)
   • console.error('Login error:', error) (سطر 70)
   • console.log('Login successful:', user) (سطر 75)
   • queryClient.setQueryData(["/api/user"], user) (سطر 76)
   • queryClient.invalidateQueries({ queryKey: ["/api/user"] }) (سطر 77)
   • toast({
        title: "تم تسجيل الدخول بنجاح",
        description: `أهلاً بك ${user.firstName || user.username}`,
      }) (سطر 79)
   • setTimeout(() => {
        navigate("/dashboard");
      }, 100) (سطر 85)
   • navigate("/dashboard") (سطر 86)
   • console.error('Login mutation error:', error) (سطر 90)
   • toast({
        title: "خطأ في تسجيل الدخول",
        description: error.message || "فشل في تسجيل الدخول",
        variant: "destructive",
      }) (سطر 91)
   • loginMutation.mutate(data) (سطر 100)
   • loginForm.handleSubmit(onLogin) (سطر 130)
   • loginForm.register("username") (سطر 141)
   • loginForm.register("password") (سطر 169)
   • setShowPassword(!showPassword) (سطر 181)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/pages/ComprehensiveAudit.tsx
🏷️ الدالة: ComprehensiveAudit
🔢 الأسطر: 93-544
⚡ Async: لا
📞 الاستدعاءات:
   • useToast() (سطر 94)
   • useState<AuditReport | null>(null) (سطر 95)
   • useState<string>('all') (سطر 96)
   • useMutation({
    mutationFn: async () => {
      const response = await apiRequest('POST', '/api/system/audit/comprehensive');
      return await response.json();
    },
    onSuccess: (data) => {
      if (data.success) {
        setAuditReport(data.data);
        toast({
          title: "نجح الفحص الشامل! ✅",
          description: `تم العثور على ${data.data.summary.total} مشكلة`,
        });
      } else {
        toast({
          title: "فشل الفحص",
          description: data.message,
          variant: "destructive",
        });
      }
    },
    onError: (error: any) => {
      toast({
        title: "خطأ في الفحص",
        description: error.message || "حدث خطأ أثناء تشغيل الفحص الشامل",
        variant: "destructive",
      });
    },
  }) (سطر 99)
   • apiRequest('POST', '/api/system/audit/comprehensive') (سطر 101)
   • response.json() (سطر 102)
   • setAuditReport(data.data) (سطر 106)
   • toast({
          title: "نجح الفحص الشامل! ✅",
          description: `تم العثور على ${data.data.summary.total} مشكلة`,
        }) (سطر 107)
   • toast({
          title: "فشل الفحص",
          description: data.message,
          variant: "destructive",
        }) (سطر 112)
   • toast({
        title: "خطأ في الفحص",
        description: error.message || "حدث خطأ أثناء تشغيل الفحص الشامل",
        variant: "destructive",
      }) (سطر 120)
   • toast({
      title: "بدء الفحص الشامل",
      description: "جاري فحص جميع جوانب التطبيق، قد يستغرق هذا عدة دقائق...",
    }) (سطر 129)
   • auditMutation.mutate() (سطر 133)
   • new Date().toISOString() (سطر 141)
   • JSON.stringify(reportData, null, 2) (سطر 145)
   • URL.createObjectURL(blob) (سطر 146)
   • document.createElement('a') (سطر 147)
   • new Date().toISOString().split('T') (سطر 149)
   • new Date().toISOString() (سطر 149)
   • document.body.appendChild(a) (سطر 150)
   • a.click() (سطر 151)
   • document.body.removeChild(a) (سطر 152)
   • URL.revokeObjectURL(url) (سطر 153)
   • toast({
      title: "تم تنزيل التقرير",
      description: "تم حفظ تقرير الفحص الشامل",
    }) (سطر 155)
   • auditReport?.issues.filter(issue => 
    selectedCategory === 'all' || issue.category === selectedCategory
  ) (سطر 162)
   • ['all', 'Security', 'Performance', 'Functionality', 'UI/UX', 'Deployment'].map((category) => (
                    <Button
                      key={category}
                      variant={selectedCategory === category ? 'default' : 'outline'}
                      size="sm"
                      onClick={() => setSelectedCategory(category)}
                    >
                      {getCategoryIcon(category)}
                      <span className="mr-1">
                        {category === 'all' ? 'الكل' :
                         category === 'Security' ? 'أمان' :
                         category === 'Performance' ? 'أداء' :
                         category === 'Functionality' ? 'وظائف' :
                         category === 'UI/UX' ? 'تجربة مستخدم' : 'نشر'}
                      </span>
                    </Button>
                  )) (سطر 311)
   • setSelectedCategory(category) (سطر 316)
   • getCategoryIcon(category) (سطر 318)
   • filteredIssues.map((issue) => (
                    <Card key={issue.id}>
                      <CardHeader>
                        <div className="flex items-start justify-between">
                          <div className="flex-1">
                            <div className="flex items-center gap-2 mb-2">
                              <Badge className={getSeverityColor(issue.severity)}>
                                {issue.severity}
                              </Badge>
                              <Badge variant="outline" className="text-xs">
                                {getCategoryIcon(issue.category)}
                                <span className="mr-1">{issue.category}</span>
                              </Badge>
                            </div>
                            <CardTitle className="text-lg">{issue.title}</CardTitle>
                            <p className="text-sm text-muted-foreground mt-1">
                              {issue.description}
                            </p>
                          </div>
                        </div>
                      </CardHeader>
                      <CardContent className="space-y-4">
                        {/* Reproduction Steps */}
                        {issue.reproductionSteps.length > 0 && (
                          <div>
                            <h4 className="font-medium mb-2">خطوات إعادة الإنتاج:</h4>
                            <ol className="list-decimal list-inside space-y-1 text-sm text-muted-foreground">
                              {issue.reproductionSteps.map((step, index) => (
                                <li key={index}>{step}</li>
                              ))}
                            </ol>
                          </div>
                        )}

                        {/* Affected Files */}
                        {issue.affectedFiles.length > 0 && (
                          <div>
                            <h4 className="font-medium mb-2">الملفات المتأثرة:</h4>
                            <div className="flex flex-wrap gap-1">
                              {issue.affectedFiles.map((file, index) => (
                                <Badge key={index} variant="outline" className="text-xs">
                                  {file}
                                </Badge>
                              ))}
                            </div>
                          </div>
                        )}

                        <Separator />

                        {/* Suggested Fix */}
                        <div>
                          <h4 className="font-medium mb-2">الحل المقترح:</h4>
                          <p className="text-sm bg-muted p-3 rounded">
                            {issue.suggestedFix}
                          </p>
                        </div>

                        {/* Evidence */}
                        {issue.evidence && (
                          <div>
                            <h4 className="font-medium mb-2">الأدلة:</h4>
                            {issue.evidence.outputs && (
                              <div className="space-y-2">
                                {issue.evidence.outputs.map((output, index) => (
                                  <pre key={index} className="bg-muted p-2 rounded text-xs overflow-x-auto">
                                    {output}
                                  </pre>
                                ))}
                              </div>
                            )}
                          </div>
                        )}
                      </CardContent>
                    </Card>
                  )) (سطر 333)
   • getSeverityColor(issue.severity) (سطر 339)
   • getCategoryIcon(issue.category) (سطر 343)
   • issue.reproductionSteps.map((step, index) => (
                                <li key={index}>{step}</li>
                              )) (سطر 360)
   • issue.affectedFiles.map((file, index) => (
                                <Badge key={index} variant="outline" className="text-xs">
                                  {file}
                                </Badge>
                              )) (سطر 372)
   • issue.evidence.outputs.map((output, index) => (
                                  <pre key={index} className="bg-muted p-2 rounded text-xs overflow-x-auto">
                                    {output}
                                  </pre>
                                )) (سطر 397)
   • Object.entries(auditReport.checklist).map(([item, status]) => (
                      <div key={item} className="flex items-center justify-between p-3 rounded border">
                        <span className="font-medium">{item}</span>
                        <Badge variant={status === 'PASS' ? 'default' : 'destructive'}>
                          {status === 'PASS' ? (
                            <CheckCircle2 className="h-4 w-4 mr-1" />
                          ) : (
                            <XCircle className="h-4 w-4 mr-1" />
                          )}
                          {status}
                        </Badge>
                      </div>
                    )) (سطر 429)
   • Object.entries(auditReport.checklist) (سطر 429)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/pages/ComprehensiveAudit.tsx
🏷️ الدالة: getSeverityColor
🔢 الأسطر: 61-74
⚡ Async: لا
🔑 الوسائط:
   • severity: string
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/pages/ComprehensiveAudit.tsx
🏷️ الدالة: getCategoryIcon
🔢 الأسطر: 76-91
⚡ Async: لا
🔑 الوسائط:
   • category: string
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/pages/Dashboard.tsx
🏷️ الدالة: Dashboard
🔢 الأسطر: 56-191
⚡ Async: لا
📞 الاستدعاءات:
   • useAuth() (سطر 57)
   • useToast() (سطر 58)
   • useEffect(() => {
    if (!isLoading && !isAuthenticated) {
      toast({
        title: "غير مخول",
        description: "أنت غير مسجل دخول. جاري تسجيل الدخول مرة أخرى...",
        variant: "destructive",
      });
      setTimeout(() => {
        window.location.href = "/api/login";
      }, 500);
      return;
    }
  }, [isAuthenticated, isLoading, toast]) (سطر 60)
   • toast({
        title: "غير مخول",
        description: "أنت غير مسجل دخول. جاري تسجيل الدخول مرة أخرى...",
        variant: "destructive",
      }) (سطر 62)
   • setTimeout(() => {
        window.location.href = "/api/login";
      }, 500) (سطر 67)
   • useQuery<DashboardStats>({
    queryKey: ["/api/dashboard/stats"],
    enabled: isAuthenticated,
    refetchInterval: 30000, // تحديث كل 30 ثانية بدلاً من 60
    staleTime: 25000, // البيانات طازجة لمدة 25 ثانية
    gcTime: 300000, // الاحتفاظ في الكاش لمدة 5 دقائق
    refetchOnWindowFocus: false, // منع التحديث عند التركيز على النافذة
  }) (سطر 74)
   • useQuery<Application[]>({
    queryKey: ["/api/applications"],
    enabled: isAuthenticated,
    refetchInterval: 45000, // تحديث كل 45 ثانية
    staleTime: 40000, // البيانات طازجة لمدة 40 ثانية
    gcTime: 300000, // الاحتفاظ في الكاش لمدة 5 دقائق
    refetchOnWindowFocus: false, // منع التحديث عند التركيز على النافذة
  }) (سطر 83)
   • useQuery<SystemInfo>({
    queryKey: ["/api/system/info"],
    enabled: isAuthenticated,
    refetchInterval: 180000, // تحديث كل 3 دقائق بدلاً من 2
    staleTime: 150000, // البيانات طازجة لمدة 2.5 دقيقة
    gcTime: 600000, // الاحتفاظ في الكاش لمدة 10 دقائق
    refetchOnWindowFocus: false, // منع التحديث عند التركيز على النافذة
  }) (سطر 92)
   • isUnauthorizedError(error as Error) (سطر 101)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/pages/Domains.tsx
🏷️ الدالة: Domains
🔢 الأسطر: 12-284
⚡ Async: لا
📞 الاستدعاءات:
   • useState(false) (سطر 13)
   • useState("") (سطر 14)
   • useState("") (سطر 15)
   • useToast() (سطر 16)
   • useQueryClient() (سطر 17)
   • useQuery({
    queryKey: ["/api/domains"],
    refetchInterval: 30000, // Check DNS status every 30 seconds
  }) (سطر 19)
   • useQuery({
    queryKey: ["/api/applications"],
  }) (سطر 24)
   • useMutation({
    mutationFn: async (data: { domain: string; applicationId?: string }) => {
      await apiRequest("POST", "/api/domains", data);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/domains"] });
      toast({
        title: "تم إضافة النطاق",
        description: "تم إضافة النطاق بنجاح",
      });
      setNewDomain("");
      setSelectedApp("");
      setShowAddForm(false);
    },
    onError: () => {
      toast({
        title: "خطأ في إضافة النطاق",
        description: "فشل في إضافة النطاق",
        variant: "destructive",
      });
    },
  }) (سطر 28)
   • apiRequest("POST", "/api/domains", data) (سطر 30)
   • queryClient.invalidateQueries({ queryKey: ["/api/domains"] }) (سطر 33)
   • toast({
        title: "تم إضافة النطاق",
        description: "تم إضافة النطاق بنجاح",
      }) (سطر 34)
   • setNewDomain("") (سطر 38)
   • setSelectedApp("") (سطر 39)
   • setShowAddForm(false) (سطر 40)
   • toast({
        title: "خطأ في إضافة النطاق",
        description: "فشل في إضافة النطاق",
        variant: "destructive",
      }) (سطر 43)
   • useMutation({
    mutationFn: async (domainId: string) => {
      await apiRequest("POST", `/api/domains/${domainId}/check-dns`);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/domains"] });
      toast({
        title: "تم فحص DNS",
        description: "تم فحص حالة DNS بنجاح",
      });
    },
    onError: () => {
      toast({
        title: "خطأ في فحص DNS",
        description: "فشل في فحص حالة DNS",
        variant: "destructive",
      });
    },
  }) (سطر 51)
   • apiRequest("POST", `/api/domains/${domainId}/check-dns`) (سطر 53)
   • queryClient.invalidateQueries({ queryKey: ["/api/domains"] }) (سطر 56)
   • toast({
        title: "تم فحص DNS",
        description: "تم فحص حالة DNS بنجاح",
      }) (سطر 57)
   • toast({
        title: "خطأ في فحص DNS",
        description: "فشل في فحص حالة DNS",
        variant: "destructive",
      }) (سطر 63)
   • e.preventDefault() (سطر 72)
   • newDomain.trim() (سطر 73)
   • addDomainMutation.mutate({
      domain: newDomain,
      applicationId: selectedApp || undefined,
    }) (سطر 75)
   • setShowAddForm(!showAddForm) (سطر 121)
   • setNewDomain(e.target.value) (سطر 141)
   • setSelectedApp(e.target.value) (سطر 151)
   • applications?.map((app: any) => (
                      <option key={app.id} value={app.id}>
                        {app.name}
                      </option>
                    )) (سطر 156)
   • setShowAddForm(false) (سطر 175)
   • domains?.map((domain: any) => {
            const dnsConfig = getDnsStatusConfig(domain.dnsStatus);
            const DnsIcon = dnsConfig.icon;
            
            return (
              <Card key={domain.id} className="hover:shadow-md transition-shadow" data-testid={`domain-${domain.id}`}>
                <CardContent className="p-6">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-4">
                      <div className="w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center">
                        <Globe className="w-6 h-6 text-primary" />
                      </div>
                      <div>
                        <div className="flex items-center gap-2 mb-1">
                          <h3 className="text-lg font-semibold" data-testid={`domain-name-${domain.id}`}>
                            {domain.domain}
                          </h3>
                          <a
                            href={`https://${domain.domain}`}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="text-muted-foreground hover:text-primary"
                          >
                            <ExternalLink className="w-4 h-4" />
                          </a>
                        </div>
                        <div className="flex items-center gap-4 text-sm text-muted-foreground">
                          <span>DNS Status:</span>
                          <Badge variant="outline" className={`${dnsConfig.bgClassName} ${dnsConfig.className} border-current`}>
                            <DnsIcon className="w-3 h-3 ml-1" />
                            {dnsConfig.label}
                          </Badge>
                          {domain.sslStatus && (
                            <>
                              <span>SSL:</span>
                              <Badge variant={domain.sslStatus === 'valid' ? 'default' : 'secondary'}>
                                {domain.sslStatus === 'valid' ? 'صالح' : 'غير متوفر'}
                              </Badge>
                            </>
                          )}
                        </div>
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => checkDnsMutation.mutate(domain.id)}
                        disabled={checkDnsMutation.isPending}
                        data-testid={`button-check-dns-${domain.id}`}
                      >
                        فحص DNS
                      </Button>
                      {domain.dnsStatus === 'ok' && domain.sslStatus !== 'valid' && (
                        <Button
                          size="sm"
                          onClick={() => {}} // TODO: Issue SSL certificate
                          data-testid={`button-issue-ssl-${domain.id}`}
                        >
                          إصدار SSL
                        </Button>
                      )}
                    </div>
                  </div>

                  {domain.dnsStatus !== 'ok' && (
                    <div className="mt-4 p-4 bg-muted rounded-lg">
                      <h4 className="font-medium mb-2">إعدادات DNS المطلوبة:</h4>
                      <div className="text-sm text-muted-foreground space-y-1">
                        <div>نوع السجل: <code className="bg-background px-2 py-1 rounded">A</code></div>
                        <div>الاسم: <code className="bg-background px-2 py-1 rounded">{domain.domain}</code></div>
                        <div>القيمة: <code className="bg-background px-2 py-1 rounded">93.127.142.144</code></div>
                      </div>
                    </div>
                  )}
                </CardContent>
              </Card>
            );
          }) (سطر 201)
   • getDnsStatusConfig(domain.dnsStatus) (سطر 202)
   • checkDnsMutation.mutate(domain.id) (سطر 248)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/pages/FileManager.tsx
🏷️ الدالة: FileManager
🔢 الأسطر: 143-2429
⚡ Async: لا
📞 الاستدعاءات:
   • useToast() (سطر 144)
   • useState<FileSystemMode>('real') (سطر 147)
   • useState<string | null>(null) (سطر 150)
   • useState<string>('/home/runner/workspace') (سطر 153)
   • useState<string[]>([]) (سطر 156)
   • useState<'grid' | 'list'>('grid') (سطر 157)
   • useState('') (سطر 158)
   • useState(false) (سطر 159)
   • useState(false) (سطر 160)
   • useState<string | null>(null) (سطر 161)
   • useState<'file' | 'folder'>('file') (سطر 162)
   • useState(false) (سطر 163)
   • useState<string | null>(null) (سطر 164)
   • useState(false) (سطر 165)
   • useState(false) (سطر 166)
   • useState(false) (سطر 167)
   • useState<'none' | 'name' | 'size' | 'date' | 'type'>('name') (سطر 168)
   • useState<'asc' | 'desc'>('asc') (سطر 169)
   • useState('main') (سطر 170)
   • useState(true) (سطر 171)
   • useState<'files' | 'favorites' | 'recent'>('files') (سطر 172)
   • useState<FileItem | null>(null) (سطر 175)
   • useState<string>('') (سطر 176)
   • useState(false) (سطر 177)
   • useState(false) (سطر 178)
   • useState<string | null>(null) (سطر 179)
   • useState(false) (سطر 182)
   • useRef<HTMLInputElement>(null) (سطر 183)
   • useRef(0) (سطر 184)
   • useState<BreadcrumbItem[]>([
    { id: null, name: 'الرئيسية', path: '/home/runner/workspace' }
  ]) (سطر 186)
   • useEffect(() => {
    if (fileSystemMode === 'real') {
      // Use current working directory for Replit environment
      const initialPath = '/home/runner/workspace';
      setCurrentPath(initialPath);
      setBreadcrumbs([{ id: 'root', name: 'الرئيسية', path: initialPath }]);
    } else {
      setBreadcrumbs([{ id: 'root', name: 'الرئيسية', path: '/' }]);
    }
  }, [fileSystemMode]) (سطر 191)
   • setCurrentPath(initialPath) (سطر 195)
   • setBreadcrumbs([{ id: 'root', name: 'الرئيسية', path: initialPath }]) (سطر 196)
   • setBreadcrumbs([{ id: 'root', name: 'الرئيسية', path: '/' }]) (سطر 198)
   • useQuery<DatabaseFileItem[]>({
    queryKey: ['/api/files', currentFolderId],
    enabled: fileSystemMode === 'database',
  }) (سطر 203)
   • useQuery<DirectoryListing>({
    queryKey: ['/api/real-files/browse', currentPath],
    queryFn: async () => {
      const response = await apiRequest('GET', '/api/real-files/browse', {
        path: currentPath
      });
      const result = await response.json();
      
      if (!result.success) {
        throw new Error(result.error || result.message);
      }
      
      return result.data;
    },
    enabled: fileSystemMode === 'real',
    retry: (failureCount, error: Error) => {
      // Don't retry on path validation errors
      if (error.message.includes('Path validation failed') || error.message.includes('Access denied')) {
        return false;
      }
      return failureCount < 2;
    }
  }) (سطر 209)
   • apiRequest('GET', '/api/real-files/browse', {
        path: currentPath
      }) (سطر 212)
   • response.json() (سطر 215)
   • error.message.includes('Path validation failed') (سطر 226)
   • error.message.includes('Access denied') (سطر 226)
   • useQuery<DatabaseFileItem[]>({
    queryKey: ['/api/files/search', searchQuery],
    enabled: searchQuery.length > 0 && fileSystemMode === 'database',
  }) (سطر 234)
   • useMutation({
    mutationFn: async (filePath: string) => {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout
      
      try {
        const response = await apiRequest('GET', '/api/real-files/content', {
          path: filePath
        });
        clearTimeout(timeoutId);
        const result = await response.json();
        
        if (!result.success) {
          throw new Error(result.error || result.message || 'فشل في قراءة الملف');
        }
        
        return result.data;
      } catch (error: any) {
        clearTimeout(timeoutId);
        if (error.name === 'AbortError') {
          throw new Error('انتهت مهلة الاتصال - تجاوز الطلب الوقت المحدد');
        }
        throw error;
      }
    },
    retry: (failureCount, error: Error) => {
      // Retry up to 2 times for network errors, but not for file access errors
      if (failureCount < 2 && 
          !error.message.includes('Path validation failed') && 
          !error.message.includes('Access denied') &&
          !error.message.includes('not found')) {
        return true;
      }
      return false;
    },
    retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 5000), // Exponential backoff
  }) (سطر 240)
   • setTimeout(() => controller.abort(), 30000) (سطر 243)
   • controller.abort() (سطر 243)
   • apiRequest('GET', '/api/real-files/content', {
          path: filePath
        }) (سطر 246)
   • clearTimeout(timeoutId) (سطر 249)
   • response.json() (سطر 250)
   • clearTimeout(timeoutId) (سطر 258)
   • error.message.includes('Path validation failed') (سطر 268)
   • error.message.includes('Access denied') (سطر 269)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/pages/HealthCheck.tsx
🏷️ الدالة: HealthCheck
🔢 الأسطر: 127-746
⚡ Async: لا
📞 الاستدعاءات:
   • useToast() (سطر 128)
   • useState<string>('all') (سطر 129)
   • useQuery<HealthCheckResult>({
    queryKey: ["/api/system/health-check"],
    refetchInterval: 30000, // تحديث كل 30 ثانية
  }) (سطر 137)
   • useQuery<Dependency[]>({
    queryKey: ["/api/system/dependencies"],
    refetchInterval: 60000, // تحديث كل دقيقة
  }) (سطر 147)
   • useMutation({
    mutationFn: async (dependencyName: string) => {
      const response = await apiRequest('POST', '/api/system/install-dependency', { dependencyName });
      return await response.json();
    },
    onSuccess: (data, dependencyName) => {
      if (data.success) {
        toast({
          title: "نجح التثبيت!",
          description: data.message,
        });
        // إعادة جلب البيانات
        refetchDeps();
        refetchHealth();
      } else {
        toast({
          title: "فشل التثبيت",
          description: data.message,
          variant: "destructive",
        });
      }
    },
    onError: (error: any) => {
      toast({
        title: "خطأ في التثبيت",
        description: error.message || "حدث خطأ أثناء التثبيت",
        variant: "destructive",
      });
    },
  }) (سطر 153)
   • apiRequest('POST', '/api/system/install-dependency', { dependencyName }) (سطر 155)
   • response.json() (سطر 156)
   • toast({
          title: "نجح التثبيت!",
          description: data.message,
        }) (سطر 160)
   • refetchDeps() (سطر 165)
   • refetchHealth() (سطر 166)
   • toast({
          title: "فشل التثبيت",
          description: data.message,
          variant: "destructive",
        }) (سطر 168)
   • toast({
        title: "خطأ في التثبيت",
        description: error.message || "حدث خطأ أثناء التثبيت",
        variant: "destructive",
      }) (سطر 176)
   • toast({
      title: "جاري التثبيت...",
      description: `جاري تثبيت ${displayName}، يرجى الانتظار...`,
    }) (سطر 185)
   • installMutation.mutate(dependencyName) (سطر 189)
   • refetchHealth() (سطر 193)
   • refetchDeps() (سطر 194)
   • toast({
      title: "تحديث البيانات",
      description: "جاري تحديث بيانات الفحص...",
    }) (سطر 195)
   • dependencies?.filter(dep => 
    selectedCategory === 'all' || dep.category === selectedCategory
  ) (سطر 202)
   • dependencies?.filter(dep => dep.category === 'critical' && !dep.installed) (سطر 206)
   • dependencies?.filter(dep => dep.installed) (سطر 207)
   • getStatusIcon(healthData.overall.status) (سطر 234)
   • getStatusBadgeVariant(healthData.overall.status) (سطر 242)
   • getStatusIcon(healthData.database.status) (سطر 325)
   • getStatusBadgeVariant(healthData.database.status) (سطر 326)
   • getStatusIcon(healthData.system.status) (سطر 345)
   • getStatusBadgeVariant(healthData.system.status) (سطر 346)
   • getStatusIcon(healthData.services.status) (سطر 365)
   • getStatusBadgeVariant(healthData.services.status) (سطر 366)
   • getStatusIcon(healthData.database.status) (سطر 397)
   • JSON.stringify(healthData.database.details, null, 2) (سطر 403)
   • getStatusIcon(healthData.system.status) (سطر 422)
   • getStatusIcon(healthData.services.status) (سطر 456)
   • ['all', 'critical', 'recommended', 'optional'].map((category) => (
                  <Button
                    key={category}
                    variant={selectedCategory === category ? 'default' : 'outline'}
                    size="sm"
                    onClick={() => setSelectedCategory(category)}
                  >
                    {category === 'all' ? 'الكل' :
                     category === 'critical' ? 'أساسية' :
                     category === 'recommended' ? 'موصى بها' : 'اختيارية'}
                  </Button>
                )) (سطر 493)
   • setSelectedCategory(category) (سطر 498)
   • filteredDependencies.map((dep) => (
                  <Card key={dep.name} className="relative">
                    <CardHeader className="pb-2">
                      <div className="flex items-center justify-between">
                        <CardTitle className="text-lg flex items-center gap-2">
                          <span className="text-lg">{dep.icon}</span>
                          {dep.displayName}
                        </CardTitle>
                        <div className="flex items-center gap-2">
                          <Badge 
                            variant="outline" 
                            className={`text-xs ${getCategoryColor(dep.category)}`}
                          >
                            {getCategoryIcon(dep.category)}
                            <span className="mr-1">
                              {dep.category === 'critical' ? 'أساسي' :
                               dep.category === 'recommended' ? 'موصى به' : 'اختياري'}
                            </span>
                          </Badge>
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent className="space-y-3">
                      <p className="text-sm text-muted-foreground">{dep.description}</p>
                      
                      <Separator />
                      
                      <div className="space-y-2">
                        <p className="text-sm font-medium">الغرض من هذه الأداة:</p>
                        <p className="text-sm text-muted-foreground">{dep.purpose}</p>
                      </div>

                      <div className="flex items-center gap-2">
                        {dep.installed ? (
                          <>
                            <CheckCircle2 className="h-4 w-4 text-green-500" />
                            <span className="text-sm text-green-600 font-medium">مثبت</span>
                            {dep.version && (
                              <Badge variant="outline" className="text-xs">{dep.version}</Badge>
                            )}
                          </>
                        ) : (
                          <>
                            <XCircle className="h-4 w-4 text-red-500" />
                            <span className="text-sm text-red-600 font-medium">غير مثبت</span>
                          </>
                        )}
                      </div>

                      {!dep.installed && dep.installable && (
                        <div className="pt-2">
                          <Button
                            size="sm"
                            className="w-full"
                            onClick={() => handleInstall(dep.name, dep.displayName)}
                            disabled={installMutation.isPending}
                            data-testid={`button-install-${dep.name}`}
                          >
                            {installMutation.isPending ? (
                              <>
                                <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                                جاري التثبيت...
                              </>
                            ) : (
                              <>
                                <Download className="h-4 w-4 mr-2" />
                                تثبيت الآن
                              </>
                            )}
                          </Button>
                        </div>
                      )}

                      <Tooltip>
                        <TooltipTrigger asChild>
                          <Button variant="ghost" size="sm" className="w-full">
                            <Info className="h-4 w-4 mr-2" />
                            معلومات تقنية
                          </Button>
                        </TooltipTrigger>
                        <TooltipContent side="bottom" className="max-w-sm">
                          <div className="space-y-1">
                            <p><strong>أمر الفحص:</strong> {dep.checkCommand}</p>
                            {dep.installCommand && (
                              <p><strong>أمر التثبيت:</strong> {dep.installCommand}</p>
                            )}
                          </div>
                        </TooltipContent>
                      </Tooltip>
                    </CardContent>
                  </Card>
                )) (سطر 515)
   • getCategoryColor(dep.category) (سطر 526)
   • getCategoryIcon(dep.category) (سطر 528)
   • handleInstall(dep.name, dep.displayName) (سطر 569)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/pages/HealthCheck.tsx
🏷️ الدالة: getStatusIcon
🔢 الأسطر: 73-85
⚡ Async: لا
🔑 الوسائط:
   • status: string
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/pages/HealthCheck.tsx
🏷️ الدالة: getStatusBadgeVariant
🔢 الأسطر: 87-99
⚡ Async: لا
🔑 الوسائط:
   • status: string
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/pages/HealthCheck.tsx
🏷️ الدالة: getCategoryColor
🔢 الأسطر: 101-112
⚡ Async: لا
🔑 الوسائط:
   • category: string
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/pages/HealthCheck.tsx
🏷️ الدالة: getCategoryIcon
🔢 الأسطر: 114-125
⚡ Async: لا
🔑 الوسائط:
   • category: string
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/pages/Landing.tsx
🏷️ الدالة: Landing
🔢 الأسطر: 18-215
⚡ Async: لا
📞 الاستدعاءات:
   • useLocation() (سطر 19)
   • navigate("/auth") (سطر 91)
   • stats.map((stat, index) => (
                <Card key={index} className="border-border/50">
                  <CardContent className="p-4 text-center">
                    <div className="text-2xl font-bold text-primary mb-1">
                      {stat.value}
                    </div>
                    <div className="text-sm text-muted-foreground">
                      {stat.label}
                    </div>
                  </CardContent>
                </Card>
              )) (سطر 106)
   • features.map((feature, index) => (
              <Card key={index} className="border-border/50 hover:border-primary/50 transition-colors">
                <CardHeader>
                  <div className="w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mb-4">
                    <feature.icon className="w-6 h-6 text-primary" />
                  </div>
                  <CardTitle className="text-xl">{feature.title}</CardTitle>
                  <CardDescription className="text-base">
                    {feature.description}
                  </CardDescription>
                </CardHeader>
              </Card>
            )) (سطر 136)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/pages/Logs.tsx
🏷️ الدالة: Logs
🔢 الأسطر: 65-504
⚡ Async: لا
📞 الاستدعاءات:
   • useState("all") (سطر 66)
   • useState("all") (سطر 67)
   • useState("all") (سطر 68)
   • useState("") (سطر 69)
   • useState("all") (سطر 70)
   • useState("all") (سطر 71)
   • useState("") (سطر 72)
   • useState(false) (سطر 73)
   • useState<LogEntry[]>([]) (سطر 74)
   • useState(false) (سطر 75)
   • useToast() (سطر 77)
   • useAuth() (سطر 78)
   • useWebSocket() (سطر 79)
   • useEffect(() => {
    setComponentMounted(true);
    return () => {
      setComponentMounted(false);
    };
  }, []) (سطر 82)
   • setComponentMounted(true) (سطر 83)
   • setComponentMounted(false) (سطر 85)
   • useEffect(() => {
    if (!componentMounted) return;
    
    if (!authLoading && !isAuthenticated) {
      toast({
        title: "غير مخول",
        description: "أنت غير مسجل دخول. جاري تسجيل الدخول مرة أخرى...",
        variant: "destructive",
      });
      
      const timeoutId = setTimeout(() => {
        if (typeof window !== 'undefined') {
          window.location.href = "/api/login";
        }
      }, 500);
      
      return () => clearTimeout(timeoutId);
    }
  }, [isAuthenticated, authLoading, toast, componentMounted]) (سطر 90)
   • toast({
        title: "غير مخول",
        description: "أنت غير مسجل دخول. جاري تسجيل الدخول مرة أخرى...",
        variant: "destructive",
      }) (سطر 94)
   • setTimeout(() => {
        if (typeof window !== 'undefined') {
          window.location.href = "/api/login";
        }
      }, 500) (سطر 100)
   • clearTimeout(timeoutId) (سطر 106)
   • useEffect(() => {
    if (!componentMounted || !lastMessage) return;
    
    try {
      if (lastMessage.type === 'LOG_ENTRY' && isLiveTail && lastMessage.data) {
        const logEntry = lastMessage.data as LogEntry;
        setLiveLogs(prev => [logEntry, ...prev.slice(0, 99)]); // Keep last 100 entries
      }
    } catch (error) {
      console.warn('Error processing WebSocket message:', error);
    }
  }, [lastMessage, isLiveTail, componentMounted]) (سطر 111)
   • setLiveLogs(prev => [logEntry, ...prev.slice(0, 99)]) (سطر 117)
   • prev.slice(0, 99) (سطر 117)
   • console.warn('Error processing WebSocket message:', error) (سطر 120)
   • useQuery({
    queryKey: ["/api/applications"],
    enabled: isAuthenticated,
  }) (سطر 124)
   • useQuery({
    queryKey: ["/api/logs", { 
      source: sourceFilter !== "all" ? sourceFilter : undefined,
      level: levelFilter !== "all" ? levelFilter : undefined,
      applicationId: selectedApp || undefined,
      limit: 100
    }],
    enabled: isAuthenticated,
    refetchInterval: isLiveTail ? 5000 : false,
  }) (سطر 129)
   • useQuery({
    queryKey: ["/api/logs/nginx"],
    enabled: isAuthenticated && activeTab === "nginx",
    retry: 1,
    retryOnMount: false
  }) (سطر 140)
   • useQuery({
    queryKey: ["/api/logs/system"], 
    enabled: isAuthenticated && activeTab === "system",
    retry: 1,
    retryOnMount: false
  }) (سطر 147)
   • useQuery({
    queryKey: ["/api/frontend-errors", { 
      type: errorTypeFilter !== "all" ? errorTypeFilter : undefined,
      limit: 100
    }],
    enabled: isAuthenticated && activeTab === "errors",
    retry: 1
  }) (سطر 154)
   • useQuery({
    queryKey: ["/api/user-activities", {
      action: activityFilter !== "all" ? activityFilter : undefined,
      limit: 100
    }],
    enabled: isAuthenticated && activeTab === "activities",
    retry: 1
  }) (سطر 163)
   • isUnauthorizedError(error as Error) (سطر 172)
   • isUnauthorizedError(error as Error) (سطر 177)
   • console.warn("Logs error:", error) (سطر 178)
   • level.toLowerCase() (سطر 193)
   • level.toLowerCase() (سطر 209)
   • (isLiveTail ? liveLogs : Array.isArray(logs) ? logs : []).filter((log: LogEntry) => {
    if (searchQuery && !log.message.toLowerCase().includes(searchQuery.toLowerCase())) {
      return false;
    }
    return true;
  }) (سطر 239)
   • Array.isArray(logs) (سطر 239)
   • log.message.toLowerCase().includes(searchQuery.toLowerCase()) (سطر 240)
   • log.message.toLowerCase() (سطر 240)
   • searchQuery.toLowerCase() (سطر 240)
   • [...Array(10)].map((_, i) => (
            <div key={i} className="flex items-start gap-3 p-4 border border-border rounded-lg">
              <Skeleton className="w-4 h-4 rounded mt-1" />
              <div className="flex-1 space-y-2">
                <div className="flex items-center gap-2">
                  <Skeleton className="h-4 w-16" />
                  <Skeleton className="h-4 w-20" />
                  <Skeleton className="h-4 w-24" />
                </div>
                <Skeleton className="h-4 w-full" />
                <Skeleton className="h-3 w-32" />
              </div>
            </div>
          )) (سطر 250)
   • Array(10) (سطر 250)
   • logsList.map((log, index) => (
          <div 
            key={`${log.timestamp}-${index}`}
            className="flex items-start gap-3 p-4 border border-border rounded-lg hover:bg-accent transition-colors"
            data-testid={`log-entry-${index}`}
          >
            {getLevelIcon(log.level)}
            <div className="flex-1 min-w-0">
              <div className="flex items-center gap-2 mb-2">
                {getLevelBadge(log.level)}
                {getSourceBadge(log.source)}
                <span className="text-sm text-muted-foreground">
                  {formatDistanceToNow(new Date(log.timestamp), { addSuffix: true, locale: ar })}
                </span>
              </div>
              <p className="text-sm leading-relaxed break-words" data-testid={`log-message-${index}`}>
                {log.message}
              </p>
              <p className="text-xs text-muted-foreground mt-1">
                {new Date(log.timestamp).toLocaleString('ar-SA')}
              </p>
            </div>
          </div>
        )) (سطر 280)
   • getLevelIcon(log.level) (سطر 286)
   • getLevelBadge(log.level) (سطر 289)
   • getSourceBadge(log.source) (سطر 290)
   • formatDistanceToNow(new Date(log.timestamp), { addSuffix: true, locale: ar }) (سطر 292)
   • new Date(log.timestamp).toLocaleString('ar-SA') (سطر 299)
   • setIsLiveTail(!isLiveTail) (سطر 319)
   • refetch() (سطر 328)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/pages/Nginx.tsx
🏷️ الدالة: Nginx
🔢 الأسطر: 23-348
⚡ Async: لا
📞 الاستدعاءات:
   • useState<any>(null) (سطر 24)
   • useState("") (سطر 25)
   • useState(false) (سطر 26)
   • useToast() (سطر 27)
   • useQueryClient() (سطر 28)
   • useQuery<any[]>({
    queryKey: ["/api/nginx/configs"],
  }) (سطر 30)
   • useMutation({
    mutationFn: async (content: string) => {
      const response = await apiRequest("POST", "/api/nginx/test", { content });
      return response.json();
    },
    onSuccess: (data) => {
      if (data.success) {
        toast({
          title: "تم اختبار التكوين",
          description: "تكوين Nginx صالح",
        });
      } else {
        toast({
          title: "خطأ في التكوين",
          description: data.error,
          variant: "destructive",
        });
      }
    },
    onError: () => {
      toast({
        title: "خطأ في الاختبار",
        description: "فشل في اختبار تكوين Nginx",
        variant: "destructive",
      });
    },
  }) (سطر 34)
   • apiRequest("POST", "/api/nginx/test", { content }) (سطر 36)
   • response.json() (سطر 37)
   • toast({
          title: "تم اختبار التكوين",
          description: "تكوين Nginx صالح",
        }) (سطر 41)
   • toast({
          title: "خطأ في التكوين",
          description: data.error,
          variant: "destructive",
        }) (سطر 46)
   • toast({
        title: "خطأ في الاختبار",
        description: "فشل في اختبار تكوين Nginx",
        variant: "destructive",
      }) (سطر 54)
   • useMutation({
    mutationFn: async () => {
      await apiRequest("POST", "/api/nginx/reload");
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/nginx/configs"] });
      toast({
        title: "تم إعادة تحميل Nginx",
        description: "تم إعادة تحميل تكوين Nginx بنجاح",
      });
    },
    onError: () => {
      toast({
        title: "خطأ في إعادة التحميل",
        description: "فشل في إعادة تحميل Nginx",
        variant: "destructive",
      });
    },
  }) (سطر 62)
   • apiRequest("POST", "/api/nginx/reload") (سطر 64)
   • queryClient.invalidateQueries({ queryKey: ["/api/nginx/configs"] }) (سطر 67)
   • toast({
        title: "تم إعادة تحميل Nginx",
        description: "تم إعادة تحميل تكوين Nginx بنجاح",
      }) (سطر 68)
   • toast({
        title: "خطأ في إعادة التحميل",
        description: "فشل في إعادة تحميل Nginx",
        variant: "destructive",
      }) (سطر 74)
   • useMutation({
    mutationFn: async (data: { content: string; configPath: string; applicationId: string }) => {
      await apiRequest("POST", "/api/nginx/configs", {
        ...data,
        enabled: true,
      });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/nginx/configs"] });
      toast({
        title: "تم حفظ التكوين",
        description: "تم حفظ تكوين Nginx بنجاح",
      });
      setIsEditing(false);
    },
    onError: () => {
      toast({
        title: "خطأ في الحفظ",
        description: "فشل في حفظ تكوين Nginx",
        variant: "destructive",
      });
    },
  }) (سطر 82)
   • apiRequest("POST", "/api/nginx/configs", {
        ...data,
        enabled: true,
      }) (سطر 84)
   • queryClient.invalidateQueries({ queryKey: ["/api/nginx/configs"] }) (سطر 90)
   • toast({
        title: "تم حفظ التكوين",
        description: "تم حفظ تكوين Nginx بنجاح",
      }) (سطر 91)
   • setIsEditing(false) (سطر 95)
   • toast({
        title: "خطأ في الحفظ",
        description: "فشل في حفظ تكوين Nginx",
        variant: "destructive",
      }) (سطر 98)
   • setSelectedConfig(config) (سطر 107)
   • setEditingConfig(config.content) (سطر 108)
   • setIsEditing(true) (سطر 109)
   • testConfigMutation.mutate(editingConfig) (سطر 113)
   • saveConfigMutation.mutate({
      content: editingConfig,
      configPath: selectedConfig.configPath,
      applicationId: selectedConfig.applicationId,
    }) (سطر 118)
   • testConfigMutation.mutate("") (سطر 160)
   • reloadNginxMutation.mutate() (سطر 168)
   • [...Array(3)].map((_, i) => (
                <Card key={i}>
                  <CardContent className="p-6">
                    <div className="flex items-center justify-between">
                      <div className="space-y-2">
                        <Skeleton className="h-5 w-48" />
                        <Skeleton className="h-4 w-32" />
                      </div>
                      <div className="flex gap-2">
                        <Skeleton className="h-8 w-16" />
                        <Skeleton className="h-8 w-16" />
                      </div>
                    </div>
                  </CardContent>
                </Card>
              )) (سطر 187)
   • Array(3) (سطر 187)
   • configs?.map((config: any) => (
                <Card key={config.id} className="hover:shadow-md transition-shadow" data-testid={`config-${config.id}`}>
                  <CardContent className="p-6">
                    <div className="flex items-center justify-between">
                      <div>
                        <div className="flex items-center gap-2 mb-2">
                          <h3 className="text-lg font-semibold" data-testid={`config-path-${config.id}`}>
                            {config.configPath}
                          </h3>
                          {getStatusBadge(config)}
                        </div>
                        <div className="text-sm text-muted-foreground space-y-1">
                          {config.lastTest && (
                            <p>آخر اختبار: {new Date(config.lastTest).toLocaleDateString('ar-SA')}</p>
                          )}
                          {config.testResult && (
                            <p>نتيجة الاختبار: 
                              <span className={`mr-1 ${config.testResult === 'passed' ? 'text-green-500' : 'text-red-500'}`}>
                                {config.testResult === 'passed' ? 'نجح' : 'فشل'}
                              </span>
                            </p>
                          )}
                        </div>
                      </div>
                      
                      <div className="flex items-center gap-2">
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => setSelectedConfig(config)}
                          data-testid={`button-view-${config.id}`}
                        >
                          <Eye className="w-4 h-4" />
                          عرض
                        </Button>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => handleEditConfig(config)}
                          data-testid={`button-edit-${config.id}`}
                        >
                          <Edit className="w-4 h-4" />
                          تعديل
                        </Button>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => {}} // TODO: Download config
                          data-testid={`button-download-${config.id}`}
                        >
                          <Download className="w-4 h-4" />
                          تحميل
                        </Button>
                      </div>
                    </div>

                    {selectedConfig?.id === config.id && !isEditing && (
                      <div className="mt-4 p-4 bg-muted rounded-lg">
                        <h4 className="font-medium mb-2">محتوى التكوين:</h4>
                        <pre className="text-sm bg-background p-4 rounded border overflow-auto max-h-64">
                          {config.content}
                        </pre>
                      </div>
                    )}
                  </CardContent>
                </Card>
              )) (سطر 214)
   • getStatusBadge(config) (سطر 223)
   • new Date(config.lastTest).toLocaleDateString('ar-SA') (سطر 227)
   • setSelectedConfig(config) (سطر 243)
   • handleEditConfig(config) (سطر 252)
   • setEditingConfig(e.target.value) (سطر 317)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/pages/not-found.tsx
🏷️ الدالة: NotFound
🔢 الأسطر: 4-21
⚡ Async: لا
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/pages/PathManager.tsx
🏷️ الدالة: PathManager
🔢 الأسطر: 85-619
⚡ Async: لا
📞 الاستدعاءات:
   • useToast() (سطر 86)
   • useState("") (سطر 87)
   • useState<"all" | "allowed" | "blocked">("all") (سطر 88)
   • useState(false) (سطر 89)
   • useState(false) (سطر 90)
   • useState(false) (سطر 91)
   • useState<AllowedPath | null>(null) (سطر 92)
   • useState<AllowedPath | null>(null) (سطر 93)
   • useForm<PathFormData>({
    resolver: zodResolver(pathFormSchema),
    defaultValues: {
      path: "",
      type: "allowed",
      description: "",
      isActive: true,
    },
  }) (سطر 96)
   • zodResolver(pathFormSchema) (سطر 97)
   • useQuery<AllowedPath[]>({
    queryKey: ['/api/admin/paths', typeFilter === "all" ? undefined : typeFilter],
    queryFn: async () => {
      const queryParams = typeFilter !== "all" ? `?type=${typeFilter}` : "";
      const response = await fetch(`/api/admin/paths${queryParams}`, {
        credentials: 'include',
      });
      if (!response.ok) {
        throw new Error('Failed to fetch paths');
      }
      return response.json();
    },
  }) (سطر 107)
   • fetch(`/api/admin/paths${queryParams}`, {
        credentials: 'include',
      }) (سطر 111)
   • response.json() (سطر 117)
   • useMutation({
    mutationFn: async (data: PathFormData) => {
      const response = await apiRequest('POST', '/api/admin/paths', data);
      return await response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/admin/paths'] });
      toast({
        title: "تم إنشاء المسار",
        description: "تم إنشاء المسار بنجاح",
      });
      setIsCreateModalOpen(false);
      form.reset();
    },
    onError: (error) => {
      toast({
        title: "خطأ",
        description: "فشل في إنشاء المسار",
        variant: "destructive"
      });
    }
  }) (سطر 122)
   • apiRequest('POST', '/api/admin/paths', data) (سطر 124)
   • response.json() (سطر 125)
   • queryClient.invalidateQueries({ queryKey: ['/api/admin/paths'] }) (سطر 128)
   • toast({
        title: "تم إنشاء المسار",
        description: "تم إنشاء المسار بنجاح",
      }) (سطر 129)
   • setIsCreateModalOpen(false) (سطر 133)
   • form.reset() (سطر 134)
   • toast({
        title: "خطأ",
        description: "فشل في إنشاء المسار",
        variant: "destructive"
      }) (سطر 137)
   • useMutation({
    mutationFn: async ({ id, data }: { id: string; data: Partial<PathFormData> }) => {
      const response = await apiRequest('PUT', `/api/admin/paths/${id}`, data);
      return await response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/admin/paths'] });
      toast({
        title: "تم تحديث المسار",
        description: "تم تحديث المسار بنجاح",
      });
      setIsEditModalOpen(false);
      setEditingPath(null);
      form.reset();
    },
    onError: (error) => {
      toast({
        title: "خطأ",
        description: "فشل في تحديث المسار",
        variant: "destructive"
      });
    }
  }) (سطر 146)
   • apiRequest('PUT', `/api/admin/paths/${id}`, data) (سطر 148)
   • response.json() (سطر 149)
   • queryClient.invalidateQueries({ queryKey: ['/api/admin/paths'] }) (سطر 152)
   • toast({
        title: "تم تحديث المسار",
        description: "تم تحديث المسار بنجاح",
      }) (سطر 153)
   • setIsEditModalOpen(false) (سطر 157)
   • setEditingPath(null) (سطر 158)
   • form.reset() (سطر 159)
   • toast({
        title: "خطأ",
        description: "فشل في تحديث المسار",
        variant: "destructive"
      }) (سطر 162)
   • useMutation({
    mutationFn: async (id: string) => {
      const response = await apiRequest('DELETE', `/api/admin/paths/${id}`);
      return await response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/admin/paths'] });
      toast({
        title: "تم حذف المسار",
        description: "تم حذف المسار بنجاح",
      });
      setIsDeleteDialogOpen(false);
      setPathToDelete(null);
    },
    onError: (error) => {
      toast({
        title: "خطأ",
        description: "فشل في حذف المسار",
        variant: "destructive"
      });
    }
  }) (سطر 171)
   • apiRequest('DELETE', `/api/admin/paths/${id}`) (سطر 173)
   • response.json() (سطر 174)
   • queryClient.invalidateQueries({ queryKey: ['/api/admin/paths'] }) (سطر 177)
   • toast({
        title: "تم حذف المسار",
        description: "تم حذف المسار بنجاح",
      }) (سطر 178)
   • setIsDeleteDialogOpen(false) (سطر 182)
   • setPathToDelete(null) (سطر 183)
   • toast({
        title: "خطأ",
        description: "فشل في حذف المسار",
        variant: "destructive"
      }) (سطر 186)
   • useMutation({
    mutationFn: async ({ id, isActive }: { id: string; isActive: boolean }) => {
      const response = await apiRequest('PUT', `/api/admin/paths/${id}`, { isActive });
      return await response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/admin/paths'] });
      toast({
        title: "تم تحديث الحالة",
        description: "تم تحديث حالة المسار بنجاح",
      });
    },
    onError: (error) => {
      toast({
        title: "خطأ",
        description: "فشل في تحديث حالة المسار",
        variant: "destructive"
      });
    }
  }) (سطر 195)
   • apiRequest('PUT', `/api/admin/paths/${id}`, { isActive }) (سطر 197)
   • response.json() (سطر 198)
   • queryClient.invalidateQueries({ queryKey: ['/api/admin/paths'] }) (سطر 201)
   • toast({
        title: "تم تحديث الحالة",
        description: "تم تحديث حالة المسار بنجاح",
      }) (سطر 202)
   • toast({
        title: "خطأ",
        description: "فشل في تحديث حالة المسار",
        variant: "destructive"
      }) (سطر 208)
   • paths.filter(path => {
    const matchesSearch = searchQuery === "" || 
      path.path.toLowerCase().includes(searchQuery.toLowerCase()) ||
      (path.description && path.description.toLowerCase().includes(searchQuery.toLowerCase()));
    
    return matchesSearch;
  }) (سطر 217)
   • path.path.toLowerCase().includes(searchQuery.toLowerCase()) (سطر 219)
   • path.path.toLowerCase() (سطر 219)
   • searchQuery.toLowerCase() (سطر 219)
   • path.description.toLowerCase().includes(searchQuery.toLowerCase()) (سطر 220)
   • path.description.toLowerCase() (سطر 220)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/pages/Processes.tsx
🏷️ الدالة: Processes
🔢 الأسطر: 16-312
⚡ Async: لا
📞 الاستدعاءات:
   • useQuery({
    queryKey: ["/api/system/processes"],
    refetchInterval: 5000, // Refresh every 5 seconds
  }) (سطر 17)
   • useQuery({
    queryKey: ["/api/system/info"],
    refetchInterval: 10000, // Refresh every 10 seconds
  }) (سطر 22)
   • Math.floor(seconds / 86400) (سطر 28)
   • Math.floor((seconds % 86400) / 3600) (سطر 29)
   • Math.floor((seconds % 3600) / 60) (سطر 30)
   • (mb / 1024).toFixed(1) (سطر 44)
   • mb.toFixed(1) (سطر 46)
   • status.toLowerCase() (سطر 50)
   • refetch() (سطر 77)
   • formatUptime(systemInfo.uptime) (سطر 101)
   • systemInfo?.loadAverage?.[0]?.toFixed(2) (سطر 122)
   • [...Array(10)].map((_, i) => (
                  <div key={i} className="flex items-center justify-between">
                    <div className="space-y-2">
                      <Skeleton className="h-4 w-24" />
                      <Skeleton className="h-3 w-32" />
                    </div>
                    <div className="flex gap-4">
                      <Skeleton className="h-4 w-12" />
                      <Skeleton className="h-4 w-12" />
                      <Skeleton className="h-4 w-16" />
                    </div>
                  </div>
                )) (سطر 178)
   • Array(10) (سطر 178)
   • processes?.map((process: any) => (
                    <TableRow key={process.pid} data-testid={`process-${process.pid}`}>
                      <TableCell className="font-mono">{process.pid}</TableCell>
                      <TableCell>
                        <div>
                          <p className="font-medium">{process.name}</p>
                          {process.command && (
                            <p className="text-sm text-muted-foreground truncate max-w-xs">
                              {process.command}
                            </p>
                          )}
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          <div className={`w-2 h-2 rounded-full ${
                            process.cpu > 50 ? 'bg-red-500' : 
                            process.cpu > 20 ? 'bg-yellow-500' : 'bg-green-500'
                          }`} />
                          {process.cpu?.toFixed(1)}%
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          <div className={`w-2 h-2 rounded-full ${
                            process.memory > 10 ? 'bg-red-500' : 
                            process.memory > 5 ? 'bg-yellow-500' : 'bg-green-500'
                          }`} />
                          {process.memory?.toFixed(1)}%
                        </div>
                      </TableCell>
                      <TableCell>
                        {getStatusBadge(process.status)}
                      </TableCell>
                    </TableRow>
                  )) (سطر 212)
   • process.cpu?.toFixed(1) (سطر 231)
   • process.memory?.toFixed(1) (سطر 240)
   • getStatusBadge(process.status) (سطر 244)
   • systemInfo.loadAverage?.[0]?.toFixed(2) (سطر 290)
   • systemInfo.loadAverage?.[1]?.toFixed(2) (سطر 294)
   • systemInfo.loadAverage?.[2]?.toFixed(2) (سطر 298)
   • formatUptime(systemInfo.uptime) (سطر 302)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/pages/SSL.tsx
🏷️ الدالة: SSL
🔢 الأسطر: 11-316
⚡ Async: لا
📞 الاستدعاءات:
   • useToast() (سطر 12)
   • useQueryClient() (سطر 13)
   • useQuery({
    queryKey: ["/api/ssl-certificates"],
    refetchInterval: 60000, // Check every minute
  }) (سطر 15)
   • useQuery({
    queryKey: ["/api/domains"],
  }) (سطر 20)
   • useMutation({
    mutationFn: async (domainId: string) => {
      await apiRequest("POST", "/api/ssl-certificates", { domainId });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/ssl-certificates"] });
      queryClient.invalidateQueries({ queryKey: ["/api/domains"] });
      toast({
        title: "تم إصدار الشهادة",
        description: "تم إصدار شهادة SSL بنجاح",
      });
    },
    onError: () => {
      toast({
        title: "خطأ في إصدار الشهادة",
        description: "فشل في إصدار شهادة SSL",
        variant: "destructive",
      });
    },
  }) (سطر 24)
   • apiRequest("POST", "/api/ssl-certificates", { domainId }) (سطر 26)
   • queryClient.invalidateQueries({ queryKey: ["/api/ssl-certificates"] }) (سطر 29)
   • queryClient.invalidateQueries({ queryKey: ["/api/domains"] }) (سطر 30)
   • toast({
        title: "تم إصدار الشهادة",
        description: "تم إصدار شهادة SSL بنجاح",
      }) (سطر 31)
   • toast({
        title: "خطأ في إصدار الشهادة",
        description: "فشل في إصدار شهادة SSL",
        variant: "destructive",
      }) (سطر 37)
   • useMutation({
    mutationFn: async (certificateId: string) => {
      // TODO: Implement certificate renewal API
      await apiRequest("POST", `/api/ssl-certificates/${certificateId}/renew`);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/ssl-certificates"] });
      toast({
        title: "تم تجديد الشهادة",
        description: "تم تجديد شهادة SSL بنجاح",
      });
    },
    onError: () => {
      toast({
        title: "خطأ في التجديد",
        description: "فشل في تجديد شهادة SSL",
        variant: "destructive",
      });
    },
  }) (سطر 45)
   • apiRequest("POST", `/api/ssl-certificates/${certificateId}/renew`) (سطر 48)
   • queryClient.invalidateQueries({ queryKey: ["/api/ssl-certificates"] }) (سطر 51)
   • toast({
        title: "تم تجديد الشهادة",
        description: "تم تجديد شهادة SSL بنجاح",
      }) (سطر 52)
   • toast({
        title: "خطأ في التجديد",
        description: "فشل في تجديد شهادة SSL",
        variant: "destructive",
      }) (سطر 58)
   • Math.floor((expiryDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24)) (سطر 69)
   • expiryDate.getTime() (سطر 69)
   • now.getTime() (سطر 69)
   • domains?.filter((domain: any) => 
    domain.dnsStatus === 'ok' && 
    !certificates?.some((cert: any) => cert.domainId === domain.id)
  ) (سطر 106)
   • certificates?.some((cert: any) => cert.domainId === domain.id) (سطر 108)
   • certificates?.filter((cert: any) => cert.status === 'valid') (سطر 129)
   • certificates?.filter((cert: any) => {
                    const daysUntilExpiry = cert.expiresAt ? 
                      Math.floor((new Date(cert.expiresAt).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24)) : 0;
                    return daysUntilExpiry <= 30 && daysUntilExpiry > 0;
                  }) (سطر 143)
   • Math.floor((new Date(cert.expiresAt).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24)) (سطر 145)
   • new Date(cert.expiresAt).getTime() (سطر 145)
   • new Date().getTime() (سطر 145)
   • certificates?.filter((cert: any) => {
                    const daysUntilExpiry = cert.expiresAt ? 
                      Math.floor((new Date(cert.expiresAt).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24)) : 0;
                    return daysUntilExpiry <= 0;
                  }) (سطر 161)
   • Math.floor((new Date(cert.expiresAt).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24)) (سطر 163)
   • new Date(cert.expiresAt).getTime() (سطر 163)
   • new Date().getTime() (سطر 163)
   • domainsWithoutSSL.map((domain: any) => (
                <div key={domain.id} className="flex items-center justify-between p-4 border border-border rounded-lg">
                  <div>
                    <p className="font-medium">{domain.domain}</p>
                    <p className="text-sm text-muted-foreground">DNS متصل بشكل صحيح</p>
                  </div>
                  <Button
                    onClick={() => issueCertificateMutation.mutate(domain.id)}
                    disabled={issueCertificateMutation.isPending}
                    data-testid={`button-issue-ssl-${domain.id}`}
                  >
                    {issueCertificateMutation.isPending ? "جاري الإصدار..." : "إصدار شهادة SSL"}
                  </Button>
                </div>
              )) (سطر 196)
   • issueCertificateMutation.mutate(domain.id) (سطر 203)
   • certificates?.map((certificate: any) => {
            const statusConfig = getStatusConfig(certificate.status, certificate.expiresAt);
            const StatusIcon = statusConfig.icon;
            const domain = domains?.find((d: any) => d.id === certificate.domainId);

            return (
              <Card key={certificate.id} className="hover:shadow-md transition-shadow" data-testid={`certificate-${certificate.id}`}>
                <CardContent className="p-6">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-4">
                      <div className={`w-12 h-12 rounded-lg flex items-center justify-center ${statusConfig.bgClassName}`}>
                        <StatusIcon className={`w-6 h-6 ${statusConfig.className}`} />
                      </div>
                      <div>
                        <div className="flex items-center gap-2 mb-1">
                          <h3 className="text-lg font-semibold" data-testid={`certificate-domain-${certificate.id}`}>
                            {domain?.domain || 'نطاق محذوف'}
                          </h3>
                          <Badge variant={statusConfig.variant} className="text-xs">
                            {statusConfig.label}
                          </Badge>
                        </div>
                        <div className="flex items-center gap-4 text-sm text-muted-foreground">
                          <span className="flex items-center gap-1">
                            <Calendar className="w-4 h-4" />
                            المُصدِر: {certificate.issuer}
                          </span>
                          {certificate.expiresAt && (
                            <span>
                              تنتهي: {formatDistanceToNow(new Date(certificate.expiresAt), { 
                                addSuffix: true, 
                                locale: ar 
                              })}
                            </span>
                          )}
                        </div>
                      </div>
                    </div>
                    
                    <div className="flex items-center gap-2">
                      {certificate.status === 'valid' && (
                        <>
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => {}} // TODO: Download certificate
                            data-testid={`button-download-${certificate.id}`}
                          >
                            <Download className="w-4 h-4 ml-2" />
                            تحميل
                          </Button>
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => renewCertificateMutation.mutate(certificate.id)}
                            disabled={renewCertificateMutation.isPending}
                            data-testid={`button-renew-${certificate.id}`}
                          >
                            <RefreshCw className="w-4 h-4 ml-2" />
                            تجديد
                          </Button>
                        </>
                      )}
                    </div>
                  </div>

                  {certificate.certPath && (
                    <div className="mt-4 p-4 bg-muted rounded-lg">
                      <h4 className="font-medium mb-2">مسارات الملفات:</h4>
                      <div className="text-sm text-muted-foreground space-y-1">
                        <div>الشهادة: <code className="bg-background px-2 py-1 rounded">{certificate.certPath}</code></div>
                        {certificate.keyPath && (
                          <div>المفتاح: <code className="bg-background px-2 py-1 rounded">{certificate.keyPath}</code></div>
                        )}
                      </div>
                    </div>
                  )}
                </CardContent>
              </Card>
            );
          }) (سطر 231)
   • getStatusConfig(certificate.status, certificate.expiresAt) (سطر 232)
   • domains?.find((d: any) => d.id === certificate.domainId) (سطر 234)
   • formatDistanceToNow(new Date(certificate.expiresAt), { 
                                addSuffix: true, 
                                locale: ar 
                              }) (سطر 260)
   • renewCertificateMutation.mutate(certificate.id) (سطر 285)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/pages/Terminal.tsx
🏷️ الدالة: Terminal
🔢 الأسطر: 56-511
⚡ Async: لا
📞 الاستدعاءات:
   • useState("") (سطر 57)
   • useState<TerminalOutput[]>([]) (سطر 58)
   • useState<string[]>([]) (سطر 59)
   • useState(-1) (سطر 60)
   • useState(false) (سطر 61)
   • useState(false) (سطر 62)
   • useRef<HTMLInputElement>(null) (سطر 63)
   • useRef<HTMLDivElement>(null) (سطر 64)
   • useRef<string>("") (سطر 65)
   • useToast() (سطر 67)
   • useAuth() (سطر 68)
   • useWebSocket() (سطر 69)
   • useEffect(() => {
    if (outputRef.current) {
      outputRef.current.scrollTop = outputRef.current.scrollHeight;
    }
  }, [history]) (سطر 72)
   • useEffect(() => {
    if (!authLoading && !authStatus) {
      toast({
        title: "غير مخول",
        description: "أنت غير مسجل دخول. جاري تسجيل الدخول مرة أخرى...",
        variant: "destructive",
      });
      setTimeout(() => {
        window.location.href = "/api/login";
      }, 500);
      return;
    }
  }, [authStatus, authLoading, toast]) (سطر 79)
   • toast({
        title: "غير مخول",
        description: "أنت غير مسجل دخول. جاري تسجيل الدخول مرة أخرى...",
        variant: "destructive",
      }) (سطر 81)
   • setTimeout(() => {
        window.location.href = "/api/login";
      }, 500) (سطر 86)
   • useEffect(() => {
    if (isConnected && authStatus && !isAuthenticated) {
      // Send authentication request (server will validate using session)
      sendMessage({
        type: 'TERMINAL_AUTH_REQUEST'
        // No token needed - server validates using HTTP session cookies
      });
    }
  }, [isConnected, authStatus, isAuthenticated, sendMessage]) (سطر 94)
   • sendMessage({
        type: 'TERMINAL_AUTH_REQUEST'
        // No token needed - server validates using HTTP session cookies
      }) (سطر 97)
   • useEffect(() => {
    if (lastMessage) {
      switch (lastMessage.type) {
        case 'CONNECTION_CLOSED':
          // Reset authentication state when connection closes
          setIsAuthenticated(false);
          setIsExecuting(false);
          currentCommandRef.current = "";
          break;

        case 'TERMINAL_AUTH_SUCCESS':
          setIsAuthenticated(true);
          toast({
            title: "نجح الاتصال",
            description: "تم تسجيل الدخول للطرفية بنجاح",
          });
          break;

        case 'TERMINAL_AUTH_ERROR':
          setIsAuthenticated(false);
          toast({
            title: "خطأ في المصادقة",
            description: lastMessage.message || "فشل في تسجيل الدخول للطرفية",
            variant: "destructive",
          });
          break;

        case 'TERMINAL_OUTPUT':
          const outputData = lastMessage.data;
          if (outputData) {
            const outputId = `${outputData.command}-${Date.now()}`;
            setHistory(prev => {
              const existingIndex = prev.findIndex(h => h.command === outputData.command && h.status === 'running');
              if (existingIndex >= 0) {
                // Update existing output
                const updated = [...prev];
                updated[existingIndex] = {
                  ...updated[existingIndex],
                  output: updated[existingIndex].output + outputData.output,
                  isError: outputData.isError,
                  status: outputData.status
                };
                return updated;
              } else {
                // Add new output
                return [...prev, {
                  id: outputId,
                  command: outputData.command,
                  output: outputData.output,
                  isError: outputData.isError,
                  status: outputData.status,
                  timestamp: new Date()
                }];
              }
            });
          }
          break;

        case 'TERMINAL_COMPLETE':
          const completeData = lastMessage.data;
          if (completeData) {
            setHistory(prev => {
              const updated = [...prev];
              const index = updated.findIndex(h => h.command === completeData.command);
              if (index >= 0) {
                updated[index] = {
                  ...updated[index],
                  status: completeData.status,
                  output: updated[index].output + `\n[Exit code: ${completeData.exitCode}]`
                };
              }
              return updated;
            });
            setIsExecuting(false);
            currentCommandRef.current = "";
          }
          break;

        case 'TERMINAL_ERROR':
          toast({
            title: "خطأ في الطرفية",
            description: lastMessage.message || "حدث خطأ في تنفيذ الأمر",
            variant: "destructive",
          });
          setIsExecuting(false);
          currentCommandRef.current = "";
          break;
      }
    }
  }, [lastMessage, toast]) (سطر 105)
   • setIsAuthenticated(false) (سطر 110)
   • setIsExecuting(false) (سطر 111)
   • setIsAuthenticated(true) (سطر 116)
   • toast({
            title: "نجح الاتصال",
            description: "تم تسجيل الدخول للطرفية بنجاح",
          }) (سطر 117)
   • setIsAuthenticated(false) (سطر 124)
   • toast({
            title: "خطأ في المصادقة",
            description: lastMessage.message || "فشل في تسجيل الدخول للطرفية",
            variant: "destructive",
          }) (سطر 125)
   • Date.now() (سطر 135)
   • setHistory(prev => {
              const existingIndex = prev.findIndex(h => h.command === outputData.command && h.status === 'running');
              if (existingIndex >= 0) {
                // Update existing output
                const updated = [...prev];
                updated[existingIndex] = {
                  ...updated[existingIndex],
                  output: updated[existingIndex].output + outputData.output,
                  isError: outputData.isError,
                  status: outputData.status
                };
                return updated;
              } else {
                // Add new output
                return [...prev, {
                  id: outputId,
                  command: outputData.command,
                  output: outputData.output,
                  isError: outputData.isError,
                  status: outputData.status,
                  timestamp: new Date()
                }];
              }
            }) (سطر 136)
   • prev.findIndex(h => h.command === outputData.command && h.status === 'running') (سطر 137)
   • setHistory(prev => {
              const updated = [...prev];
              const index = updated.findIndex(h => h.command === completeData.command);
              if (index >= 0) {
                updated[index] = {
                  ...updated[index],
                  status: completeData.status,
                  output: updated[index].output + `\n[Exit code: ${completeData.exitCode}]`
                };
              }
              return updated;
            }) (سطر 166)
   • updated.findIndex(h => h.command === completeData.command) (سطر 168)
   • setIsExecuting(false) (سطر 178)
   • toast({
            title: "خطأ في الطرفية",
            description: lastMessage.message || "حدث خطأ في تنفيذ الأمر",
            variant: "destructive",
          }) (سطر 184)
   • setIsExecuting(false) (سطر 189)
   • e.preventDefault() (سطر 197)
   • command.trim() (سطر 198)
   • command.trim() (سطر 200)
   • ALLOWED_COMMANDS.includes(trimmedCommand) (سطر 202)
   • toast({
        title: "أمر غير مسموح",
        description: "هذا الأمر غير مسموح لأسباب أمنية",
        variant: "destructive",
      }) (سطر 203)
   • sendMessage({
      type: 'TERMINAL_COMMAND',
      command: trimmedCommand
    }) (سطر 212)
   • setIsExecuting(true) (سطر 217)
   • setCommandHistory(prev => {
      const filtered = prev.filter(c => c !== trimmedCommand);
      return [trimmedCommand, ...filtered].slice(0, 50); // Keep last 50 commands
    }) (سطر 221)
   • prev.filter(c => c !== trimmedCommand) (سطر 222)
   • [trimmedCommand, ...filtered].slice(0, 50) (سطر 223)
   • setCommand("") (سطر 226)
   • setHistoryIndex(-1) (سطر 227)
   • e.preventDefault() (سطر 232)
   • setHistoryIndex(newIndex) (سطر 235)
   • setCommand(commandHistory[newIndex]) (سطر 236)
   • e.preventDefault() (سطر 239)
   • setHistoryIndex(newIndex) (سطر 242)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/utils/connectionTest.ts
🏷️ الدالة: testConnections
🔢 الأسطر: 20-206
⚡ Async: نعم
📞 الاستدعاءات:
   • Date.now() (سطر 21)
   • hostname.includes('replit.dev') (سطر 36)
   • hostname.includes('repl.co') (سطر 36)
   • console.log('🔍 Starting comprehensive connection tests...') (سطر 47)
   • console.log(`🌐 Environment: ${result.diagnostics.environment}`) (سطر 48)
   • console.log(`🔌 Network Status: ${result.diagnostics.networkOnline ? 'Online' : 'Offline'}`) (سطر 49)
   • Date.now() (سطر 52)
   • console.log('📡 Testing API connection to:', apiUrl) (سطر 57)
   • fetch(apiUrl, {
      method: 'GET',
      credentials: 'include',
      headers: {
        'Content-Type': 'application/json'
      },
      // إضافة timeout للـ API test
      signal: AbortSignal.timeout(10000)
    }) (سطر 59)
   • AbortSignal.timeout(10000) (سطر 66)
   • Date.now() (سطر 70)
   • console.log(`✅ API connection successful (${result.diagnostics.apiResponseTime}ms)`) (سطر 74)
   • response.json() (سطر 78)
   • result.warnings.push(`Database status: ${data.database.status}`) (سطر 80)
   • result.errors.push(errorMsg) (سطر 87)
   • result.errors.push('API endpoint not found - server might not be running or misconfigured') (سطر 91)
   • result.errors.push('Internal server error - check server logs') (سطر 93)
   • result.errors.push('Server unavailable - service might be starting up or overloaded') (سطر 95)
   • result.warnings.push('Authentication/authorization issue - might be expected for health endpoint') (سطر 97)
   • Date.now() (سطر 101)
   • result.errors.push('API connection timeout (10s) - server might be slow or unreachable') (سطر 105)
   • error.message.includes('Failed to fetch') (سطر 106)
   • result.errors.push('API connection failed - network error or CORS issue') (سطر 107)
   • result.warnings.push('Check if server is running and CORS is properly configured') (سطر 108)
   • result.errors.push(`API connection failed: ${error.message}`) (سطر 110)
   • result.errors.push('API connection failed: Unknown error') (سطر 113)
   • console.log('🔌 Starting WebSocket connection tests...') (سطر 118)
   • import('../../../shared/environment') (سطر 121)
   • getWebSocketUrl() (سطر 122)
   • console.log('🔗 Primary WebSocket URL:', primaryWsUrl) (سطر 125)
   • primaryWsUrl.includes('undefined') (سطر 128)
   • primaryWsUrl.includes('NaN') (سطر 128)
   • primaryWsUrl.includes('null') (سطر 128)
   • result.errors.push('WebSocket URL contains invalid values') (سطر 129)
   • result.errors.push(`Invalid URL: ${primaryWsUrl}`) (سطر 130)
   • testSingleWebSocketUrl(primaryWsUrl) (سطر 135)
   • console.log('✅ WebSocket connection successful') (سطر 141)
   • result.errors.push(`Primary WebSocket failed: ${wsTestResult.error}`) (سطر 143)
   • console.log('🔄 Trying fallback WebSocket URLs...') (سطر 148)
   • ports.forEach(port => {
          const fallbackUrl = `${protocol}//${hostname}${port}/ws`;
          if (fallbackUrl !== primaryWsUrl) {
            fallbackUrls.push(fallbackUrl);
          }
        }) (سطر 157)
   • fallbackUrls.push(fallbackUrl) (سطر 160)
   • console.log('🔄 Trying fallback:', fallbackUrl) (سطر 168)
   • testSingleWebSocketUrl(fallbackUrl, 3000) (سطر 169)
   • result.warnings.push(`Primary WebSocket failed, but fallback succeeded: ${fallbackUrl}`) (سطر 176)
   • console.log('✅ Fallback WebSocket connection successful:', fallbackUrl) (سطر 177)
   • console.log('❌ Fallback failed:', fallbackUrl, fallbackResult.error) (سطر 180)
   • result.errors.push('All WebSocket connection attempts failed (primary + fallbacks)') (سطر 185)
   • result.errors.push(`WebSocket test failed: ${error instanceof Error ? error.message : 'Unknown error'}`) (سطر 190)
   • Date.now() (سطر 194)
   • console.log(`🏁 Connection tests completed in ${totalTime}ms`) (سطر 195)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/utils/connectionTest.ts
🏷️ الدالة: testSingleWebSocketUrl
🔢 الأسطر: 209-282
⚡ Async: نعم
🔑 الوسائط:
   • wsUrl: string
   • timeout: number
📞 الاستدعاءات:
   • setTimeout(() => {
        if (!resolved) {
          resolved = true;
          ws.close();
          resolve({
            success: false,
            error: `Connection timeout after ${timeout}ms`
          });
        }
      }, timeout) (سطر 220)
   • ws.close() (سطر 223)
   • resolve({
            success: false,
            error: `Connection timeout after ${timeout}ms`
          }) (سطر 224)
   • clearTimeout(timeoutId) (سطر 234)
   • ws.close(1000, 'Test completed') (سطر 235)
   • resolve({
            success: true
          }) (سطر 236)
   • clearTimeout(timeoutId) (سطر 245)
   • resolve({
            success: false,
            error: 'WebSocket error event triggered'
          }) (سطر 246)
   • clearTimeout(timeoutId) (سطر 256)
   • resolve({
              success: true,
              closeCode: event.code,
              closeReason: event.reason
            }) (سطر 260)
   • resolve({
              success: false,
              error: `Connection closed with code: ${event.code}`,
              closeCode: event.code,
              closeReason: event.reason
            }) (سطر 266)
   • resolve({
        success: false,
        error: `Failed to create WebSocket: ${error instanceof Error ? error.message : 'Unknown error'}`
      }) (سطر 276)
🩺 التشخيص:
   ⚠️ دالة async لكن لا تستخدم await

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/utils/connectionTest.ts
🏷️ الدالة: logConnectionTestResults
🔢 الأسطر: 284-359
⚡ Async: لا
🔑 الوسائط:
   • result: import("/home/administrator/Panel/client/src/utils/connectionTest").ConnectionTestResult
📞 الاستدعاءات:
   • console.log('🔍 نتائج اختبار الاتصال:') (سطر 285)
   • console.log(`📡 API: ${result.api ? '✅' : '❌'}`) (سطر 286)
   • console.log(`🔌 WebSocket: ${result.websocket ? '✅' : '❌'}`) (سطر 287)
   • console.log('📊 معلومات التشخيص:') (سطر 291)
   • console.log(`   🌍 البيئة: ${result.diagnostics.environment}`) (سطر 294)
   • console.log(`   🔌 حالة الشبكة: ${result.diagnostics.networkOnline ? '✅ متصل' : '❌ غير متصل'}`) (سطر 298)
   • console.log(`   📡 API URL: ${result.diagnostics.apiUrl}`) (سطر 302)
   • console.log(`   📊 API Status: ${result.diagnostics.apiStatus}`) (سطر 306)
   • console.log(`   ⏱️ API Response Time: ${result.diagnostics.apiResponseTime}ms`) (سطر 310)
   • console.log(`   🔌 WebSocket URL: ${result.diagnostics.wsUrl}`) (سطر 314)
   • console.log(`   🔌 WebSocket Close Code: ${result.diagnostics.wsCloseCode}`) (سطر 318)
   • console.log(`   📝 WebSocket Close Reason: ${result.diagnostics.wsCloseReason}`) (سطر 322)
   • console.log(`   🔄 Fallbacks Attempted: ${result.diagnostics.fallbacksAttempted.length}`) (سطر 326)
   • result.diagnostics.fallbacksAttempted.forEach((url, index) => {
        console.log(`      ${index + 1}. ${url}`);
      }) (سطر 327)
   • console.log(`      ${index + 1}. ${url}`) (سطر 328)
   • console.log('❌ الأخطاء:') (سطر 334)
   • result.errors.forEach(error => console.log(`   - ${error}`)) (سطر 335)
   • console.log(`   - ${error}`) (سطر 335)
   • console.log('⚠️ التحذيرات:') (سطر 339)
   • result.warnings.forEach(warning => console.log(`   - ${warning}`)) (سطر 340)
   • console.log(`   - ${warning}`) (سطر 340)
   • console.log('💡 التوصيات:') (سطر 344)
   • console.log('   - تأكد من تشغيل الخادم') (سطر 347)
   • console.log('   - تحقق من إعدادات الشبكة والجدار الناري') (سطر 348)
   • console.log('   - تحقق من تشغيل API server') (سطر 350)
   • console.log('   - تأكد من إعدادات CORS') (سطر 351)
   • console.log('   - تحقق من تشغيل WebSocket server') (سطر 353)
   • console.log('   - تأكد من صحة WebSocket URL') (سطر 354)
   • console.log('   - تحقق من إعدادات الProxy أو الجدار الناري') (سطر 355)
   • console.log('   ✅ جميع الاتصالات تعمل بشكل صحيح!') (سطر 357)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/utils/connectionTest.ts
🏷️ الدالة: quickConnectionTest
🔢 الأسطر: 362-388
⚡ Async: نعم
📞 الاستدعاءات:
   • fetch(apiUrl, {
      method: 'GET',
      signal: AbortSignal.timeout(3000)
    }) (سطر 368)
   • AbortSignal.timeout(3000) (سطر 370)
   • import('../../../shared/environment') (سطر 379)
   • getWebSocketUrl() (سطر 380)
   • testSingleWebSocketUrl(wsUrl, 2000) (سطر 381)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/Applications/AddAppModal.tsx
🏷️ الدالة: AddAppModal
🔢 الأسطر: 28-261
⚡ Async: لا
🔑 الوسائط:
   • { open, onOpenChange }: AddAppModalProps
📞 الاستدعاءات:
   • useToast() (سطر 29)
   • useQueryClient() (سطر 30)
   • useState("") (سطر 31)
   • useForm<FormData>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      usePm2: true,
      status: 'stopped',
      envVars: {},
    },
  }) (سطر 40)
   • zodResolver(formSchema) (سطر 41)
   • watch("usePm2") (سطر 49)
   • useMutation({
    mutationFn: async (data: FormData) => {
      // Parse environment variables
      let envVars = {};
      if (envVarsText.trim()) {
        try {
          const lines = envVarsText.split('\n').filter(line => line.trim());
          envVars = lines.reduce((acc: any, line) => {
            const [key, ...valueParts] = line.split('=');
            if (key && valueParts.length > 0) {
              acc[key.trim()] = valueParts.join('=').trim();
            }
            return acc;
          }, {});
        } catch (error) {
          throw new Error("تنسيق متغيرات البيئة غير صحيح");
        }
      }

      const appData = {
        ...data,
        envVars,
      };

      await apiRequest("POST", "/api/applications", appData);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/applications"] });
      queryClient.invalidateQueries({ queryKey: ["/api/dashboard/stats"] });
      toast({
        title: "تم إنشاء التطبيق",
        description: "تم إنشاء التطبيق بنجاح",
      });
      reset();
      setEnvVarsText("");
      onOpenChange(false);
    },
    onError: (error) => {
      toast({
        title: "خطأ في إنشاء التطبيق",
        description: error instanceof Error ? error.message : "فشل في إنشاء التطبيق",
        variant: "destructive",
      });
    },
  }) (سطر 51)
   • envVarsText.trim() (سطر 55)
   • envVarsText.split('\n').filter(line => line.trim()) (سطر 57)
   • envVarsText.split('\n') (سطر 57)
   • line.trim() (سطر 57)
   • lines.reduce((acc: any, line) => {
            const [key, ...valueParts] = line.split('=');
            if (key && valueParts.length > 0) {
              acc[key.trim()] = valueParts.join('=').trim();
            }
            return acc;
          }, {}) (سطر 58)
   • line.split('=') (سطر 59)
   • key.trim() (سطر 61)
   • valueParts.join('=').trim() (سطر 61)
   • valueParts.join('=') (سطر 61)
   • apiRequest("POST", "/api/applications", appData) (سطر 75)
   • queryClient.invalidateQueries({ queryKey: ["/api/applications"] }) (سطر 78)
   • queryClient.invalidateQueries({ queryKey: ["/api/dashboard/stats"] }) (سطر 79)
   • toast({
        title: "تم إنشاء التطبيق",
        description: "تم إنشاء التطبيق بنجاح",
      }) (سطر 80)
   • reset() (سطر 84)
   • setEnvVarsText("") (سطر 85)
   • onOpenChange(false) (سطر 86)
   • toast({
        title: "خطأ في إنشاء التطبيق",
        description: error instanceof Error ? error.message : "فشل في إنشاء التطبيق",
        variant: "destructive",
      }) (سطر 89)
   • createAppMutation.mutate(data) (سطر 98)
   • reset() (سطر 102)
   • setEnvVarsText("") (سطر 103)
   • onOpenChange(false) (سطر 104)
   • handleSubmit(onSubmit) (سطر 129)
   • register("name") (سطر 135)
   • register("port", { valueAsNumber: true }) (سطر 151)
   • register("path") (سطر 167)
   • register("command") (سطر 182)
   • register("description") (سطر 197)
   • register("domain") (سطر 207)
   • setEnvVarsText(e.target.value) (سطر 218)
   • setValue("usePm2", checked ?? true) (سطر 232)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/Applications/ApplicationTable.tsx
🏷️ الدالة: ApplicationTable
🔢 الأسطر: 49-295
⚡ Async: لا
🔑 الوسائط:
   • {
  applications,
  loading,
  onStart,
  onStop,
  onRestart,
  onDelete,
  onEdit,
  startLoading = false,
  stopLoading = false,
  restartLoading = false,
  deleteLoading = false,
}: ApplicationTableProps
📞 الاستدعاءات:
   • useState<string | null>(null) (سطر 62)
   • [...Array(3)].map((_, i) => (
                  <TableRow key={i}>
                    <TableCell>
                      <div className="flex items-center gap-3">
                        <Skeleton className="w-10 h-10 rounded-lg" />
                        <div>
                          <Skeleton className="h-4 w-24 mb-1" />
                          <Skeleton className="h-3 w-16" />
                        </div>
                      </div>
                    </TableCell>
                    <TableCell><Skeleton className="h-4 w-32" /></TableCell>
                    <TableCell><Skeleton className="h-4 w-12" /></TableCell>
                    <TableCell><Skeleton className="h-5 w-16" /></TableCell>
                    <TableCell>
                      <div className="flex items-center gap-2">
                        {[...Array(4)].map((_, j) => (
                          <Skeleton key={j} className="w-8 h-8 rounded" />
                        ))}
                      </div>
                    </TableCell>
                  </TableRow>
                )) (سطر 80)
   • Array(3) (سطر 80)
   • [...Array(4)].map((_, j) => (
                          <Skeleton key={j} className="w-8 h-8 rounded" />
                        )) (سطر 96)
   • Array(4) (سطر 96)
   • applications.map((app) => (
                  <TableRow 
                    key={app.id} 
                    className="hover:bg-accent transition-colors"
                    data-testid={`app-row-${app.id!}`}
                  >
                    <TableCell>
                      <div className="flex items-center gap-3">
                        <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${
                          app.status === 'running' ? 'bg-primary/20' : 'bg-gray-500/20'
                        }`}>
                          <Box className={`w-5 h-5 ${
                            app.status === 'running' ? 'text-primary' : 'text-gray-500'
                          }`} />
                        </div>
                        <div>
                          <p className="font-medium" data-testid={`app-name-${app.id!}`}>
                            {app.name}
                          </p>
                          {app.description && (
                            <p className="text-sm text-muted-foreground" data-testid={`app-description-${app.id!}`}>
                              {app.description}
                            </p>
                          )}
                        </div>
                      </div>
                    </TableCell>
                    <TableCell>
                      <span className="text-sm font-mono" data-testid={`app-path-${app.id!}`}>
                        {app.path}
                      </span>
                    </TableCell>
                    <TableCell>
                      <span className="text-sm font-mono" data-testid={`app-port-${app.id!}`}>
                        {app.port}
                      </span>
                    </TableCell>
                    <TableCell>
                      <StatusBadge 
                        status={app.status || 'stopped'} 
                        data-testid={`app-status-${app.id!}`}
                      />
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center gap-2">
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => window.open(`/logs/${app.id}`, '_blank')}
                          title="عرض السجلات"
                          data-testid={`button-logs-${app.id!}`}
                        >
                          <FileText className="w-4 h-4 text-blue-500" />
                        </Button>

                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => onEdit?.(app.id)}
                          title="تعديل"
                          data-testid={`button-edit-${app.id!}`}
                        >
                          <Edit className="w-4 h-4 text-yellow-500" />
                        </Button>

                        {app.status === 'running' ? (
                          <>
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => onRestart(app.id)}
                              disabled={restartLoading}
                              title="إعادة تشغيل"
                              data-testid={`button-restart-${app.id!}`}
                            >
                              <RotateCcw className="w-4 h-4 text-green-500" />
                            </Button>
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => onStop(app.id)}
                              disabled={stopLoading}
                              title="إيقاف"
                              data-testid={`button-stop-${app.id!}`}
                            >
                              <Square className="w-4 h-4 text-orange-500" />
                            </Button>
                          </>
                        ) : (
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => onStart(app.id)}
                            disabled={startLoading}
                            title={app.status === 'error' ? `خطأ: ${app.path}` : 'تشغيل'}
                            data-testid={`button-start-${app.id!}`}
                          >
                            <Play className="w-4 h-4 text-green-500" />
                          </Button>
                        )}

                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => setDeleteAppId(app.id)}
                          disabled={deleteLoading}
                          title="حذف"
                          data-testid={`button-delete-${app.id!}`}
                        >
                          <Trash2 className="w-4 h-4 text-red-500" />
                        </Button>
                      </div>
                    </TableCell>
                  </TableRow>
                )) (سطر 141)
   • window.open(`/logs/${app.id}`, '_blank') (سطر 189)
   • onEdit?.(app.id) (سطر 199)
   • onRestart(app.id) (سطر 211)
   • onStop(app.id) (سطر 221)
   • onStart(app.id) (سطر 233)
   • setDeleteAppId(app.id) (سطر 245)
   • setDeleteAppId(null) (سطر 265)
   • onDelete(deleteAppId) (سطر 281)
   • setDeleteAppId(null) (سطر 282)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/Applications/EditAppModal.tsx
🏷️ الدالة: EditAppModal
🔢 الأسطر: 30-289
⚡ Async: لا
🔑 الوسائط:
   • { open, onOpenChange, applicationId }: EditAppModalProps
📞 الاستدعاءات:
   • useToast() (سطر 31)
   • useQueryClient() (سطر 32)
   • useState("") (سطر 33)
   • useQuery<Application[]>({
    queryKey: ["/api/applications"],
    enabled: !!applicationId && open,
  }) (سطر 35)
   • applications?.find((app) => app.id === applicationId) (سطر 40)
   • useForm<FormData>({
    resolver: zodResolver(formSchema),
  }) (سطر 49)
   • zodResolver(formSchema) (سطر 50)
   • watch("usePm2") (سطر 53)
   • useEffect(() => {
    if (application) {
      // Populate form with current application data
      setValue("name", application.name);
      setValue("port", application.port);
      setValue("path", application.path);
      setValue("command", application.command);
      setValue("description", application.description || "");
      setValue("usePm2", application.usePm2);

      // Convert env vars object to text
      if (application.envVars && typeof application.envVars === 'object') {
        const envText = Object.entries(application.envVars)
          .map(([key, value]) => `${key}=${value}`)
          .join('\n');
        setEnvVarsText(envText);
      }
    }
  }, [application, setValue]) (سطر 55)
   • setValue("name", application.name) (سطر 58)
   • setValue("port", application.port) (سطر 59)
   • setValue("path", application.path) (سطر 60)
   • setValue("command", application.command) (سطر 61)
   • setValue("description", application.description || "") (سطر 62)
   • setValue("usePm2", application.usePm2) (سطر 63)
   • Object.entries(application.envVars)
          .map(([key, value]) => `${key}=${value}`)
          .join('\n') (سطر 67)
   • Object.entries(application.envVars)
          .map(([key, value]) => `${key}=${value}`) (سطر 67)
   • Object.entries(application.envVars) (سطر 67)
   • setEnvVarsText(envText) (سطر 70)
   • useMutation({
    mutationFn: async (data: FormData) => {
      if (!applicationId) return;

      // Parse environment variables
      let envVars = {};
      if (envVarsText.trim()) {
        try {
          const lines = envVarsText.split('\n').filter(line => line.trim());
          envVars = lines.reduce((acc: any, line) => {
            const [key, ...valueParts] = line.split('=');
            if (key && valueParts.length > 0) {
              acc[key.trim()] = valueParts.join('=').trim();
            }
            return acc;
          }, {});
        } catch (error) {
          throw new Error("تنسيق متغيرات البيئة غير صحيح");
        }
      }

      const appData = {
        ...data,
        envVars,
      };

      await apiRequest("PUT", `/api/applications/${applicationId}`, appData);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/applications"] });
      queryClient.invalidateQueries({ queryKey: [`/api/applications/${applicationId}`] });
      queryClient.invalidateQueries({ queryKey: ["/api/dashboard/stats"] });
      toast({
        title: "تم تحديث التطبيق",
        description: "تم تحديث التطبيق بنجاح",
      });
      handleClose();
    },
    onError: (error) => {
      toast({
        title: "خطأ في تحديث التطبيق",
        description: error instanceof Error ? error.message : "فشل في تحديث التطبيق",
        variant: "destructive",
      });
    },
  }) (سطر 75)
   • envVarsText.trim() (سطر 81)
   • envVarsText.split('\n').filter(line => line.trim()) (سطر 83)
   • envVarsText.split('\n') (سطر 83)
   • line.trim() (سطر 83)
   • lines.reduce((acc: any, line) => {
            const [key, ...valueParts] = line.split('=');
            if (key && valueParts.length > 0) {
              acc[key.trim()] = valueParts.join('=').trim();
            }
            return acc;
          }, {}) (سطر 84)
   • line.split('=') (سطر 85)
   • key.trim() (سطر 87)
   • valueParts.join('=').trim() (سطر 87)
   • valueParts.join('=') (سطر 87)
   • apiRequest("PUT", `/api/applications/${applicationId}`, appData) (سطر 101)
   • queryClient.invalidateQueries({ queryKey: ["/api/applications"] }) (سطر 104)
   • queryClient.invalidateQueries({ queryKey: [`/api/applications/${applicationId}`] }) (سطر 105)
   • queryClient.invalidateQueries({ queryKey: ["/api/dashboard/stats"] }) (سطر 106)
   • toast({
        title: "تم تحديث التطبيق",
        description: "تم تحديث التطبيق بنجاح",
      }) (سطر 107)
   • handleClose() (سطر 111)
   • toast({
        title: "خطأ في تحديث التطبيق",
        description: error instanceof Error ? error.message : "فشل في تحديث التطبيق",
        variant: "destructive",
      }) (سطر 114)
   • updateAppMutation.mutate(data) (سطر 123)
   • reset() (سطر 127)
   • setEnvVarsText("") (سطر 128)
   • onOpenChange(false) (سطر 129)
   • handleSubmit(onSubmit) (سطر 167)
   • register("name") (سطر 173)
   • register("port", { valueAsNumber: true }) (سطر 189)
   • register("path") (سطر 205)
   • register("command") (سطر 220)
   • register("description") (سطر 235)
   • setEnvVarsText(e.target.value) (سطر 246)
   • setValue("usePm2", checked ?? false) (سطر 260)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/auth/RoleGuard.tsx
🏷️ الدالة: RoleGuard
🔢 الأسطر: 13-61
⚡ Async: لا
🔑 الوسائط:
   • {
  children,
  requiredRole,
  requiredRoles,
  fallback,
  showUnauthorizedMessage = true,
}: RoleGuardProps
📞 الاستدعاءات:
   • useAuth() (سطر 20)
   • hasRole(requiredRole) (سطر 36)
   • hasAnyRole(roles) (سطر 36)
   • roles.join(' أو ') (سطر 54)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/auth/RoleGuard.tsx
🏷️ الدالة: AdminOnly
🔢 الأسطر: 64-74
⚡ Async: لا
🔑 الوسائط:
   • { children, fallback, showUnauthorizedMessage = true }: Omit<RoleGuardProps, "requiredRole" | "requiredRoles">
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/auth/RoleGuard.tsx
🏷️ الدالة: ModeratorAndAbove
🔢 الأسطر: 77-87
⚡ Async: لا
🔑 الوسائط:
   • { children, fallback, showUnauthorizedMessage = true }: Omit<RoleGuardProps, "requiredRole" | "requiredRoles">
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/auth/RoleGuard.tsx
🏷️ الدالة: UserAndAbove
🔢 الأسطر: 90-100
⚡ Async: لا
🔑 الوسائط:
   • { children, fallback, showUnauthorizedMessage = true }: Omit<RoleGuardProps, "requiredRole" | "requiredRoles">
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/Common/ErrorBoundaryButton.tsx
🏷️ الدالة: withErrorBoundary
🔢 الأسطر: 16-88
⚡ Async: لا
🔑 الوسائط:
   • WrappedComponent: React.ComponentType<P>
   • defaultComponentName: string | undefined
📞 الاستدعاءات:
   • forwardRef<HTMLButtonElement, P & ErrorBoundaryButtonProps>(
    (props, ref) => {
      const {
        onClick,
        onError,
        errorMessage,
        componentName,
        action,
        ...restProps
      } = props;

      const { logUserAction, wrapEventHandler, logUserInteraction } = useErrorLogger(
        componentName || defaultComponentName || 'Button'
      );

      // تغليف onClick بمعالجة الأخطاء
      const handleClick = wrapEventHandler(
        async (event: React.MouseEvent<HTMLButtonElement>) => {
          const actionName = action || restProps['data-testid'] || 'button_click';
          
          try {
            // تسجيل تفاعل المستخدم
            logUserInteraction(actionName, {
              target: event.currentTarget.tagName,
              disabled: restProps.disabled,
              variant: (restProps as any).variant,
              timestamp: new Date().toISOString()
            });

            // تنفيذ onClick الأصلي
            if (onClick) {
              await onClick(event);
            }
          } catch (error) {
            const errorObj = error instanceof Error ? error : new Error(String(error));
            
            // تسجيل خطأ فعل المستخدم
            logUserAction(actionName, errorObj);
            
            // استدعاء معالج الخطأ المخصص
            if (onError) {
              try {
                onError(errorObj);
              } catch (handlerError) {
                console.error('Error handler failed:', handlerError);
              }
            }
            
            // عدم رفع الخطأ مرة أخرى لتجنب كسر التطبيق
            console.error(`Button action failed: ${actionName}`, errorObj);
          }
        },
        action || 'click'
      );

      return (
        <WrappedComponent
          ref={ref}
          {...restProps}
          onClick={handleClick}
        />
      );
    }
  ) (سطر 20)
   • useErrorLogger(
        componentName || defaultComponentName || 'Button'
      ) (سطر 31)
   • wrapEventHandler(
        async (event: React.MouseEvent<HTMLButtonElement>) => {
          const actionName = action || restProps['data-testid'] || 'button_click';
          
          try {
            // تسجيل تفاعل المستخدم
            logUserInteraction(actionName, {
              target: event.currentTarget.tagName,
              disabled: restProps.disabled,
              variant: (restProps as any).variant,
              timestamp: new Date().toISOString()
            });

            // تنفيذ onClick الأصلي
            if (onClick) {
              await onClick(event);
            }
          } catch (error) {
            const errorObj = error instanceof Error ? error : new Error(String(error));
            
            // تسجيل خطأ فعل المستخدم
            logUserAction(actionName, errorObj);
            
            // استدعاء معالج الخطأ المخصص
            if (onError) {
              try {
                onError(errorObj);
              } catch (handlerError) {
                console.error('Error handler failed:', handlerError);
              }
            }
            
            // عدم رفع الخطأ مرة أخرى لتجنب كسر التطبيق
            console.error(`Button action failed: ${actionName}`, errorObj);
          }
        },
        action || 'click'
      ) (سطر 36)
   • logUserInteraction(actionName, {
              target: event.currentTarget.tagName,
              disabled: restProps.disabled,
              variant: (restProps as any).variant,
              timestamp: new Date().toISOString()
            }) (سطر 42)
   • new Date().toISOString() (سطر 46)
   • onClick(event) (سطر 51)
   • String(error) (سطر 54)
   • logUserAction(actionName, errorObj) (سطر 57)
   • onError(errorObj) (سطر 62)
   • console.error('Error handler failed:', handlerError) (سطر 64)
   • console.error(`Button action failed: ${actionName}`, errorObj) (سطر 69)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/Common/ErrorBoundaryButton.tsx
🏷️ الدالة: useFormErrorHandling
🔢 الأسطر: 173-216
⚡ Async: لا
🔑 الوسائط:
   • formName: string
📞 الاستدعاءات:
   • useErrorLogger(`Form_${formName}`) (سطر 174)
   • logUserAction(
      `form_error_${fieldName || 'unknown_field'}`,
      error
    ) (سطر 177)
   • updateAppState({
      lastFormError: {
        form: formName,
        field: fieldName,
        error: error.message,
        timestamp: new Date().toISOString()
      }
    }) (سطر 182)
   • new Date().toISOString() (سطر 187)
   • logUserAction('form_submit', error) (سطر 193)
   • Object.keys(errors) (سطر 197)
   • logError(`Form validation failed with ${errorCount} errors`, undefined, 'medium') (سطر 199)
   • updateAppState({
      lastValidationErrors: {
        form: formName,
        errors,
        count: errorCount,
        timestamp: new Date().toISOString()
      }
    }) (سطر 201)
   • new Date().toISOString() (سطر 206)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/Common/StatusBadge.tsx
🏷️ الدالة: StatusBadge
🔢 الأسطر: 9-77
⚡ Async: لا
🔑 الوسائط:
   • { status, className }: StatusBadgeProps
📞 الاستدعاءات:
   • status.toLowerCase() (سطر 11)
   • getStatusConfig(status) (سطر 61)
   • cn(
        "inline-flex items-center gap-2 text-xs font-medium",
        config.className,
        className
      ) (سطر 66)
   • status.toLowerCase() (سطر 71)
   • cn("w-1.5 h-1.5 rounded-full", config.dot) (سطر 73)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/Dashboard/ApplicationsList.tsx
🏷️ الدالة: ApplicationsList
🔢 الأسطر: 13-96
⚡ Async: لا
🔑 الوسائط:
   • { applications, loading }: ApplicationsListProps
📞 الاستدعاءات:
   • [...Array(4)].map((_, i) => (
              <div key={i} className="flex items-center justify-between p-3">
                <div className="flex items-center gap-3">
                  <Skeleton className="w-2 h-2 rounded-full" />
                  <div>
                    <Skeleton className="h-4 w-32 mb-1" />
                    <Skeleton className="h-3 w-16" />
                  </div>
                </div>
                <Skeleton className="h-5 w-12" />
              </div>
            )) (سطر 25)
   • Array(4) (سطر 25)
   • applications.slice(0, 4) (سطر 43)
   • displayedApps.map((app) => (
              <div 
                key={app.id} 
                className="flex items-center justify-between p-3 hover:bg-accent rounded-lg transition-colors"
                data-testid={`app-item-${app.id}`}
              >
                <div className="flex items-center gap-3">
                  <div className={`w-2 h-2 rounded-full ${
                    app.status === 'running' ? 'bg-green-500' : 
                    app.status === 'error' ? 'bg-red-500' : 'bg-gray-500'
                  }`} />
                  <div>
                    <p className="font-medium" data-testid={`app-name-${app.id}`}>
                      {app.name}
                    </p>
                    <p className="text-sm text-muted-foreground" data-testid={`app-port-${app.id}`}>
                      المنفذ: {app.port}
                    </p>
                  </div>
                </div>
                <StatusBadge 
                  status={app.status || 'stopped'} 
                  data-testid={`app-status-${app.id}`}
                />
              </div>
            )) (سطر 65)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/Dashboard/NotificationsList.tsx
🏷️ الدالة: NotificationsList
🔢 الأسطر: 8-64
⚡ Async: لا
📞 الاستدعاءات:
   • useNotifications() (سطر 9)
   • notifications.slice(0, 5) (سطر 11)
   • displayedNotifications.map((notification) => (
              <div 
                key={notification.id} 
                className="flex items-start gap-3 p-3 hover:bg-accent rounded-lg transition-colors cursor-pointer"
                onClick={() => markAsRead(notification.id)}
                data-testid={`notification-${notification.id}`}
              >
                <div className={`w-2 h-2 rounded-full mt-2 ${
                  notification.type === 'error' ? 'bg-red-500' :
                  notification.type === 'warning' ? 'bg-yellow-500' :
                  notification.type === 'success' ? 'bg-green-500' :
                  'bg-blue-500'
                }`} />
                <div className="flex-1">
                  <p className="text-sm" data-testid={`notification-message-${notification.id}`}>
                    {notification.message}
                  </p>
                  <p className="text-xs text-muted-foreground mt-1" data-testid={`notification-time-${notification.id}`}>
                    {formatDistanceToNow(new Date(notification.createdAt), { 
                      addSuffix: true, 
                      locale: ar 
                    })}
                  </p>
                </div>
                {!notification.acknowledged && (
                  <div className="w-2 h-2 bg-primary rounded-full" />
                )}
              </div>
            )) (سطر 30)
   • markAsRead(notification.id) (سطر 34)
   • formatDistanceToNow(new Date(notification.createdAt), { 
                      addSuffix: true, 
                      locale: ar 
                    }) (سطر 48)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/Dashboard/QuickActions.tsx
🏷️ الدالة: QuickActions
🔢 الأسطر: 9-89
⚡ Async: لا
📞 الاستدعاءات:
   • useToast() (سطر 10)
   • useQueryClient() (سطر 11)
   • useLocation() (سطر 12)
   • useMutation({
    mutationFn: async () => {
      await apiRequest("POST", "/api/nginx/reload");
    },
    onSuccess: () => {
      toast({
        title: "تم إعادة تحميل Nginx",
        description: "تم إعادة تحميل تكوين Nginx بنجاح",
      });
      queryClient.invalidateQueries({ queryKey: ["/api/dashboard/stats"] });
    },
    onError: (error) => {
      toast({
        title: "خطأ في إعادة التحميل",
        description: "فشل في إعادة تحميل Nginx",
        variant: "destructive",
      });
    },
  }) (سطر 14)
   • apiRequest("POST", "/api/nginx/reload") (سطر 16)
   • toast({
        title: "تم إعادة تحميل Nginx",
        description: "تم إعادة تحميل تكوين Nginx بنجاح",
      }) (سطر 19)
   • queryClient.invalidateQueries({ queryKey: ["/api/dashboard/stats"] }) (سطر 23)
   • toast({
        title: "خطأ في إعادة التحميل",
        description: "فشل في إعادة تحميل Nginx",
        variant: "destructive",
      }) (سطر 26)
   • setLocation("/applications") (سطر 39)
   • setLocation("/ssl") (سطر 47)
   • reloadNginxMutation.mutate() (سطر 55)
   • actions.map((action) => (
            <Button
              key={action.label}
              variant={action.variant}
              className={action.className}
              onClick={action.action}
              disabled={action.loading}
              data-testid={action.testId}
            >
              {action.loading ? (
                <RefreshCw className="w-4 h-4 ml-2 animate-spin" />
              ) : (
                <action.icon className="w-4 h-4 ml-2" />
              )}
              {action.label}
            </Button>
          )) (سطر 68)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/Dashboard/StatsCard.tsx
🏷️ الدالة: StatsCard
🔢 الأسطر: 57-129
⚡ Async: لا
🔑 الوسائط:
   • { 
  title, 
  value, 
  total,
  icon, 
  trend = 'neutral', 
  warning,
  loading = false,
  className 
}: StatsCardProps
📞 الاستدعاءات:
   • cn("card-hover", className) (سطر 72)
   • cn("card-hover", className) (سطر 91)
   • cn(
            "w-12 h-12 rounded-lg flex items-center justify-center",
            trendConfig[trend].bgClassName
          ) (سطر 103)
   • cn("text-lg", trendConfig[trend].className) (سطر 107)
   • cn("w-4 h-4", trendConfig[trend].className) (سطر 112)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/Dashboard/SystemResources.tsx
🏷️ الدالة: SystemResources
🔢 الأسطر: 19-112
⚡ Async: لا
🔑 الوسائط:
   • { systemStats, systemInfo, loading }: SystemResourcesProps
📞 الاستدعاءات:
   • Math.floor(seconds / 86400) (سطر 21)
   • Math.floor((seconds % 86400) / 3600) (سطر 22)
   • Math.floor((seconds % 3600) / 60) (سطر 23)
   • [...Array(3)].map((_, i) => (
              <div key={i} className="space-y-2">
                <div className="flex items-center justify-between">
                  <Skeleton className="h-4 w-20" />
                  <Skeleton className="h-4 w-8" />
                </div>
                <Skeleton className="w-full h-2 rounded-full" />
              </div>
            )) (سطر 48)
   • Array(3) (سطر 48)
   • formatUptime(systemInfo.uptime) (سطر 87)
   • resources.map((resource) => (
            <div key={resource.label} className="space-y-2" data-testid={resource.testId}>
              <div className="flex items-center justify-between">
                <span className="text-sm text-muted-foreground">{resource.label}</span>
                <span className="text-sm font-medium" data-testid={`${resource.testId}-value`}>
                  {resource.value.toFixed(1)}%
                </span>
              </div>
              <Progress 
                value={resource.value} 
                className="h-2"
                data-testid={`${resource.testId}-progress`}
              />
            </div>
          )) (سطر 93)
   • resource.value.toFixed(1) (سطر 98)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/Layout/BottomNavigation.tsx
🏷️ الدالة: BottomNavigation
🔢 الأسطر: 39-164
⚡ Async: لا
🔑 الوسائط:
   • { className }: BottomNavigationProps
📞 الاستدعاءات:
   • useLocation() (سطر 40)
   • useState(false) (سطر 41)
   • isActiveRoute(href) (سطر 56)
   • cn(
            "flex flex-col items-center justify-center min-h-[60px] px-2 py-1 transition-all duration-200 relative",
            "tap-highlight-transparent select-none cursor-pointer bottom-nav-item-bounce",
            isActive 
              ? "text-primary" 
              : "text-muted-foreground hover:text-foreground"
          ) (سطر 61)
   • href.replace('/', '') (سطر 69)
   • cn(
            "w-6 h-6 mb-1 transition-transform duration-200",
            isActive && "scale-110"
          ) (سطر 76)
   • cn(
            "text-xs font-medium transition-all duration-200",
            isActive ? "text-primary" : "text-muted-foreground"
          ) (سطر 80)
   • cn(
      "fixed bottom-0 left-0 right-0 z-40 lg:hidden",
      "bg-card/95 backdrop-blur-lg border-t border-border",
      "shadow-lg shadow-black/5 bottom-nav-slide-up",
      className
    ) (سطر 92)
   • mainNavItems.map((item) => (
          <NavItem key={item.href} {...item} />
        )) (سطر 100)
   • cn(
                "flex flex-col items-center justify-center min-h-[60px] px-2 py-1 transition-all duration-200",
                "tap-highlight-transparent select-none cursor-pointer",
                "text-muted-foreground hover:text-foreground"
              ) (سطر 108)
   • moreNavItems.map((item) => {
                const Icon = item.icon;
                const isActive = isActiveRoute(item.href);
                
                return (
                  <Link key={item.href} href={item.href}>
                    <div
                      className={cn(
                        "flex flex-col items-center justify-center p-4 rounded-xl transition-all duration-200",
                        "border border-border hover:border-primary/50",
                        "tap-highlight-transparent",
                        isActive 
                          ? "bg-primary/10 border-primary text-primary" 
                          : "bg-card hover:bg-accent/50"
                      )}
                      onClick={() => setIsMoreOpen(false)}
                      data-testid={`more-nav-${item.href.replace('/', '') || 'dashboard'}`}
                    >
                      <Icon className={cn(
                        "w-8 h-8 mb-2 transition-transform duration-200",
                        isActive && "scale-110"
                      )} />
                      <span className={cn(
                        "text-sm font-medium text-center",
                        isActive ? "text-primary" : "text-foreground"
                      )}>
                        {item.label}
                      </span>
                    </div>
                  </Link>
                );
              }) (سطر 126)
   • isActiveRoute(item.href) (سطر 128)
   • cn(
                        "flex flex-col items-center justify-center p-4 rounded-xl transition-all duration-200",
                        "border border-border hover:border-primary/50",
                        "tap-highlight-transparent",
                        isActive 
                          ? "bg-primary/10 border-primary text-primary" 
                          : "bg-card hover:bg-accent/50"
                      ) (سطر 133)
   • setIsMoreOpen(false) (سطر 141)
   • item.href.replace('/', '') (سطر 142)
   • cn(
                        "w-8 h-8 mb-2 transition-transform duration-200",
                        isActive && "scale-110"
                      ) (سطر 144)
   • cn(
                        "text-sm font-medium text-center",
                        isActive ? "text-primary" : "text-foreground"
                      ) (سطر 148)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/Layout/Header.tsx
🏷️ الدالة: NotificationsPopover
🔢 الأسطر: 42-183
⚡ Async: لا
📞 الاستدعاءات:
   • useNotifications() (سطر 43)
   • useState(false) (سطر 44)
   • notifications.slice(0, 10) (سطر 72)
   • recentNotifications.map((notification) => (
                <div
                  key={notification.id}
                  className={`p-3 rounded-lg mb-2 transition-colors hover:bg-accent ${
                    !notification.acknowledged ? 'bg-accent/50' : ''
                  }`}
                  data-testid={`notification-${notification.id}`}
                >
                  <div className="flex items-start gap-3">
                    {getNotificationIcon(notification.type)}
                    <div className="flex-1 min-w-0">
                      <div className="flex items-center justify-between mb-1">
                        <p className="font-medium text-sm truncate">{notification.title}</p>
                        <Badge 
                          variant={getNotificationVariant(notification.type)} 
                          className="ml-2 text-xs"
                        >
                          {notification.level === 'high' ? 'عالي' : notification.level === 'medium' ? 'متوسط' : 'منخفض'}
                        </Badge>
                      </div>
                      <p className="text-sm text-muted-foreground mb-2 line-clamp-2">
                        {notification.message}
                      </p>
                      <div className="flex items-center justify-between">
                        <span className="text-xs text-muted-foreground flex items-center gap-1">
                          <Clock className="h-3 w-3" />
                          {notification.createdAt ? formatDistanceToNow(new Date(notification.createdAt), { 
                            addSuffix: true, 
                            locale: ar 
                          }) : 'الآن'}
                        </span>
                        <div className="flex gap-1">
                          {!notification.acknowledged && (
                            <Button
                              variant="ghost"
                              size="sm"
                              className="h-6 px-2 text-xs"
                              onClick={() => markAsRead(notification.id)}
                              data-testid={`mark-read-${notification.id}`}
                            >
                              تم القراءة
                            </Button>
                          )}
                          {!notification.resolved && (
                            <Button
                              variant="ghost"
                              size="sm"
                              className="h-6 px-2 text-xs"
                              onClick={() => markAsResolved(notification.id)}
                              data-testid={`resolve-${notification.id}`}
                            >
                              حل
                            </Button>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )) (سطر 109)
   • getNotificationIcon(notification.type) (سطر 118)
   • getNotificationVariant(notification.type) (سطر 123)
   • formatDistanceToNow(new Date(notification.createdAt), { 
                            addSuffix: true, 
                            locale: ar 
                          }) (سطر 135)
   • markAsRead(notification.id) (سطر 146)
   • markAsResolved(notification.id) (سطر 157)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/Layout/Header.tsx
🏷️ الدالة: SettingsDropdown
🔢 الأسطر: 186-314
⚡ Async: لا
📞 الاستدعاءات:
   • useState(localStorage.getItem('theme') || 'light') (سطر 187)
   • localStorage.getItem('theme') (سطر 187)
   • useState(localStorage.getItem('language') || 'ar') (سطر 188)
   • localStorage.getItem('language') (سطر 188)
   • useState(localStorage.getItem('autoRefresh') !== 'false') (سطر 189)
   • localStorage.getItem('autoRefresh') (سطر 189)
   • setTheme(newTheme) (سطر 192)
   • localStorage.setItem('theme', newTheme) (سطر 193)
   • setLanguage(newLanguage) (سطر 198)
   • localStorage.setItem('language', newLanguage) (سطر 199)
   • setAutoRefresh(newValue) (سطر 205)
   • localStorage.setItem('autoRefresh', newValue.toString()) (سطر 206)
   • newValue.toString() (سطر 206)
   • fetch('/api/system/export-logs', {
        credentials: 'include'
      }) (سطر 215)
   • response.blob() (سطر 219)
   • window.URL.createObjectURL(blob) (سطر 220)
   • document.createElement('a') (سطر 221)
   • new Date().toISOString().split('T') (سطر 224)
   • new Date().toISOString() (سطر 224)
   • document.body.appendChild(a) (سطر 225)
   • a.click() (سطر 226)
   • window.URL.revokeObjectURL(url) (سطر 227)
   • console.error('Failed to export logs:', error) (سطر 230)
   • handleThemeChange('light') (سطر 252)
   • handleThemeChange('dark') (سطر 260)
   • handleLanguageChange('ar') (سطر 273)
   • handleLanguageChange('en') (سطر 281)
🩺 التشخيص:
   ⚠️ استدعاء newValue.toString() بدون تحديد الترميز (قد يسبب مشاكل)

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/Layout/Header.tsx
🏷️ الدالة: Header
🔢 الأسطر: 316-354
⚡ Async: لا
🔑 الوسائط:
   • { onMenuClick, showMenuButton }: HeaderProps
📞 الاستدعاءات:
   • useLocation() (سطر 317)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/Layout/MainLayout.tsx
🏷️ الدالة: MainLayout
🔢 الأسطر: 11-38
⚡ Async: لا
🔑 الوسائط:
   • { children }: MainLayoutProps
📞 الاستدعاءات:
   • useState(false) (سطر 12)
   • useIsMobile() (سطر 13)
   • setSidebarOpen(false) (سطر 19)
   • setSidebarOpen(true) (سطر 25)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/Layout/Sidebar.tsx
🏷️ الدالة: Sidebar
🔢 الأسطر: 44-162
⚡ Async: لا
🔑 الوسائط:
   • { open, onClose, isMobile }: SidebarProps
📞 الاستدعاءات:
   • useLocation() (سطر 45)
   • useAuth() (سطر 46)
   • useNotifications() (سطر 47)
   • cn(
    "w-64 bg-card border-l border-border flex flex-col sidebar-transition",
    "lg:translate-x-0",
    {
      "fixed inset-y-0 right-0 z-50": isMobile,
      "sidebar-hidden": isMobile && !open,
    }
  ) (سطر 49)
   • navigationItems.map((item) => {
            const isActive = location === item.href;
            const Icon = item.icon;

            return (
              <Link key={item.href} href={item.href}>
                <div
                  className={cn(
                    "flex items-center gap-3 px-4 py-3 rounded-lg transition-colors w-full",
                    isActive 
                      ? "bg-primary text-primary-foreground font-medium"
                      : "hover:bg-accent hover:text-accent-foreground"
                  )}
                  onClick={isMobile ? onClose : undefined}
                  data-testid={`nav-${item.href.replace('/', '') || 'dashboard'}`}
                >
                  <Icon className="w-5 h-5" />
                  <span>{item.label}</span>
                  {item.href === "/ssl" && unreadCount > 0 && (
                    <div className="relative mr-auto">
                      <Shield className="text-yellow-500" />
                      <div className="notification-dot" />
                    </div>
                  )}
                  {item.href === "/applications" && (
                    <span className="mr-auto bg-primary/20 text-primary text-xs px-2 py-1 rounded-full">
                      4
                    </span>
                  )}
                </div>
              </Link>
            );
          }) (سطر 98)
   • cn(
                    "flex items-center gap-3 px-4 py-3 rounded-lg transition-colors w-full",
                    isActive 
                      ? "bg-primary text-primary-foreground font-medium"
                      : "hover:bg-accent hover:text-accent-foreground"
                  ) (سطر 105)
   • item.href.replace('/', '') (سطر 112)
   • `${user.firstName} ${user.lastName || ''}`.trim() (سطر 141)
   • user?.email?.split('@') (سطر 141)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/ui/alert-dialog.tsx
🏷️ الدالة: AlertDialogHeader
🔢 الأسطر: 46-57
⚡ Async: لا
🔑 الوسائط:
   • {
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>
📞 الاستدعاءات:
   • cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    ) (سطر 51)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/ui/alert-dialog.tsx
🏷️ الدالة: AlertDialogFooter
🔢 الأسطر: 60-71
⚡ Async: لا
🔑 الوسائط:
   • {
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>
📞 الاستدعاءات:
   • cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    ) (سطر 65)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/ui/badge.tsx
🏷️ الدالة: Badge
🔢 الأسطر: 30-34
⚡ Async: لا
🔑 الوسائط:
   • { className, variant, ...props }: import("/home/administrator/Panel/client/src/components/ui/badge").BadgeProps
📞 الاستدعاءات:
   • cn(badgeVariants({ variant }), className) (سطر 32)
   • badgeVariants({ variant }) (سطر 32)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/ui/breadcrumb.tsx
🏷️ الدالة: BreadcrumbSeparator
🔢 الأسطر: 75-88
⚡ Async: لا
🔑 الوسائط:
   • {
  children,
  className,
  ...props
}: React.DetailedHTMLProps<React.LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>
📞 الاستدعاءات:
   • cn("[&>svg]:w-3.5 [&>svg]:h-3.5", className) (سطر 83)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/ui/breadcrumb.tsx
🏷️ الدالة: BreadcrumbEllipsis
🔢 الأسطر: 91-104
⚡ Async: لا
🔑 الوسائط:
   • {
  className,
  ...props
}: React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>
📞 الاستدعاءات:
   • cn("flex h-9 w-9 items-center justify-center", className) (سطر 98)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/ui/calendar.tsx
🏷️ الدالة: Calendar
🔢 الأسطر: 10-65
⚡ Async: لا
🔑 الوسائط:
   • {
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: import("/home/administrator/Panel/node_modules/react-day-picker/dist/index").DayPickerDefaultProps | import("/home/administrator/Panel/node_modules/react-day-picker/dist/index").DayPickerSingleProps | import("/home/administrator/Panel/node_modules/react-day-picker/dist/index").DayPickerMultipleProps | import("/home/administrator/Panel/node_modules/react-day-picker/dist/index").DayPickerRangeProps
📞 الاستدعاءات:
   • cn("p-3", className) (سطر 19)
   • cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ) (سطر 26)
   • buttonVariants({ variant: "outline" }) (سطر 27)
   • cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ) (سطر 38)
   • buttonVariants({ variant: "ghost" }) (سطر 39)
   • cn("h-4 w-4", className) (سطر 56)
   • cn("h-4 w-4", className) (سطر 59)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/ui/carousel.tsx
🏷️ الدالة: useCarousel
🔢 الأسطر: 33-41
⚡ Async: لا
📞 الاستدعاءات:
   • React.useContext(CarouselContext) (سطر 34)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/ui/chart.tsx
🏷️ الدالة: useChart
🔢 الأسطر: 27-35
⚡ Async: لا
📞 الاستدعاءات:
   • React.useContext(ChartContext) (سطر 28)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/ui/chart.tsx
🏷️ الدالة: getPayloadConfigFromPayload
🔢 الأسطر: 320-356
⚡ Async: لا
🔑 الوسائط:
   • config: import("/home/administrator/Panel/client/src/components/ui/chart").ChartConfig
   • payload: unknown
   • key: string
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/ui/chart.tsx
🏷️ الدالة: ChartStyle
🔢 الأسطر: 70-101
⚡ Async: لا
🔑 الوسائط:
   • { id, config }: { id: string; config: import("/home/administrator/Panel/client/src/components/ui/chart").ChartConfig; }
📞 الاستدعاءات:
   • Object.entries(config).filter(
    ([, config]) => config.theme || config.color
  ) (سطر 71)
   • Object.entries(config) (سطر 71)
   • Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n") (سطر 82)
   • Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          ) (سطر 82)
   • Object.entries(THEMES) (سطر 82)
   • colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n") (سطر 86)
   • colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  }) (سطر 86)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/ui/command.tsx
🏷️ الدالة: CommandDialog
🔢 الأسطر: 24-34
⚡ Async: لا
🔑 الوسائط:
   • { children, ...props }: import("/home/administrator/Panel/node_modules/@radix-ui/react-dialog/dist/index").DialogProps
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/ui/command.tsx
🏷️ الدالة: CommandShortcut
🔢 الأسطر: 125-138
⚡ Async: لا
🔑 الوسائط:
   • {
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>
📞 الاستدعاءات:
   • cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      ) (سطر 131)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/ui/context-menu.tsx
🏷️ الدالة: ContextMenuShortcut
🔢 الأسطر: 166-179
⚡ Async: لا
🔑 الوسائط:
   • {
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>
📞 الاستدعاءات:
   • cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      ) (سطر 172)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/ui/dialog.tsx
🏷️ الدالة: DialogHeader
🔢 الأسطر: 56-67
⚡ Async: لا
🔑 الوسائط:
   • {
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>
📞 الاستدعاءات:
   • cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    ) (سطر 61)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/ui/dialog.tsx
🏷️ الدالة: DialogFooter
🔢 الأسطر: 70-81
⚡ Async: لا
🔑 الوسائط:
   • {
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>
📞 الاستدعاءات:
   • cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    ) (سطر 75)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/ui/drawer.tsx
🏷️ الدالة: Drawer
🔢 الأسطر: 8-16
⚡ Async: لا
🔑 الوسائط:
   • {
  shouldScaleBackground = true,
  ...props
}: import("/home/administrator/Panel/node_modules/vaul/dist/index").DialogProps
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/ui/drawer.tsx
🏷️ الدالة: DrawerHeader
🔢 الأسطر: 58-66
⚡ Async: لا
🔑 الوسائط:
   • {
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>
📞 الاستدعاءات:
   • cn("grid gap-1.5 p-4 text-center sm:text-left", className) (سطر 63)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/ui/drawer.tsx
🏷️ الدالة: DrawerFooter
🔢 الأسطر: 69-77
⚡ Async: لا
🔑 الوسائط:
   • {
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>
📞 الاستدعاءات:
   • cn("mt-auto flex flex-col gap-2 p-4", className) (سطر 74)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/ui/dropdown-menu.tsx
🏷️ الدالة: DropdownMenuShortcut
🔢 الأسطر: 169-179
⚡ Async: لا
🔑 الوسائط:
   • {
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>
📞 الاستدعاءات:
   • cn("ml-auto text-xs tracking-widest opacity-60", className) (سطر 175)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/ui/form.tsx
🏷️ الدالة: FormField
🔢 الأسطر: 31-42
⚡ Async: لا
🔑 الوسائط:
   • {
  ...props
}: import("/home/administrator/Panel/node_modules/react-hook-form/dist/types/controller").ControllerProps<TFieldValues, TName>
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/ui/form.tsx
🏷️ الدالة: useFormField
🔢 الأسطر: 44-65
⚡ Async: لا
📞 الاستدعاءات:
   • React.useContext(FormFieldContext) (سطر 45)
   • React.useContext(FormItemContext) (سطر 46)
   • useFormContext() (سطر 47)
   • getFieldState(fieldContext.name, formState) (سطر 49)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/ui/menubar.tsx
🏷️ الدالة: MenubarMenu
🔢 الأسطر: 9-13
⚡ Async: لا
🔑 الوسائط:
   • {
  ...props
}: import("/home/administrator/Panel/node_modules/@radix-ui/react-menubar/dist/index").MenubarMenuProps & { __scopeMenubar?: import("/home/administrator/Panel/node_modules/@radix-ui/react-context/dist/index").Scope; }
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/ui/menubar.tsx
🏷️ الدالة: MenubarGroup
🔢 الأسطر: 15-19
⚡ Async: لا
🔑 الوسائط:
   • {
  ...props
}: import("/home/administrator/Panel/node_modules/@radix-ui/react-menubar/dist/index").MenubarGroupProps & React.RefAttributes<HTMLDivElement>
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/ui/menubar.tsx
🏷️ الدالة: MenubarPortal
🔢 الأسطر: 21-25
⚡ Async: لا
🔑 الوسائط:
   • {
  ...props
}: import("/home/administrator/Panel/node_modules/@radix-ui/react-menubar/dist/index").MenubarPortalProps
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/ui/menubar.tsx
🏷️ الدالة: MenubarRadioGroup
🔢 الأسطر: 27-31
⚡ Async: لا
🔑 الوسائط:
   • {
  ...props
}: import("/home/administrator/Panel/node_modules/@radix-ui/react-menubar/dist/index").MenubarRadioGroupProps & React.RefAttributes<HTMLDivElement>
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/ui/menubar.tsx
🏷️ الدالة: MenubarSub
🔢 الأسطر: 33-37
⚡ Async: لا
🔑 الوسائط:
   • {
  ...props
}: import("/home/administrator/Panel/node_modules/@radix-ui/react-menubar/dist/index").MenubarSubProps
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/ui/menubar.tsx
🏷️ الدالة: MenubarShortcut
🔢 الأسطر: 223-236
⚡ Async: لا
🔑 الوسائط:
   • {
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>
📞 الاستدعاءات:
   • cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      ) (سطر 229)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/ui/pagination.tsx
🏷️ الدالة: Pagination
🔢 الأسطر: 7-14
⚡ Async: لا
🔑 الوسائط:
   • { className, ...props }: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>
📞 الاستدعاءات:
   • cn("mx-auto flex w-full justify-center", className) (سطر 11)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/ui/pagination.tsx
🏷️ الدالة: PaginationLink
🔢 الأسطر: 42-59
⚡ Async: لا
🔑 الوسائط:
   • {
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps
📞 الاستدعاءات:
   • cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    ) (سطر 50)
   • buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }) (سطر 51)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/ui/pagination.tsx
🏷️ الدالة: PaginationPrevious
🔢 الأسطر: 62-75
⚡ Async: لا
🔑 الوسائط:
   • {
  className,
  ...props
}: { isActive?: boolean | undefined; } & Pick<import("/home/administrator/Panel/client/src/components/ui/button").ButtonProps, "size"> & React.ClassAttributes<HTMLAnchorElement> & React.AnchorHTMLAttributes<HTMLAnchorElement>
📞 الاستدعاءات:
   • cn("gap-1 pl-2.5", className) (سطر 69)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/ui/pagination.tsx
🏷️ الدالة: PaginationNext
🔢 الأسطر: 78-91
⚡ Async: لا
🔑 الوسائط:
   • {
  className,
  ...props
}: { isActive?: boolean | undefined; } & Pick<import("/home/administrator/Panel/client/src/components/ui/button").ButtonProps, "size"> & React.ClassAttributes<HTMLAnchorElement> & React.AnchorHTMLAttributes<HTMLAnchorElement>
📞 الاستدعاءات:
   • cn("gap-1 pr-2.5", className) (سطر 85)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/ui/pagination.tsx
🏷️ الدالة: PaginationEllipsis
🔢 الأسطر: 94-106
⚡ Async: لا
🔑 الوسائط:
   • {
  className,
  ...props
}: React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>
📞 الاستدعاءات:
   • cn("flex h-9 w-9 items-center justify-center", className) (سطر 100)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/ui/resizable.tsx
🏷️ الدالة: ResizablePanelGroup
🔢 الأسطر: 8-19
⚡ Async: لا
🔑 الوسائط:
   • {
  className,
  ...props
}: Omit<React.HTMLAttributes<keyof HTMLElementTagNameMap>, "id"> & { autoSaveId?: string | null | undefined; className?: string | undefined; direction: import("/home/administrator/Panel/node_modules/react-resizable-panels/dist/declarations/src/types").Direction; id?: string | null | undefined; keyboardResizeBy?: number | null | undefined; onLayout?: import("/home/administrator/Panel/node_modules/react-resizable-panels/dist/declarations/src/PanelGroup").PanelGroupOnLayout | null | undefined; storage?: import("/home/administrator/Panel/node_modules/react-resizable-panels/dist/declarations/src/PanelGroup").PanelGroupStorage | undefined; style?: React.CSSProperties | undefined; tagName?: keyof HTMLElementTagNameMap | undefined; dir?: "auto" | "ltr" | "rtl" | undefined; } & { children?: React.ReactNode; } & React.RefAttributes<import("/home/administrator/Panel/node_modules/react-resizable-panels/dist/declarations/src/PanelGroup").ImperativePanelGroupHandle>
📞 الاستدعاءات:
   • cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    ) (سطر 13)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/ui/resizable.tsx
🏷️ الدالة: ResizableHandle
🔢 الأسطر: 23-43
⚡ Async: لا
🔑 الوسائط:
   • {
  withHandle,
  className,
  ...props
}: Omit<React.HTMLAttributes<keyof HTMLElementTagNameMap>, "id" | "onFocus" | "onBlur" | "onClick" | "onPointerDown" | "onPointerUp"> & { className?: string | undefined; disabled?: boolean | undefined; hitAreaMargins?: import("/home/administrator/Panel/node_modules/react-resizable-panels/dist/declarations/src/PanelResizeHandleRegistry").PointerHitAreaMargins | undefined; id?: string | null | undefined; onBlur?: (() => void) | undefined; onClick?: (() => void) | undefined; onDragging?: import("/home/administrator/Panel/node_modules/react-resizable-panels/dist/declarations/src/PanelResizeHandle").PanelResizeHandleOnDragging | undefined; onFocus?: (() => void) | undefined; onPointerDown?: (() => void) | undefined; onPointerUp?: (() => void) | undefined; style?: React.CSSProperties | undefined; tabIndex?: number | undefined; tagName?: keyof HTMLElementTagNameMap | undefined; } & { children?: React.ReactNode; } & { withHandle?: boolean | undefined; }
📞 الاستدعاءات:
   • cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    ) (سطر 31)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/ui/sheet.tsx
🏷️ الدالة: SheetHeader
🔢 الأسطر: 77-88
⚡ Async: لا
🔑 الوسائط:
   • {
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>
📞 الاستدعاءات:
   • cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    ) (سطر 82)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/ui/sheet.tsx
🏷️ الدالة: SheetFooter
🔢 الأسطر: 91-102
⚡ Async: لا
🔑 الوسائط:
   • {
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>
📞 الاستدعاءات:
   • cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    ) (سطر 96)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/ui/sidebar.tsx
🏷️ الدالة: useSidebar
🔢 الأسطر: 45-52
⚡ Async: لا
📞 الاستدعاءات:
   • React.useContext(SidebarContext) (سطر 46)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/ui/skeleton.tsx
🏷️ الدالة: Skeleton
🔢 الأسطر: 3-13
⚡ Async: لا
🔑 الوسائط:
   • {
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>
📞 الاستدعاءات:
   • cn("animate-pulse rounded-md bg-muted", className) (سطر 9)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

━━━━━━━━━━━━━━━━━━━━━━━
📂 الملف: client/src/components/ui/toaster.tsx
🏷️ الدالة: Toaster
🔢 الأسطر: 11-33
⚡ Async: لا
📞 الاستدعاءات:
   • useToast() (سطر 12)
   • toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      }) (سطر 16)
🩺 التشخيص:
   ✅ لا توجد مشاكل ظاهرة

