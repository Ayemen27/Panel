عنوان المهمة: تدقيق عميق للتطبيق + فحص جميع الصفحات والوظائف وجاهزية للنشر

الهدف:
إجراء فحص تقني وظيفي، أمني، أداء، وتجربة مستخدم (UX/UI) شامل للتطبيق (جميع الصفحات والـ APIs والوظائف) وتقديم تقرير نهائي مفصل يتضمن جميع المشاكل، خطوات إعادة الإنتاج، شدة المشكلة (Critical/High/Medium/Low)، وتوصيات إصلاح عملية مع مقتطفات كود أو ملفات/أسطر مرجعية.

بيئة العمل:
- المستودع: (ضع هنا رابط الـ git أو المسار المحلي). الفرع: main (أو فرع محدد).
- استخدم ملفات .env.production إن وجدت أو زوّد نسخة من متغيرات البيئة اللازمة (لا تُشارك كلمات المرور العامة).
- نفّذ العمل داخل بيئة Replit أو الخادم المخصص، سجل أي صلاحيات ناقصة (sudo, root).

المخرجات المطلوبة:
1. تقرير نهائي (Markdown بالعربية + موجز إنجليزي) يحتوي جداول: (الملاحظة، النتيجة ✅/❌، تصنيف الشدة، خطوات إعادة الإنتاج، الملفات/الأسطر، الحل المقترح).
2. ملف JSON و CSV يتضمن كل العيوب المكتشفة (للأرشفة).
3. مجلد أدلة: لقطات شاشة (UI)، لقطات سجلات (logs), نتائج أوامر الاختبار، مخرجات أدوات الأداء، نسخ من curl/responses.
4. قائمة قبول للنشر (Checklist) مع حالة كل بند PASS/FAIL.
5. لو وجدت أخطاء حرجة — اقترح PR مُفصّل أو تغييرات قابلة للتطبيق، أو أنشئ PR إن أمكن.

خطوات الفحص (ينفّذها الوكيل بدقة وبترتيب):

A — إعداد وتشغيل
- git fetch && git checkout <branch> && git pull
- نسخ .env.example إلى .env وملء القيم المناسبة (أو استخدم متغيرات الاختبار)
- npm ci (أو pnpm/yarn)
- تشغيل linters و type-check:
  - npm run lint
  - npx tsc --noEmit  (أو الأمر المناسب)
- تشغيل الاختبارات الآلية:
  - npm test
  - إن وُجد Playwright/Cypress: npx playwright test أو npx cypress run
- بناء المشروع:
  - npm run build
- تشغيل الخادم في وضع الإنتاج/اختبار:
  - npm start أو pm2 start ecosystem.config.js
- تحقق من حالة الخدمة: curl -fsS http://localhost:5000/health || curl -fsS http://127.0.0.1:5000/api/health

B — فحص الوظائف والـ APIs (smoke + تفصيلي)
- اجمع قائمة كل مسارات الـ API من server/routes.ts.
- تنفيذ فحص لكل endpoint (GET/POST/PUT/DELETE) بصيغة curl أو Postman (مثال):
  - curl -i -X GET "http://localhost:5000/api/files?path=/"
  - curl -i -X POST "http://localhost:5000/api/applications" -d '{"name":"test"}'
- تحقق من الحالات التالية لكل endpoint:
  - استجابة صحيحة (status code)، جسم الاستجابة، التأكيد على إدارة الأخطاء (error messages مفيدة).
  - صلاحيات الوصول (auth/roles) — جرّب دور admin و user و guest.
  - التحقق من الإدخالات: اختبر إدخالات طويلة، أحرف خاصة، محاولات XSS (بسيطة)، ومحاولات SQLi إن كانت ذات صلة.
- سجِّل أي endpoint مفقود أو مسار اسمه منطقي مختلف عن المذكور في التقرير.

C — فحص صفحات الواجهة (End-to-End)
- صفحات للاختبار (على الأقل — اضف أو عدّل حسب تطبيقك):
  - صفحة مدير الملفات: تحميل ملف، تنزيل، إعادة تسمية، حذف، تحرير وحفظ، صلاحيات الملفات، معاينة ملفات كبيرة.
  - لوحة التحكم Dashboard: عرض إحصاءات، Widgets تعمل (real-time).
  - إدارة التطبيقات (start/stop/deploy): تنفيذ عمليات على تطبيق حقيقي/مُحاكى.
  - شهادات SSL: إصدار/تجديد/حذف (تحقق من الأخطاء المتعلقة بصلاحيات).
  - سجلات النظام و Nginx: فتح، البحث، tail، تحميل.
  - الطرفية الآمنة: إرسال أوامر، استقبال المخرجات، منع الأوامر المحظورة.
  - إعدادات المستخدم والمصادقة: تسجيل دخول/خروج، إعادة تعيين كلمة المرور، OIDC flows.
- لكل صفحة قم بالتالي:
  - لقطة شاشة لكل حالة رئيسية (desktop + mobile).
  - تسجيل خطوات إعادة الإنتاج إذا وجدت خطأ.
  - قياس الأداء الأساسي (وقت تحميل الصفحة، First Contentful Paint إن أمكن عبر Lighthouse أو أدوات مماثلة).

D — اختبارات أمان أساسية
- تفتيش الشيفرة للثوابت غير الآمنة:
  - rg -n "NODE_TLS_REJECT_UNAUTHORIZED|= '0'|process.env.*SECRET" 
- npm audit --production
- تشغيل SAST إن أمكن (snyk test أو npm audit fix --dry-run)
- اختبار CSRF/XSS/Authentication flows (محاولات إدخال سلاسل ضارة وحالات تجاوز الAuthorization).
- فحص إعدادات CORS و headers الأمنية (Content-Security-Policy, X-Frame-Options).
- البحث عن ملفات حساسة ضمن المستودع (keys, .env) باستخدام git-secrets أو rg.

E — اختبارات الأداء والنشر
- تشغيل اختبار تحميل خفيف (k6 أو ApacheBench) على endpoints الحرجة (مثلاً /api/files و /api/applications):
  - مثال بسيط: `ab -n 100 -c 10 http://localhost:5000/api/health`
  - إن أمكن: تشغيل سكربت k6 صغير لمحاكاة استخدام ملفات.
- تشغيل Lighthouse (أو lighthouse-ci) للصفحات الرئيسية وجمع النتائج الأساسية (performance, accessibility, best-practices).
- تحقق من حجم الـ bundle ووقت build.

F — اختبار تجربة المستخدم (UX/UI) و-A11y
- اختبر تجاوب الواجهة على أحجام شاشة: desktop (1440), tablet (768), mobile (375).
- اختبر اتجاه RTL (العربية): عناصر المحاذاة، overflow، محاذاة الأزرار والنصوص.
- فحص الوصولية الأساسية: أ- تسمية الحقول (labels)، ب- ترتيب التبويب (tab order)، ج- تباين الألوان (contrast).
- اقتراح تحسينات تصميمية إن وُجدت (تباين ألوان، قراءة، سهولة الاستخدام).

G — تحقق من الجاهزية للنشر
- تحقق من:
  - كل الاختبارات الآلية تمر (unit/integration/e2e).
  - lint و typecheck صفر أخطاء.
  - endpoints الحرجة ترجع 200/expected.
  - قاعدة البيانات متصلة، migrations مُطبقة.
  - لا وجود لقيم environment غير آمنة (مثل NODE_TLS_REJECT_UNAUTHORIZED=0) في بيئة الإنتاج.
  - آلية تجديد SSL قابلة للعمل أو وثّق القيود (root required, Replit limits).
  - خطة نسخ احتياطي مذكورة أو موجودة (DB backups).
- ضع علامة PASS/FAIL على كل بند في "قائمة القبول للنشر".

قوالب التقارير والنتائج:
- لكل مشكلة سجّل:
  - عنوان المشكلة
  - الشدة: Critical / High / Medium / Low
  - وصف موجز
  - خطوات إعادة الإنتاج (خطوة بخطوة)
  - مخرجات السجلات / لقطات الشاشة / curl responses
  - المكان في الكود (file + line)
  - اقتراح إصلاح (code snippet أو PR suggestion)
  - حالة مقترحة (Needs hotfix / Acceptable / Monitor)
- قدّم جدول إجمالي يبين:
  - عدد المشاكل الحرجة/العالية/المتوسطة/المنخفضة
  - حالة الاختبارات (unit/integration/e2e) — passed/failed

قيود وإذا احتجت صلاحيات أو أسرار:
- إن احتجت صلاحيات root أو مفاتيح خارجية (Let's Encrypt، DB admin)، لا تنفّذ الإجراءات الخطرة تلقائياً؛ سجّل المطلوب وأرفق تعليمات التنفيذ الآمن أو ا͏طلب موافقة.

نهاية المهمة:
- أعد التقرير النهائي بالملفات المطلوبة في مجلد /tmp/app-audit-<date> أو كمرفقات في التذكرة.
- اذكر بوضوح: هل التطبيق جاهز للنشر؟ (نعم/لا)، واذكر الشروط المتبقية للنشر في حال “لا”.
- إذا كان جاهزًا، أعطني قائمة عمليات ما قبل النشر (pre-deploy checklist) وخطوات نشر مُقترحة.

مخرجات سريعة (عند الانتهاء):
- report.md (عربي + English executive summary)
- report.json (آلاتي)
- evidence.zip (screenshots, logs, test outputs)
- checklist.txt (Ready-to-deploy PASS/FAIL)

رجاءً قم بتنفيذ جميع الخطوات أعلاه وارجع إليّ بالتقرير المفصّل والمخرجات المذكورة. شكراً.